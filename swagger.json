{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The purpose of this application is to provide a simple service for storing and getting secrets",
    "title": "DevOps Secrets Vault API",
    "version": "1.0.0"
  },
  "host": "secretsvaultcloud.com",
  "basePath": "/v1",
  "paths": {
    "/audit": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Find audit records based on search critera.",
        "tags": [
          "Audit"
        ],
        "summary": "Find Audit Records",
        "operationId": "findAudit",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Principal",
            "description": "Security principal name",
            "name": "principal",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartDate",
            "description": "The start date to find audits from",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "EndDate",
            "description": "The end date to find audits to",
            "name": "endDate",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Action",
            "description": "The audit action",
            "name": "action",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The secret path",
            "name": "path",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "The cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "The number of results to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "description": "Sort results ascending (asc) or descending (desc) order. Default is desc",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful audit log search response",
            "schema": {
              "$ref": "#/definitions/LogSearchResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/breakglass": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get break glass status",
        "tags": [
          "Break-Glass"
        ],
        "summary": "Get Status",
        "operationId": "GetStatus",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          }
        }
      }
    },
    "/breakglass/apply": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Apply secret shares to break glass and give users admin rights",
        "tags": [
          "Break-Glass"
        ],
        "summary": "Apply",
        "operationId": "ApplyRequest",
        "parameters": [
          {
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Shares",
            "name": "shares",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ApplyResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/breakglass/generate": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Generate a new break glass secret and shares",
        "tags": [
          "Break-Glass"
        ],
        "summary": "Generate",
        "operationId": "GenerateRequest",
        "parameters": [
          {
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "NewAdmins",
            "name": "newAdmins",
            "in": "query",
            "required": true
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "x-go-name": "MinNumberOfShares",
            "name": "minNumberOfShares",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/GenerateResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/certificate/auth": {
      "post": {
        "description": "Request a challenge to decrypt to prove ownership of the private key for\nauthentication by certificate flow. Challenge id returned in response is\nonly valid for 5 minutes.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tokens"
        ],
        "summary": "Initiate authentication by certificate",
        "operationId": "init-cert-auth",
        "parameters": [
          {
            "type": "string",
            "description": "Base64 encoded client certificate in PEM format",
            "name": "client_certificate",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with an encrypted challenge",
            "schema": {
              "$ref": "#/definitions/InitiateCertAuthResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/clients": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Search for one or more client credentials associated with a particular role.",
        "tags": [
          "Clients"
        ],
        "summary": "Search for Client Credentials",
        "operationId": "searchClients",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Role",
            "description": "Role name associated with client credentials",
            "name": "role",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "The maximum number of results per cursor",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "Cursor to next batch of results",
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ClientSearchModel"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Request a new client credential for a role and get back the client id and secret key.",
        "tags": [
          "Clients"
        ],
        "summary": "Create a Client Credential",
        "operationId": "createClientCredential",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ClientCredentialsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/clients/bootstrap/{clientId}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get a client credential by url.",
        "tags": [
          "Clients"
        ],
        "summary": "Get a Client Bootstrap Credential including secret",
        "operationId": "getBootstrapClientCredential",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ClientCredentialsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/clients/{clientId}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get a client credential by client id. The secret key is omitted.",
        "tags": [
          "Clients"
        ],
        "summary": "Get a Client Credential",
        "operationId": "getClientCredential",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ClientId property of the client credentials",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ClientCredentialsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete a client credential by its unique client id.",
        "tags": [
          "Clients"
        ],
        "summary": "Delete a Client Credential",
        "operationId": "deleteClientCredential",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Force",
            "description": "Delete immediately",
            "name": "force",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ClientId property of the client credentials",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/clients/{clientId}/restore": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restore a client by ID.",
        "tags": [
          "Clients"
        ],
        "summary": "Restore a Client",
        "operationId": "restoreClient",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "ClientId property of the client credentials",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get config data.",
        "tags": [
          "Config"
        ],
        "summary": "Get Config",
        "operationId": "getConfig",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ConfigResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create or update config.",
        "tags": [
          "Config"
        ],
        "summary": "Create Config",
        "operationId": "postConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostConfigModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ConfigResponse"
            }
          },
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ConfigResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/auth": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Search authentication providers by name.",
        "tags": [
          "Settings"
        ],
        "summary": "Search Authentication Providers",
        "operationId": "searchSettings",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SearchTerm",
            "description": "Search pattern for setting name.",
            "name": "searchTerm",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "The maximum number of results per cursor.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "Cursor to next batch of results.",
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AuthenticationSettingsSearchResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/auth/": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Creates new authentication provider settings.",
        "tags": [
          "Settings"
        ],
        "summary": "Create Authentication Provider",
        "operationId": "createAuthSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationSettingsCreateModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AuthenticationSettingsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/auth/{name}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve authentication providers by name.",
        "tags": [
          "Settings"
        ],
        "summary": "Get Authentication Provider",
        "operationId": "getAuthSettings",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full name to lookup authentication settings by.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AuthenticationSettingsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Updates all fields on an existing authentication provider.",
        "tags": [
          "Settings"
        ],
        "summary": "Update Authentication Provider",
        "operationId": "updateAuthSettings",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full name to lookup authentication settings by.",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationDetailsModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AuthenticationSettingsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Remove authentication provider settings from the system.",
        "tags": [
          "Settings"
        ],
        "summary": "Delete Authentication Provider",
        "operationId": "deleteAuthSettings",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Force",
            "description": "Delete immediately",
            "name": "force",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full name to lookup authentication settings by.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/auth/{name}/restore": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restore authentication provider settings if it had been marked for deletion.",
        "tags": [
          "Settings"
        ],
        "summary": "Restore Authentication Provider",
        "operationId": "restoreAuthSettings",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full name to lookup authentication settings by.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/auth/{name}/rollback/{version}": {
      "put": {
        "description": "Rollback authentication provider to a previous version.",
        "tags": [
          "Settings"
        ],
        "summary": "Rollback Authentication Provider",
        "operationId": "rollbackAuthSettings",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full name to lookup authentication settings by.",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return.",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AuthenticationSettingsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/auth/{name}/version/{version}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.",
        "tags": [
          "Settings"
        ],
        "summary": "Get a list of Authentication Settings by version",
        "operationId": "getAuthSettingsByVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full name to lookup authentication settings by.",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return.",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AuthenticationSettingsVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/keys": {
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Update Master Encryption key.",
        "tags": [
          "Key"
        ],
        "summary": "Update Master Key",
        "operationId": "masterkeys",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Masterkey"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/policies": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Search permission policies by path.",
        "tags": [
          "Policies"
        ],
        "summary": "Search Policies",
        "operationId": "searchFilter",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SearchTerm",
            "description": "Search term",
            "name": "searchTerm",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "The maximum number of results per cursor",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "Cursor to next batch of results",
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/PolicySearchResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/policies/": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Creates new policy with permission document.",
        "tags": [
          "Policies"
        ],
        "summary": "Create Policy",
        "operationId": "createPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/PolicyResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/policies/{path}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve policy by path.",
        "tags": [
          "Policies"
        ],
        "summary": "Get Policy",
        "operationId": "getPolicy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "Full path to lookup policy",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/PolicyResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Overwrites an existing policy with an updated permissions document.",
        "tags": [
          "Policies"
        ],
        "summary": "Update Policy",
        "operationId": "updatePolicy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "Full path for policy",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/PolicyResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Remove an existing policy by path.",
        "tags": [
          "Policies"
        ],
        "summary": "Delete Policy",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Force",
            "description": "Delete immediately",
            "name": "force",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "Full path to lookup policy",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/policies/{path}/restore": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restore an existing policy by path.",
        "tags": [
          "Policies"
        ],
        "summary": "Restore Policy",
        "operationId": "restorePolicy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "Full path to lookup policy",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/policies/{path}/rollback/{version}": {
      "put": {
        "description": "Overwrites an existing policy with its previous version.",
        "tags": [
          "Policies"
        ],
        "summary": "Rollback Policy",
        "operationId": "rollbackPolicy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "Full path to lookup policy",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/PolicyResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/policies/{path}/version/{version}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.",
        "tags": [
          "Policies"
        ],
        "summary": "Get a list of policies by version",
        "operationId": "getPolicyByVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "Full path to lookup policy",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/PolicyVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/siem": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Search SIEM Endpoints by name.",
        "tags": [
          "SIEM"
        ],
        "summary": "Search SIEM Endpoints",
        "operationId": "searchSiems",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SearchTerm",
            "description": "Partial search term for search by name",
            "name": "searchTerm",
            "in": "query"
          },
          {
            "maximum": 500,
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "Limit for the number of results per page (cursor)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "Cursor to next batch of results",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "description": "Sort results ascending (asc) or descending (desc) order by name. Default is asc",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SiemSearchResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Creates a new SIEM endpoint.",
        "tags": [
          "SIEM"
        ],
        "summary": "Create SIEM Endpoint",
        "operationId": "siemCreate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SiemCreateUpdateRequestModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SiemResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/siem/{name}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve an existing SIEM endpoint.",
        "tags": [
          "SIEM"
        ],
        "summary": "Get SIEM Endpoint",
        "operationId": "siemGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SiemResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Update an existing SIEM endpoint. Update sets \"failed\" to \"false\" and \"failedEvents\" to \"0\" automatically.",
        "tags": [
          "SIEM"
        ],
        "summary": "Update SIEM Endpoint",
        "operationId": "siemUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SiemCreateUpdateRequestModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SiemResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete an existing SIEM endpoint.",
        "tags": [
          "SIEM"
        ],
        "summary": "Delete SIEM Endpoint",
        "operationId": "siemDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config/version/{version}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get zero or more representations of config specified by version number.",
        "tags": [
          "Config"
        ],
        "summary": "Get Config By Version",
        "operationId": "getConfigByVersion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ConfigVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/decrypt": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Decrypt ciphertext with a key.",
        "tags": [
          "EaaS-Auto"
        ],
        "summary": "Decrypt",
        "operationId": "decrypt",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The path to data key",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Ciphertext",
            "description": "A value to be decrypted",
            "name": "ciphertext",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Version",
            "description": "The version of the key with which to decrypt data",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/DecryptionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/encrypt": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Encrypt plaintext with a key.",
        "tags": [
          "EaaS-Auto"
        ],
        "summary": "Encrypt",
        "operationId": "encrypt",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The path to data key",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plaintext",
            "description": "A value to be encrypted",
            "name": "plaintext",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Version",
            "description": "The version of the key with which to encrypt data",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/EncryptionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/key/{path}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get metadata of an existing encryption/decryption key.",
        "tags": [
          "EaaS-Auto"
        ],
        "summary": "Get Key Metadata",
        "operationId": "getKeyMetadata",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AutoKeyResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create a new encryption/decryption key.",
        "tags": [
          "EaaS-Auto"
        ],
        "summary": "Create Key",
        "operationId": "createKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AutoKeyResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete an existing encryption/decryption key.",
        "tags": [
          "EaaS-Auto"
        ],
        "summary": "Delete Key",
        "operationId": "deleteKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/key/{path}/restore": {
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restore a soft-deleted encryption/decryption key.",
        "tags": [
          "EaaS-Auto"
        ],
        "summary": "Restore Key",
        "operationId": "restoreKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/manual/decrypt": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Decrypt ciphertext with a key.",
        "tags": [
          "EaaS-Manual"
        ],
        "summary": "Decrypt",
        "operationId": "decryptWithManualKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The path to data key",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Ciphertext",
            "description": "A value to be decrypted",
            "name": "ciphertext",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Version",
            "description": "The version of the key with which to decrypt data",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/DecryptionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/manual/encrypt": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Encrypt plaintext with a key.",
        "tags": [
          "EaaS-Manual"
        ],
        "summary": "Encrypt",
        "operationId": "encryptWithManualKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The path to data key",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plaintext",
            "description": "A value to be encrypted",
            "name": "plaintext",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Version",
            "description": "The version of the key with which to encrypt data",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/EncryptionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/manual/key/{path}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Read existing encryption/decryption key.",
        "tags": [
          "EaaS-Manual"
        ],
        "summary": "Read Key",
        "operationId": "readManualKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Update an existing encryption/decryption key.",
        "tags": [
          "EaaS-Manual"
        ],
        "summary": "Update Key",
        "operationId": "updateKey",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateKeyRequest"
            }
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Upload a new encryption/decryption key.",
        "tags": [
          "EaaS-Manual"
        ],
        "summary": "Upload Key",
        "operationId": "uploadKey",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualKeyData"
            }
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete an existing encryption/decryption key.",
        "tags": [
          "EaaS-Manual"
        ],
        "summary": "Delete Key",
        "operationId": "deleteManualKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/manual/key/{path}/restore": {
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restore a soft-deleted encryption/decryption key.",
        "tags": [
          "EaaS-Manual"
        ],
        "summary": "Restore Key",
        "operationId": "restoreManualKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full key path, for example, mykeys/key01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/crypto/rotate": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Rotate data and optionally an existing encryption/decryption key.\n\nIf the starting version is the current version of the key, then DSV will rotate the key (create a new version of it)\nand re-encrypt the data using this new version.\n\nIf the starting version is NOT the current version of the key, and the ending version is not provided, then DSV will\nonly re-encrypt the data using the current latest version of the key.\n\nThe starting and ending versions can also be below the latest one, so long as the starting is below the ending.\nIn this case, DSV will re-encrypt the data using the version of the key specified by the ending version.",
        "tags": [
          "EaaS-Auto"
        ],
        "summary": "Rotate Data and Key",
        "operationId": "RotationRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The path to data key",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Ciphertext",
            "description": "A value to be rotated (re-encrypted)",
            "name": "ciphertext",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "StartingVersion",
            "description": "The starting version of the key with which to re-encrypt data",
            "name": "startingVersion",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "EndingVersion",
            "description": "The ending version of the key with which to re-encrypt data",
            "name": "endingVersion",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/EncryptionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/download/audit": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Download a zip of audit records for a time range",
        "produces": [
          "application/zip"
        ],
        "tags": [
          "Audit"
        ],
        "summary": "Download Audit Records",
        "operationId": "downloadAudit",
        "parameters": [
          {
            "type": "string",
            "description": "The start date to find audits from",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The end date to find audits to",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "audit file response",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "attachment; filename=\"attachment.zip\""
              }
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/engines": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "List all existing engines.",
        "tags": [
          "Engines"
        ],
        "summary": "List Engines",
        "operationId": "listEngines",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/EngineListResult"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Registers a new engine and returns its key pair.",
        "tags": [
          "Engines"
        ],
        "summary": "Create Engine",
        "operationId": "createEngine",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EngineCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/EngineCreateResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/engines/{name}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve engine by name.",
        "tags": [
          "Engines"
        ],
        "summary": "Get Engine",
        "operationId": "getEngine",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of engine",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/EngineGetResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete an engine  by name.",
        "tags": [
          "Engines"
        ],
        "summary": "Delete Engine",
        "operationId": "deleteEngine",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Force",
            "description": "Delete immediately",
            "name": "force",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of engine",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/engines/{name}/ping": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Sends a message to the engine to validate connectivity.",
        "tags": [
          "Engines"
        ],
        "summary": "Ping Engine",
        "operationId": "pingEngine",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of engine",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/EnginePingResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Search for one or more groups by name.",
        "tags": [
          "Groups"
        ],
        "summary": "Search Groups",
        "operationId": "searchGroups",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SearchTerm",
            "description": "Partial search term for search by path",
            "name": "searchTerm",
            "in": "query"
          },
          {
            "maximum": 500,
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "Limit for the number of results per page (cursor)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "Cursor to next batch of results",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "description": "Sort results ascending (asc) or descending (desc) order by lastModified attribute on field search. Default is desc",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortedBy",
            "description": "SortedBy order the result by name, created or lastModified attribute on field search. Default is lastModified",
            "name": "sortedBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/GroupSearch"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/groups/": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create a new group.",
        "tags": [
          "Groups"
        ],
        "summary": "Create Group",
        "operationId": "createGroup",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AddMemberResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/groups/{name}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve an existing group by name.",
        "tags": [
          "Groups"
        ],
        "summary": "Get Group",
        "operationId": "getGroup",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Group name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete Group if it exists.",
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Force",
            "description": "Delete immediately",
            "name": "force",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Group name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/groups/{name}/members": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Add one or more members to a group.",
        "tags": [
          "Groups"
        ],
        "summary": "Add Members To Group",
        "operationId": "addMember",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AddMemberResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete one or more members from a group.",
        "tags": [
          "Groups"
        ],
        "summary": "Delete Members From Group",
        "operationId": "deleteMember",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Group name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/groups/{name}/restore": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restore a soft-deleted group.",
        "tags": [
          "Groups"
        ],
        "summary": "Restore Group",
        "operationId": "restoreGroup",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Group name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/home/{principalName}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Lists home secret paths that start with the path parameter.",
        "tags": [
          "Home"
        ],
        "summary": "Search for Home Secrets",
        "operationId": "searchHomeSecrets",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SearchTerm",
            "description": "Partial search term for search by path",
            "name": "searchTerm",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Link",
            "description": "Whether to search for secrets that link to the path in the search term",
            "name": "search.links",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Field",
            "description": "Secret field for advanced searching",
            "name": "search.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Comparison",
            "description": "Comparison type (equal, contains, begins_with) for advanced searching",
            "name": "search.comparison",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "UnderlyingType",
            "description": "Attribute type (string, number) to search on",
            "name": "search.type",
            "in": "query"
          },
          {
            "maximum": 500,
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "Limit for the number of results per page (cursor)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "Cursor to next batch of results",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "description": "Sort results ascending (asc) or descending (desc) order by lastModified attribute on field search. Default is desc",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretSearch"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/home/{principalName}/{path}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Gets a full home secret by path or by id in the query.",
        "tags": [
          "Home"
        ],
        "summary": "Get Home",
        "operationId": "getHomeSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "Unique uuid identifying a secret",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Updates an existing home secret.",
        "tags": [
          "Home"
        ],
        "summary": "Update home Secret",
        "operationId": "updateHomeSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Creates a new home secret.",
        "tags": [
          "Home"
        ],
        "summary": "Create home secrets",
        "operationId": "createHomeSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Deletes a home secret by path or by id in the query.",
        "tags": [
          "Home"
        ],
        "summary": "Delete Home Secret",
        "operationId": "deleteHomeSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "Unique uuid identifying a secret",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/home/{principalName}/{path}/restore": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restores a home secret by path or by id in the query.",
        "tags": [
          "Home"
        ],
        "summary": "Restore home Secret",
        "operationId": "restoreHomeSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "Unique uuid identifying a secret",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/home/{principalName}/{path}/rollback/{version}": {
      "put": {
        "description": "Rollbacks a Home Secret to a previous version.",
        "tags": [
          "Home"
        ],
        "summary": "Rollback a Home Secret",
        "operationId": "rollbackHomeSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/home/{principalName}/{path}/version/{version}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Gets a full home secret by path and version in the query.",
        "tags": [
          "Home"
        ],
        "summary": "Get Home Secret By Version",
        "operationId": "getHomeSecretByVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/home/{principalName}/{path}::description": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Gets a home secret's metadata without returning the sensitive data.",
        "tags": [
          "Home"
        ],
        "summary": "Get home Secret Description",
        "operationId": "getHomeSecretDescription",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "Unique uuid identifying a secret",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretDescription"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/pki/leaf": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create and return a signed certificate with a private key based on a registered root CA.",
        "tags": [
          "PKI"
        ],
        "summary": "Create Leaf Certificate and Private Key",
        "operationId": "LeafParams",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SigningRequestInformation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ResponseCertificate"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/pki/register": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Register a root CA as a secret.",
        "tags": [
          "PKI"
        ],
        "summary": "Register Root CA",
        "operationId": "registerRoot",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RootCASecret"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ResponseRootCertificate"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/pki/root": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create and return a new root certificate.",
        "tags": [
          "PKI"
        ],
        "summary": "Generate Root Certificate",
        "operationId": "rootCARegistration",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RootCARegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ResponseCertificate"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/pki/sign": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create and return a signed certificate based on a registered root CA with a given CSR.",
        "tags": [
          "PKI"
        ],
        "summary": "Create Signed Certificate",
        "operationId": "signCertificate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SigningRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SignedLeafCertificate"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/pki/ssh-cert": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create, store and return a signed SSH certificate using a root private key and SHH-compatible\nleaf public key.",
        "tags": [
          "PKI"
        ],
        "summary": "Create SSH Certificate",
        "operationId": "SSHCertParams",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSHCertInformation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ResponseSSHCertificate"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/pools": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "List all existing pools.",
        "tags": [
          "Pools"
        ],
        "summary": "List Pools",
        "operationId": "listPools",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/PoolListResult"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create an engine pool.",
        "tags": [
          "Pools"
        ],
        "summary": "Create Pool",
        "operationId": "createPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PoolCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/Pool"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/pools/{name}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve pool by name.",
        "tags": [
          "Pools"
        ],
        "summary": "Get Pool",
        "operationId": "getPool",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name to lookup path by",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/Pool"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete an engine pool by name.",
        "tags": [
          "Pools"
        ],
        "summary": "Delete Pool",
        "operationId": "deletePool",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name to lookup path by",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/revoke/{refreshtoken}": {
      "post": {
        "security": [],
        "description": "Revoke an existing refresh token to prevent it from being used for authentication.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tokens"
        ],
        "summary": "Revoke Refresh Token",
        "operationId": "revoke",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "RefreshToken",
            "description": "Refresh token to revoke",
            "name": "refreshtoken",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Search for one or more roles by role name.",
        "tags": [
          "Roles"
        ],
        "summary": "Search for Roles",
        "operationId": "searchRoles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SearchTerm",
            "description": "Search pattern for names of roles to look up",
            "name": "searchTerm",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "The maximum number of results per cursor",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "C ursor to next batch of results",
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/RoleSearchResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/roles/": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Creates a new role.",
        "tags": [
          "Roles"
        ],
        "summary": "Create a Role",
        "operationId": "createRole",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/roles/{name}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve an existing role by role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name\nmust be prefixed with the provider name from configuration in the format of \u003cprovidername\u003e:\u003crolename\u003e i.e. aws-dev:db",
        "tags": [
          "Roles"
        ],
        "summary": "Get a Role",
        "operationId": "getRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full role name to lookup role by",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Update an existing role.",
        "tags": [
          "Roles"
        ],
        "summary": "Update a Role",
        "operationId": "updateRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full role name to lookup role by",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleDetailsModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name\nmust be prefixed with the provider name from configuration in the format of \u003cprovidername\u003e:\u003crolename\u003e i.e. aws-dev:db",
        "tags": [
          "Roles"
        ],
        "summary": "Delete a Role",
        "operationId": "deleteRole",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Force",
            "description": "Delete immediately",
            "name": "force",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full role name to lookup role by",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/roles/{name}/restore": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restore a role by path.",
        "tags": [
          "Roles"
        ],
        "summary": "Restore a Role",
        "operationId": "restoreRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full role name to lookup role by",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/roles/{name}/version/{version}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name\nmust be prefixed with the provider name from configuration in the format of \u003cprovidername\u003e:\u003crolename\u003e i.e. aws-dev:db",
        "tags": [
          "Roles"
        ],
        "summary": "Get a Role By Version",
        "operationId": "getRoleByVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full name to lookup role by",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/RoleVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/secrets": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Lists secret paths that start with the path parameter.",
        "tags": [
          "Secrets"
        ],
        "summary": "Search for Secrets",
        "operationId": "searchSecrets",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "SearchTerm",
            "description": "Partial search term for search by path",
            "name": "searchTerm",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Link",
            "description": "Whether to search for secrets that link to the path in the search term",
            "name": "search.links",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Field",
            "description": "Secret field for advanced searching",
            "name": "search.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Comparison",
            "description": "Comparison type (equal, contains, begins_with) for advanced searching",
            "name": "search.comparison",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "UnderlyingType",
            "description": "Attribute type (string, number) to search on",
            "name": "search.type",
            "in": "query"
          },
          {
            "maximum": 500,
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "Limit for the number of results per page (cursor)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "Cursor to next batch of results",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "description": "Sort results ascending (asc) or descending (desc) order by lastModified attribute on field search. Default is desc",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretSearch"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/secrets/{path}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Gets a full secret by path or by id in the query.",
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret",
        "operationId": "getSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "Unique uuid identifying a secret",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Updates an existing secret.",
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret",
        "operationId": "updateSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Creates a new secret.",
        "tags": [
          "Secrets"
        ],
        "summary": "Create Secret",
        "operationId": "createSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Deletes a secret by path or by id in the query.",
        "tags": [
          "Secrets"
        ],
        "summary": "Delete Secret",
        "operationId": "deleteSecret",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Force",
            "description": "Delete immediately",
            "name": "force",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "Unique uuid identifying a secret",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/secrets/{path}/rollback/{version}": {
      "put": {
        "description": "Rollbacks a Secret to a previous version.",
        "tags": [
          "Secrets"
        ],
        "summary": "Rollback a Secret",
        "operationId": "rollbackSecret",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/secrets/{path}/version/{version}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Gets a full secret by path and version in the query.",
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret By Version",
        "operationId": "getSecretByVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/secrets/{path}::description": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Gets a secret's metadata without returning the sensitive data.",
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Description",
        "operationId": "getSecretDescription",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "Unique uuid identifying a secret",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The full secret path i.e. servers/prod/webserver-01",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretDescription"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/secrets/{path}::listpaths": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Lists secret paths that start with the path parameter.",
        "tags": [
          "Secrets"
        ],
        "summary": "List Secret Paths",
        "operationId": "listSecretPaths",
        "parameters": [
          {
            "maximum": 500,
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "The maximum number of path matches to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The secret path to match on",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/SecretListPathsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/task/status/{id}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get background task status by task uuid",
        "tags": [
          "Tasks"
        ],
        "summary": "Get background task status",
        "operationId": "getTaskStatus",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "description": "Task status uuid",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/TaskState"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/token": {
      "post": {
        "security": [],
        "description": "Submit parameters to get a new access token for use on protected endpoints",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tokens"
        ],
        "summary": "Authenticate",
        "operationId": "token",
        "parameters": [
          {
            "enum": [
              "password",
              "client_credentials",
              "certificate",
              "refresh_token",
              "aws_iam",
              "azure",
              "gcp"
            ],
            "type": "string",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Username for password grant type",
            "name": "username",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Password for password grant type",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Provider name for password grant flow for Thycotic One authentication",
            "name": "provider",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Base64 encoded signed aws request body for aws_iam grant type",
            "name": "aws_body",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Base64 encoded signed aws request headers for aws_iam grant type",
            "name": "aws_headers",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "JWT token for azure and gcp grant types",
            "name": "jwt",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client id for client_credentials grant type",
            "name": "client_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client secret for client_credentials grant type",
            "name": "client_secret",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Previously issued refresh token for the refresh_token grant type",
            "name": "refresh_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Challenge id for the certificate grant type",
            "name": "cert_challenge_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Decrypted and base64 encoded challenge for the certificate grant type",
            "name": "decrypted_challenge",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication response",
            "schema": {
              "$ref": "#/definitions/AccessTokenResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/usage": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Get usage statistics for API calls and total number of secrets",
        "tags": [
          "Usage"
        ],
        "summary": "Get Usage",
        "operationId": "getUsage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "StartDate",
            "description": "Start date to get usage statistics",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "EndDate",
            "description": "End date to get usage statistics, defaults to current date if not set",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/UsageResponseGeneral"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Search for one or more users by their name.",
        "tags": [
          "Users"
        ],
        "summary": "Search for Users",
        "operationId": "searchUsers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Field",
            "description": "User field for advanced searching",
            "name": "search.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Comparison",
            "description": "Comparison type (equal, contains, begins_with) for advanced searching",
            "name": "search.comparison",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "UnderlyingType",
            "description": "Attribute type (string, number) to search on",
            "name": "search.type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "description": "Sort results ascending (asc) or descending (desc) order by lastModified attribute on field search. Default is desc",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortedBy",
            "description": "SortedBy order the result by name, created or lastModified attribute on field search. Default is lastModified",
            "name": "sortedBy",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SearchTerm",
            "description": "Search pattern for names of users to look up",
            "name": "searchTerm",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "The maximum number of results per cursor",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Cursor",
            "description": "Cursor to next batch of results",
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/UserSearch"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/users/": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Create a new user.",
        "tags": [
          "Users"
        ],
        "summary": "Create a User",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/users/{name}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name\nmust be prefixed with the provider name from configuration in the format of \u003cprovidername\u003e:\u003cusername\u003e i.e. aws-dev:db",
        "tags": [
          "Users"
        ],
        "summary": "Get a User",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full user name to lookup user by",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Update an existing user.",
        "tags": [
          "Users"
        ],
        "summary": "Update a User",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full user name to lookup user by",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name\nmust be prefixed with the provider name from configuration in the format of \u003cprovidername\u003e:\u003cusername\u003e i.e. aws-dev:db",
        "tags": [
          "Users"
        ],
        "summary": "Delete a User",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Force",
            "description": "Delete immediately",
            "name": "force",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full user name to lookup user by",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/users/{name}/groups": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve a member's group by member name.",
        "tags": [
          "Users"
        ],
        "summary": "Get Member Group",
        "operationId": "getMember",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Member name to lookup member",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MemberResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Add a user to one or more groups.",
        "tags": [
          "Users"
        ],
        "summary": "Add Member To Groups",
        "operationId": "addToGroups",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full user name to lookup user by",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddToGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/AddToGroupsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/users/{name}/password": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Allows the user to change their own password.",
        "tags": [
          "Users"
        ],
        "summary": "Change Password",
        "operationId": "changePassword",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full user name to lookup user by",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordChangeModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/users/{name}/restore": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Restore a user by path.",
        "tags": [
          "Users"
        ],
        "summary": "Restore a User",
        "operationId": "restoreUser",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full user name to lookup user by",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/users/{name}/version/{version}": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          }
        ],
        "description": "Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name\nmust be prefixed with the provider name from configuration in the format of \u003cprovidername\u003e:\u003cusername\u003e i.e. aws-dev:db",
        "tags": [
          "Users"
        ],
        "summary": "Get a User By Version",
        "operationId": "getUserByVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Full user name to lookup user by",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "description": "Versions to return",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/UserVersionResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessTokenResponse": {
      "description": "AccessTokenResponse contains the bearer access token for accessing authorized endpoints",
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "JWT access token for authorized requests",
          "type": "string",
          "x-go-name": "Token"
        },
        "expiresIn": {
          "description": "Seconds until access token expires",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresIn"
        },
        "refreshToken": {
          "description": "Refresh token that can be used to get a new access token",
          "type": "string",
          "x-go-name": "RefreshToken"
        },
        "tokenType": {
          "description": "Token type",
          "type": "string",
          "x-go-name": "TokenType"
        }
      },
      "x-go-package": "api-bambe/domains/token"
    },
    "AddMemberResponse": {
      "description": "AddMemberResponse for Add members response",
      "type": "object",
      "properties": {
        "addedMemberNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Names"
        },
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Errors"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "AddToGroupsRequest": {
      "description": "AddToGroupsRequest to add user to a list of groups",
      "type": "object",
      "properties": {
        "groupNames": {
          "description": "List of group names",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Names"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "AddToGroupsResponse": {
      "description": "AddToGroupsResponse to add user to a list of groups",
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Errors"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "ApplyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "api-bambe/domains/breakglass"
    },
    "Audit": {
      "description": "Audit model",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action performed",
          "type": "string",
          "x-go-name": "Action"
        },
        "created": {
          "description": "Audit created date",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "description": "Audit id",
          "type": "string",
          "x-go-name": "ID"
        },
        "ipaddress": {
          "description": "IP Address logged from client",
          "type": "string",
          "x-go-name": "IpAddress"
        },
        "message": {
          "description": "Message additional details",
          "type": "string",
          "x-go-name": "Message"
        },
        "path": {
          "description": "Resource path action performed on",
          "type": "string",
          "x-go-name": "Path"
        },
        "principal": {
          "description": "Security principal that performed action",
          "type": "string",
          "x-go-name": "Principal"
        },
        "principalItemId": {
          "description": "Principal item ID",
          "type": "string",
          "x-go-name": "PrincipalItemId"
        },
        "status": {
          "description": "Http status code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        },
        "tenant": {
          "description": "Tenant ID",
          "type": "string",
          "x-go-name": "Tenant"
        },
        "tenantName": {
          "description": "Tenant Name",
          "type": "string",
          "x-go-name": "TenantName"
        }
      },
      "x-go-package": "api-bambe/domains/audit"
    },
    "AuthProperties": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "baseUri": {
          "type": "string",
          "x-go-name": "BaseURI"
        },
        "clientEmail": {
          "type": "string",
          "x-go-name": "ClientEmail"
        },
        "clientId": {
          "type": "string",
          "x-go-name": "ClientID"
        },
        "clientSecret": {
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "default": {
          "type": "boolean",
          "x-go-name": "Default"
        },
        "privateKey": {
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "privateKeyId": {
          "type": "string",
          "x-go-name": "PrivateKeyID"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "sendWelcomeEmail": {
          "type": "boolean",
          "x-go-name": "SendWelcomeEmail"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "tokenUri": {
          "type": "string",
          "x-go-name": "TokenURI"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "usernameClaim": {
          "type": "string",
          "x-go-name": "UsernameClaim"
        }
      },
      "x-go-package": "api-bambe/domains/config"
    },
    "Authentication": {
      "description": "Authentication is the 3rd party authentication providers",
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "$ref": "#/definitions/AuthProperties"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "api-bambe/domains/config"
    },
    "AuthenticationDetailsModel": {
      "type": "object",
      "title": "Details defines the editable properties of a Role.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AuthenticationProviderPropertiesModel"
        },
        "type": {
          "description": "AuthenticationSettings provider system type.",
          "type": "string",
          "x-go-name": "AuthType"
        }
      },
      "x-go-name": "Details",
      "x-go-package": "api-bambe/domains/config/auth"
    },
    "AuthenticationProviderPropertiesModel": {
      "type": "object",
      "title": "AuthenticationSettings is the 3rd party authentication providers.",
      "properties": {
        "accountId": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "baseUri": {
          "type": "string",
          "x-go-name": "BaseURI"
        },
        "clientEmail": {
          "type": "string",
          "x-go-name": "ClientEmail"
        },
        "clientId": {
          "type": "string",
          "x-go-name": "ClientID"
        },
        "clientSecret": {
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "default": {
          "type": "boolean",
          "x-go-name": "Default"
        },
        "privateKey": {
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "privateKeyId": {
          "type": "string",
          "x-go-name": "PrivateKeyID"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "sendWelcomeEmail": {
          "type": "boolean",
          "x-go-name": "SendWelcomeEmail"
        },
        "tenantId": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "tokenUri": {
          "type": "string",
          "x-go-name": "TokenURI"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "usernameClaim": {
          "type": "string",
          "x-go-name": "UsernameClaim"
        }
      },
      "x-go-name": "ProviderProperties",
      "x-go-package": "api-bambe/domains/config/auth"
    },
    "AuthenticationSettingsCreateModel": {
      "type": "object",
      "title": "AuthenticationCreateModel defines the post parameters.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of authentication provider.",
          "type": "string",
          "maxLength": 50,
          "minLength": 3,
          "x-go-name": "Name"
        },
        "properties": {
          "$ref": "#/definitions/AuthenticationProviderPropertiesModel"
        },
        "type": {
          "description": "AuthenticationSettings provider system type.",
          "type": "string",
          "x-go-name": "AuthType"
        }
      },
      "x-go-name": "AuthenticationCreateModel",
      "x-go-package": "api-bambe/domains/config/auth"
    },
    "AuthenticationSettingsResponse": {
      "type": "object",
      "title": "AuthenticationSettings is the 3rd party authentication providers.",
      "properties": {
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "$ref": "#/definitions/AuthenticationProviderPropertiesModel"
        },
        "type": {
          "description": "AuthenticationSettings provider system type.",
          "type": "string",
          "x-go-name": "AuthType"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "AuthenticationSettings",
      "x-go-package": "api-bambe/domains/config/auth"
    },
    "AuthenticationSettingsSearchResponse": {
      "type": "object",
      "title": "AuthenticationSettings settings search response with metadata.",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results.",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "AuthenticationSettings settings that match the search term.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationSettingsResponse"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        }
      },
      "x-go-name": "SearchResponse",
      "x-go-package": "api-bambe/domains/config/auth"
    },
    "AuthenticationSettingsVersionResponse": {
      "type": "object",
      "title": "Version results response.",
      "properties": {
        "data": {
          "description": "AuthenticationSettingsVersionResponse that match the version.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationSettingsResponse"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "api-bambe/domains/config/auth"
    },
    "AutoKey": {
      "type": "object",
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created the item",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "version": {
          "description": "Current version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "api-bambe/domains/encryption"
    },
    "AutoKeyResponse": {
      "description": "AutoKeyResponse contains the metadata of a data key",
      "type": "object",
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created the item",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "path": {
          "description": "A path to a data-key managed by DSV",
          "type": "string",
          "x-go-name": "Path"
        },
        "version": {
          "description": "Current version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "api-bambe/domains/encryption"
    },
    "ClientCreate": {
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "description": {
          "description": "Client description",
          "type": "string",
          "x-go-name": "Description"
        },
        "role": {
          "description": "Name of role to assign to client",
          "type": "string",
          "x-go-name": "Role"
        },
        "ttl": {
          "description": "TTL expiration in seconds",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TTL"
        },
        "url": {
          "type": "boolean",
          "x-go-name": "Url"
        },
        "urlTTL": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UrlTTL"
        },
        "usesLimit": {
          "description": "Uses the number of times the client credential can be read. if set to 0, it can be used infinitely. default is 0.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UsesLimit"
        }
      },
      "x-go-package": "api-bambe/domains/client"
    },
    "ClientCredentialsResponse": {
      "description": "ClientCredentials are used in the client_credentials authentication flow",
      "type": "object",
      "properties": {
        "TTL": {
          "description": "TTL expiration in seconds",
          "type": "integer",
          "format": "int64"
        },
        "accessed": {
          "description": "Url already used or not",
          "type": "string",
          "x-go-name": "Accessed"
        },
        "clientId": {
          "description": "Unique uuid of client credentials",
          "type": "string",
          "x-go-name": "ClientID"
        },
        "clientSecret": {
          "description": "Secret key returned on create",
          "type": "string",
          "x-go-name": "ClientSecret"
        },
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "expiredAt": {
          "description": "ExpiredAt expiration time",
          "type": "string",
          "x-go-name": "ExpiredAt"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "role": {
          "description": "Assigned role for determining access",
          "type": "string",
          "x-go-name": "Role"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "url": {
          "description": "If Url requested",
          "type": "boolean",
          "x-go-name": "Url"
        },
        "urlExpires": {
          "description": "Url expiration time",
          "type": "string",
          "x-go-name": "UrlExpires"
        },
        "urlPath": {
          "description": "URL Path",
          "type": "string",
          "x-go-name": "UrlPath"
        },
        "urlTTL": {
          "description": "Url expiration in seconds",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UrlTTL"
        },
        "usedCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UsedCount"
        },
        "usesLimit": {
          "description": "Uses  the number of times the client credential can be read.  if set to 0, it can be used infinitely.  default is 0.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UsesLimit"
        }
      },
      "x-go-name": "ClientCredentials",
      "x-go-package": "api-bambe/domains/client"
    },
    "ClientSearchModel": {
      "description": "Client Credential search response with metadata",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "List of client credentials with a matching role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCredentialsResponse"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "total": {
          "description": "Total number of items",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ResponseModelSearch",
      "x-go-package": "api-bambe/domains/client"
    },
    "Condition": {
      "type": "object",
      "title": "Condition either do or do not fulfill an access request.",
      "properties": {
        "GetName": {
          "description": "GetName returns the condition's name.",
          "type": "string"
        }
      },
      "x-go-package": "github.com/ory/ladon"
    },
    "Conditions": {
      "type": "object",
      "title": "Conditions is a collection of conditions.",
      "additionalProperties": {
        "$ref": "#/definitions/Condition"
      },
      "x-go-package": "github.com/ory/ladon"
    },
    "ConfigResponse": {
      "description": "Document is the per-tenant configuration store",
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "lastModified": {
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "permissionDocument": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefaultPolicy"
          },
          "x-go-name": "PermissionDocument"
        },
        "refreshTokenTTLHours": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RefreshTokenTTLHours"
        },
        "settings": {
          "$ref": "#/definitions/Settings"
        },
        "tenantName": {
          "type": "string",
          "x-go-name": "TenantName"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "Document",
      "x-go-package": "api-bambe/domains/config"
    },
    "ConfigVersionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigResponse"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-name": "DocumentVersion",
      "x-go-package": "api-bambe/domains/config"
    },
    "CreateGroup": {
      "type": "object",
      "required": [
        "groupName"
      ],
      "properties": {
        "groupName": {
          "description": "Group name",
          "type": "string",
          "x-go-name": "Name"
        },
        "members": {
          "description": "Members",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Members"
        },
        "metaData": {
          "description": "MetaData",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-go-name": "MetaData"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "DecryptionResponse": {
      "description": "DecryptionResponse contains data decrypted from ciphertext",
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data"
        },
        "path": {
          "description": "Path of the key with which decryption was performed",
          "type": "string",
          "x-go-name": "Path"
        },
        "version": {
          "description": "Version of the key with which decryption was performed",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "api-bambe/domains/encryption"
    },
    "DefaultPolicy": {
      "type": "object",
      "title": "DefaultPolicy is the default implementation of the policy interface.",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Actions"
        },
        "conditions": {
          "$ref": "#/definitions/Conditions"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "effect": {
          "type": "string",
          "x-go-name": "Effect"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "meta": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Meta"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Resources"
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Subjects"
        }
      },
      "x-go-package": "github.com/ory/ladon"
    },
    "EncryptionResponse": {
      "description": "EncryptionResponse contains ciphertext produced from encrypting a plaintext string with a key",
      "type": "object",
      "properties": {
        "ciphertext": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Ciphertext"
        },
        "path": {
          "description": "Path of the key with which encryption was performed",
          "type": "string",
          "x-go-name": "Path"
        },
        "version": {
          "description": "Version of the key with which encryption was performed",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "api-bambe/domains/encryption"
    },
    "EngineCreate": {
      "type": "object",
      "required": [
        "name",
        "poolName"
      ],
      "properties": {
        "name": {
          "description": "Name of engine",
          "type": "string",
          "x-go-name": "Name"
        },
        "poolName": {
          "description": "Name of pool to assign engine to",
          "type": "string",
          "x-go-name": "PoolName"
        }
      },
      "x-go-package": "api-bambe/domains/engine"
    },
    "EngineCreateResponse": {
      "description": "Initialized engine and corresponding public / private key pair for signing engine tokens",
      "type": "object",
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created the item",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastHeartbeat": {
          "type": "string",
          "x-go-name": "LastHeartbeat"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "poolName": {
          "type": "string",
          "x-go-name": "PoolName"
        },
        "privateKey": {
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "publicKey": {
          "type": "string",
          "x-go-name": "PublicKey"
        },
        "version": {
          "description": "Current version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "CreateResponse",
      "x-go-package": "api-bambe/domains/engine"
    },
    "EngineGetResponse": {
      "description": "Engine is the stored record",
      "type": "object",
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created the item",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastHeartbeat": {
          "type": "string",
          "x-go-name": "LastHeartbeat"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "poolName": {
          "type": "string",
          "x-go-name": "PoolName"
        },
        "publicKey": {
          "type": "string",
          "x-go-name": "PublicKey"
        },
        "version": {
          "description": "Current version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "Engine",
      "x-go-package": "api-bambe/domains/engine"
    },
    "EngineListResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "poolName": {
          "type": "string",
          "x-go-name": "PoolName"
        }
      },
      "x-go-package": "api-bambe/domains/engine"
    },
    "EnginePingResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-name": "PingResponse",
      "x-go-package": "api-bambe/domains/engine"
    },
    "EngineSearchResponse": {
      "description": "Search results response",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "Policies that match the search term",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EngineGetResponse"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "sort": {
          "description": "Sort order",
          "type": "string",
          "x-go-name": "Sort"
        }
      },
      "x-go-package": "api-bambe/domains/engine"
    },
    "GenerateResponse": {
      "type": "object",
      "properties": {
        "minNumberOfShares": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinNumberOfShares"
        },
        "newAdmins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NewAdmins"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "totalNumberOfShares": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalNumberOfShares"
        }
      },
      "x-go-package": "api-bambe/domains/breakglass"
    },
    "Group": {
      "type": "object",
      "properties": {
        "groupName": {
          "description": "Name",
          "type": "string",
          "x-go-name": "Name"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "description": "Members",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Members"
        },
        "metaData": {
          "description": "MetaData",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-go-name": "MetaData"
        },
        "total": {
          "description": "Total number of members",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "GroupMemberInfo": {
      "type": "object",
      "properties": {
        "created": {
          "description": "Created at",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "groupName": {
          "description": "GroupName",
          "type": "string",
          "x-go-name": "GroupName"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "GroupResponse": {
      "description": "GroupResponse  response with metadata",
      "type": "object",
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "groupName": {
          "description": "Name",
          "type": "string",
          "x-go-name": "Name"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "members": {
          "description": "Members",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Members"
        },
        "metaData": {
          "description": "MetaData",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-go-name": "MetaData"
        },
        "total": {
          "description": "Total number of members",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "GroupSearch": {
      "description": "Group search response with metadata",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "Groups that match the search term",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupResponse"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "sort": {
          "description": "Sort order",
          "type": "string",
          "x-go-name": "Sort"
        },
        "total": {
          "description": "Total number of items",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ResponseModelSearch",
      "x-go-package": "api-bambe/domains/group"
    },
    "HTTPError": {
      "description": "HTTPError contains the status code and a detailed error message",
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP status code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Errors"
        },
        "message": {
          "description": "Detailed error message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "api-bambe/utils/apperrors"
    },
    "History": {
      "description": "History struct common to most responses"
    },
    "InitiateCertAuthResponse": {
      "description": "InitiateCertAuthResponse contains challenge to decrypt and challenge id",
      "type": "object",
      "properties": {
        "cert_challenge_id": {
          "description": "Challenge id",
          "type": "string",
          "x-go-name": "ID"
        },
        "encrypted": {
          "description": "Encrypted and base64 encoded challenge",
          "type": "string",
          "x-go-name": "Encrypted"
        }
      },
      "x-go-package": "api-bambe/domains/token"
    },
    "Key": {
      "description": "Key struct"
    },
    "LogSearchResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "List of matching records",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Audit"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "totalItems": {
          "description": "Number of all items that match the criteria.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalItems"
        }
      },
      "x-go-name": "ResponseAuditSearch",
      "x-go-package": "api-bambe/domains/audit"
    },
    "ManualKeyData": {
      "type": "object",
      "required": [
        "scheme",
        "privateKey"
      ],
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Metadata"
        },
        "nonce": {
          "description": "Base64 encoded nonce to be used with key. If not provided, DSV generates it for the user.",
          "type": "string",
          "x-go-name": "Nonce"
        },
        "privateKey": {
          "description": "Base64 encoded private key",
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "scheme": {
          "description": "Encryption scheme to be used.",
          "type": "string",
          "x-go-name": "Scheme"
        }
      },
      "x-go-package": "api-bambe/domains/encryption"
    },
    "Masterkey": {
      "type": "object",
      "required": [
        "keyprovider",
        "primaryKey",
        "secondaryKey"
      ],
      "properties": {
        "keyprovider": {
          "type": "string",
          "x-go-name": "KeyProvider"
        },
        "primaryKey": {
          "type": "string",
          "x-go-name": "PrimaryKey"
        },
        "secondaryKey": {
          "type": "string",
          "x-go-name": "SecondaryKey"
        }
      },
      "x-go-name": "Key",
      "x-go-package": "api-bambe/domains/config"
    },
    "MemberRequest": {
      "description": "MemberRequest to add users to or delete from a group",
      "type": "object",
      "properties": {
        "memberNames": {
          "description": "Names",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Names"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "MemberResponse": {
      "description": "MemberResponse for member response",
      "type": "object",
      "properties": {
        "groups": {
          "description": "Groups information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupMemberInfo"
          },
          "x-go-name": "GroupMemberInfo"
        },
        "name": {
          "description": "Name",
          "type": "string",
          "x-go-name": "Name"
        },
        "total": {
          "description": "Total number of items",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "api-bambe/domains/group"
    },
    "MessageResponse": {
      "description": "MessageResponse is a generic response that includes a message for the user",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "api-bambe/domains"
    },
    "PageInfo": {
      "description": "Paging struct common to all search results"
    },
    "PasswordChangeModel": {
      "description": "PasswordChange model for submitting password change requests",
      "type": "object",
      "required": [
        "currentPassword",
        "newPassword"
      ],
      "properties": {
        "currentPassword": {
          "description": "The user's current password",
          "type": "string",
          "x-go-name": "CurrentPassword"
        },
        "newPassword": {
          "description": "The new password to use",
          "type": "string",
          "maxLength": 100,
          "minLength": 8,
          "x-go-name": "NewPassword"
        }
      },
      "x-go-name": "PasswordChange",
      "x-go-package": "api-bambe/domains/user"
    },
    "PolicyCreate": {
      "description": "PolicyCreate struct",
      "type": "object",
      "required": [
        "path",
        "policy"
      ],
      "properties": {
        "path": {
          "type": "string",
          "maxLength": 500,
          "minLength": 3,
          "x-go-name": "Path"
        },
        "policy": {
          "type": "string",
          "maxLength": 2000,
          "minLength": 10,
          "x-go-name": "Policy"
        },
        "serialization": {
          "type": "string",
          "default": "json",
          "enum": [
            "json",
            "yaml",
            "yml"
          ],
          "x-go-name": "Serialization"
        }
      },
      "x-go-package": "api-bambe/domains/config"
    },
    "PolicyResponse": {
      "description": "Policy is a named set of permissions",
      "type": "object",
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created the item",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "permissionDocument": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefaultPolicy"
          },
          "x-go-name": "PermissionDocument"
        },
        "version": {
          "description": "Current version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "Policy",
      "x-go-package": "api-bambe/domains/config"
    },
    "PolicySearchResponse": {
      "description": "Search results response",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "Policies that match the search term",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyResponse"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "sort": {
          "description": "Sort order",
          "type": "string",
          "x-go-name": "Sort"
        }
      },
      "x-go-package": "api-bambe/domains/config"
    },
    "PolicyUpdate": {
      "description": "PolicyUpdate struct",
      "type": "object",
      "required": [
        "policy"
      ],
      "properties": {
        "policy": {
          "type": "string",
          "maxLength": 2000,
          "minLength": 10,
          "x-go-name": "Policy"
        },
        "serialization": {
          "type": "string",
          "default": "json",
          "enum": [
            "json",
            "yaml",
            "yml"
          ],
          "x-go-name": "Serialization"
        }
      },
      "x-go-package": "api-bambe/domains/config"
    },
    "PolicyVersionResponse": {
      "description": "Version results response",
      "type": "object",
      "properties": {
        "data": {
          "description": "Policies that match the version",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyResponse"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "api-bambe/domains/config"
    },
    "Pool": {
      "description": "Created Engine Pool",
      "type": "object",
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created the item",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "version": {
          "description": "Current version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "api-bambe/domains/engine"
    },
    "PoolCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of engine pool",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "api-bambe/domains/engine"
    },
    "PoolListResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "api-bambe/domains/engine"
    },
    "PostConfigModel": {
      "type": "object",
      "required": [
        "Config"
      ],
      "properties": {
        "Config": {
          "description": "Encoded config string",
          "type": "string"
        },
        "Overwrite": {
          "type": "boolean"
        },
        "Serialization": {
          "description": "Json or yaml encoding type",
          "type": "string",
          "default": "json",
          "enum": [
            "json",
            "yaml",
            "yml"
          ]
        }
      },
      "x-go-package": "api-bambe/domains/config"
    },
    "ResponseCertificate": {
      "type": "object",
      "title": "ResponseCertificate contains the signed certificate and private key.",
      "properties": {
        "certificate": {
          "type": "string",
          "x-go-name": "Certificate"
        },
        "privateKey": {
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "rootCertificate": {
          "type": "string",
          "x-go-name": "RootCertificate"
        },
        "sshPublicKey": {
          "type": "string",
          "x-go-name": "SSHPublicKey"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "ResponseRootCertificate": {
      "type": "object",
      "title": "ResponseRootCertificate contains a root certificate.",
      "properties": {
        "certificate": {
          "type": "string",
          "x-go-name": "Certificate"
        },
        "privateKey": {
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "sshPublicKey": {
          "type": "string",
          "x-go-name": "SSHPublicKey"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "ResponseSSHCertificate": {
      "type": "object",
      "title": "ResponseSSHCertificate contains an SSH certificate.",
      "properties": {
        "sshCertificate": {
          "type": "string",
          "x-go-name": "SSHCertificate"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "RoleCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "Role description",
          "type": "string",
          "x-go-name": "Description"
        },
        "externalId": {
          "description": "External identifier, such as an AWS arn for 3rd party authentication",
          "type": "string",
          "x-go-name": "ExternalID"
        },
        "name": {
          "description": "Name of role",
          "type": "string",
          "x-go-name": "Name"
        },
        "provider": {
          "description": "Provider name defined in the authentication settings section of configuration",
          "type": "string",
          "x-go-name": "Provider"
        }
      },
      "x-go-package": "api-bambe/domains/role"
    },
    "RoleDetailsModel": {
      "description": "RoleDetails defines the editable properties of a Role",
      "type": "object",
      "properties": {
        "description": {
          "description": "Role description",
          "type": "string",
          "x-go-name": "Description"
        },
        "externalId": {
          "description": "External identifier, such as an AWS arn for 3rd party authentication",
          "type": "string",
          "x-go-name": "ExternalID"
        },
        "provider": {
          "description": "Provider name defined in the authentication settings section of configuration",
          "type": "string",
          "x-go-name": "Provider"
        }
      },
      "x-go-name": "RoleDetails",
      "x-go-package": "api-bambe/domains/role"
    },
    "RoleResponse": {
      "description": "Role defines the role security principal and any mappings to 3rd party providers",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "description": {
          "description": "Role description",
          "type": "string",
          "x-go-name": "Description"
        },
        "externalId": {
          "description": "External identifier, such as an AWS arn for 3rd party authentication",
          "type": "string",
          "x-go-name": "ExternalID"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Groups"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "name": {
          "description": "Name of role",
          "type": "string",
          "x-go-name": "Name"
        },
        "provider": {
          "description": "Provider name defined in the authentication settings section of configuration",
          "type": "string",
          "x-go-name": "Provider"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "Role",
      "x-go-package": "api-bambe/domains/role"
    },
    "RoleSearchResponse": {
      "description": "Role search response with metadata",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "List of matching roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleResponse"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "total": {
          "description": "Total number of items",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ResponseModelSearch",
      "x-go-package": "api-bambe/domains/role"
    },
    "RoleVersionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Roles"
        }
      },
      "x-go-package": "api-bambe/domains/role"
    },
    "Roles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RoleResponse"
      },
      "x-go-package": "api-bambe/domains/role"
    },
    "RootCARegistration": {
      "type": "object",
      "required": [
        "commonName",
        "rootCAPath",
        "domains",
        "maxTTL"
      ],
      "properties": {
        "commonName": {
          "type": "string",
          "x-go-name": "CommonName"
        },
        "country": {
          "type": "string",
          "x-go-name": "Country"
        },
        "crl": {
          "description": "URL of the CRL from which the revocation of leaf certificates can be checked",
          "type": "string",
          "x-go-name": "CRL"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "domains": {
          "description": "List of domains for which certificate signing is allowed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Domains"
        },
        "emailAddress": {
          "type": "string",
          "x-go-name": "EmailAddress"
        },
        "locality": {
          "type": "string",
          "x-go-name": "Locality"
        },
        "maxTTL": {
          "description": "Maximum TTL of a signed certificate issued from a given root CA (in hours)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxTTL"
        },
        "organization": {
          "type": "string",
          "x-go-name": "Organization"
        },
        "organizationalUnit": {
          "type": "string",
          "x-go-name": "OrganizationalUnit"
        },
        "rootCAPath": {
          "description": "The name of the secret containing the root CA certificate",
          "type": "string",
          "x-go-name": "RootCAPath"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "storePath": {
          "description": "The name of the secret in which to store the generated certificate and private key",
          "type": "string",
          "x-go-name": "StorePath"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "RootCASecret": {
      "type": "object",
      "required": [
        "rootCAPath",
        "privateKey",
        "certificate",
        "domains",
        "maxTTL"
      ],
      "properties": {
        "certificate": {
          "description": "Certificate of the root CA that contains information about it and public key",
          "type": "string",
          "x-go-name": "Certificate"
        },
        "crl": {
          "description": "URL of the CRL from which the revocation of leaf certificates can be checked",
          "type": "string",
          "x-go-name": "CRL"
        },
        "domains": {
          "description": "List of domains for which certificate signing is allowed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Domains"
        },
        "maxTTL": {
          "description": "Maximum TTL of a signed certificate issued from a given root CA (in hours)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxTTL"
        },
        "privateKey": {
          "description": "Private key of the root CA",
          "type": "string",
          "x-go-name": "PrivateKey"
        },
        "rootCAPath": {
          "description": "RootCAPath to secret, which also serves as an identifier of the root CA",
          "type": "string",
          "x-go-name": "RootCAPath"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "SSHCertInformation": {
      "type": "object",
      "required": [
        "rootCAPath",
        "leafCAPath",
        "principals",
        "ttl"
      ],
      "properties": {
        "leafCAPath": {
          "description": "Path to secret containing leaf certificate",
          "type": "string",
          "x-go-name": "LeafCAPath"
        },
        "principals": {
          "description": "A list of principals on a certificate (user or host names)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Principals"
        },
        "rootCAPath": {
          "description": "Path to secret containing root certificate",
          "type": "string",
          "x-go-name": "RootCAPath"
        },
        "ttl": {
          "description": "TTL for a generated certificate (in hours)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TTL"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "SecretCreate": {
      "type": "object",
      "properties": {
        "attributes": {
          "description": "The user defined metadata",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Attributes"
        },
        "data": {
          "description": "The secret data",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Data"
        },
        "description": {
          "description": "The secret's description",
          "type": "string",
          "x-go-name": "Description"
        }
      },
      "x-go-name": "RequestModelCreate",
      "x-go-package": "api-bambe/domains/secret"
    },
    "SecretDescription": {
      "description": "ResponseModelDescription contains metadata but not the sensitive secret data",
      "type": "object",
      "properties": {
        "attributes": {
          "description": "The user defined metadata",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Attributes"
        },
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "description": {
          "description": "Description of secret",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "The unique id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "path": {
          "description": "The path the secret is located at",
          "type": "string",
          "x-go-name": "Path"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "ResponseModelDescription",
      "x-go-package": "api-bambe/domains/secret"
    },
    "SecretListPathsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Matching secret paths",
          "type": "array",
          "items": {
            "type": "string",
            "maxItems": 500
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "api-bambe/domains/secret"
    },
    "SecretResponse": {
      "description": "ResponseModelFull contains the sensitive secret data along with secret metadata",
      "type": "object",
      "properties": {
        "attributes": {
          "description": "The user defined metadata",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Attributes"
        },
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "data": {
          "description": "The sensitive secret info, such as a password or key",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Data"
        },
        "description": {
          "description": "Description of secret",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "The unique id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "path": {
          "description": "The path the secret is located at",
          "type": "string",
          "x-go-name": "Path"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "ResponseModelFull",
      "x-go-package": "api-bambe/domains/secret"
    },
    "SecretSearch": {
      "description": "Secret search response with metadata",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "The returned secret descriptions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretDescription"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "sort": {
          "description": "Sort order",
          "type": "string",
          "x-go-name": "Sort"
        },
        "total": {
          "description": "Total number of items",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ResponseModelSearch",
      "x-go-package": "api-bambe/domains/secret"
    },
    "SecretUpdate": {
      "type": "object",
      "properties": {
        "attributes": {
          "description": "The user defined metadata",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Attributes"
        },
        "data": {
          "description": "The secret data",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Data"
        },
        "description": {
          "description": "The secret's description",
          "type": "string",
          "x-go-name": "Description"
        },
        "overwrite": {
          "description": "Overwrite data and description on update",
          "type": "boolean",
          "x-go-name": "Overwrite"
        }
      },
      "x-go-name": "RequestModelUpdate",
      "x-go-package": "api-bambe/domains/secret"
    },
    "SecretVersionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretResponse"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "api-bambe/domains/secret"
    },
    "Settings": {
      "description": "Settings is the per tenant app config settings",
      "type": "object",
      "properties": {
        "authentication": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Authentication"
          },
          "x-go-name": "Authentication"
        }
      },
      "x-go-package": "api-bambe/domains/config"
    },
    "SiemCreateUpdateRequestModel": {
      "type": "object",
      "required": [
        "siemType",
        "name",
        "host",
        "port",
        "protocol",
        "authMethod",
        "auth",
        "loggingFormat"
      ],
      "properties": {
        "auth": {
          "description": "Authentication token",
          "type": "string",
          "x-go-name": "Auth"
        },
        "authMethod": {
          "description": "Authentication method (token)",
          "type": "string",
          "x-go-name": "AuthMethod"
        },
        "endpoint": {
          "description": "Endpoint",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "host": {
          "description": "Collect Server IP/FQDN",
          "type": "string",
          "x-go-name": "Host"
        },
        "loggingFormat": {
          "description": "Logging Format (i.e. syslog (RFC 5424))",
          "type": "string",
          "x-go-name": "LoggingFormat"
        },
        "name": {
          "description": "Name of registered SIEM endpoint, similar to path",
          "type": "string",
          "x-go-name": "Name"
        },
        "pool": {
          "description": "Engine pool name, used when sending request to a DSV engine instance",
          "type": "string",
          "x-go-name": "Pool"
        },
        "port": {
          "description": "Port",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        },
        "protocol": {
          "description": "Type of protocol (i.e. TCP, UDP)",
          "type": "string",
          "x-go-name": "Protocol"
        },
        "sendToEngine": {
          "description": "Denotes whether the endpoint should be accessed through a DSV engine instance",
          "type": "boolean",
          "x-go-name": "SendToEngine"
        },
        "siemType": {
          "description": "Type of endpoint (\"syslog\", \"cef\", \"json\", \"splunk\")",
          "type": "string",
          "x-go-name": "SiemType"
        }
      },
      "x-go-package": "api-bambe/domains/config/siem"
    },
    "SiemNoSensitiveResponseModel": {
      "type": "object",
      "properties": {
        "authMethod": {
          "description": "Authentication method (token)",
          "type": "string",
          "x-go-name": "AuthMethod"
        },
        "endpoint": {
          "description": "Endpoint",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "failed": {
          "description": "Failed is true if send has failed too many times, false otherwise",
          "type": "boolean",
          "x-go-name": "Failed"
        },
        "failedEvents": {
          "description": "Number of failed send events",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FailedEvents"
        },
        "host": {
          "description": "Collect Server IP/FQDN",
          "type": "string",
          "x-go-name": "Host"
        },
        "id": {
          "description": "The unique id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "loggingFormat": {
          "description": "Logging format (e.g. \"rfc5424\" for syslog)",
          "type": "string",
          "x-go-name": "LoggingFormat"
        },
        "name": {
          "description": "Name of registered SIEM endpoint, similar to path",
          "type": "string",
          "x-go-name": "Name"
        },
        "pool": {
          "description": "Engine pool name, used when sending request to a DSV engine instance",
          "type": "string",
          "x-go-name": "Pool"
        },
        "port": {
          "description": "Collect Server Port",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        },
        "protocol": {
          "description": "Type of protocol (\"tcp\", \"udp\", \"http\", \"https\", \"tls\")",
          "type": "string",
          "x-go-name": "Protocol"
        },
        "sendToEngine": {
          "description": "Denotes whether the endpoint should be accessed through a DSV engine instance",
          "type": "boolean",
          "x-go-name": "SendToEngine"
        },
        "siemType": {
          "description": "Type of endpoint (\"syslog\", \"cef\", \"json\", \"splunk\")",
          "type": "string",
          "x-go-name": "SiemType"
        }
      },
      "x-go-package": "api-bambe/domains/config/siem"
    },
    "SiemResponse": {
      "type": "object",
      "properties": {
        "auth": {
          "description": "Authentication token",
          "type": "string",
          "x-go-name": "Auth"
        },
        "authMethod": {
          "description": "Authentication method (token)",
          "type": "string",
          "x-go-name": "AuthMethod"
        },
        "endpoint": {
          "description": "Endpoint",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "failed": {
          "description": "Failed is true if send has failed too many times, false otherwise",
          "type": "boolean",
          "x-go-name": "Failed"
        },
        "failedEvents": {
          "description": "Number of failed send events",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FailedEvents"
        },
        "host": {
          "description": "Collect Server IP/FQDN",
          "type": "string",
          "x-go-name": "Host"
        },
        "id": {
          "description": "The unique id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "loggingFormat": {
          "description": "Logging format (e.g. \"rfc5424\" for syslog)",
          "type": "string",
          "x-go-name": "LoggingFormat"
        },
        "name": {
          "description": "Name of registered SIEM endpoint, similar to path",
          "type": "string",
          "x-go-name": "Name"
        },
        "pool": {
          "description": "Engine pool name, used when sending request to a DSV engine instance",
          "type": "string",
          "x-go-name": "Pool"
        },
        "port": {
          "description": "Collect Server Port",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        },
        "protocol": {
          "description": "Type of protocol (\"tcp\", \"udp\", \"http\", \"https\", \"tls\")",
          "type": "string",
          "x-go-name": "Protocol"
        },
        "sendToEngine": {
          "description": "Denotes whether the endpoint should be accessed through a DSV engine instance",
          "type": "boolean",
          "x-go-name": "SendToEngine"
        },
        "siemType": {
          "description": "Type of endpoint (\"syslog\", \"cef\", \"json\", \"splunk\")",
          "type": "string",
          "x-go-name": "SiemType"
        }
      },
      "x-go-name": "SiemResponseModel",
      "x-go-package": "api-bambe/domains/config/siem"
    },
    "SiemSearchResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "List of matching siems",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiemNoSensitiveResponseModel"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "total": {
          "description": "Total number of items",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ResponseModelSearch",
      "x-go-package": "api-bambe/domains/config/siem"
    },
    "SignedLeafCertificate": {
      "type": "object",
      "title": "SignedLeafCertificate contains the signed certificate and optionally root certificate.",
      "properties": {
        "certificate": {
          "type": "string",
          "x-go-name": "Certificate"
        },
        "rootCertificate": {
          "type": "string",
          "x-go-name": "RootCertificate"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "SigningRequest": {
      "type": "object",
      "required": [
        "rootCAPath",
        "csr"
      ],
      "properties": {
        "chain": {
          "description": "Boolean indicating whether to return a root certificate",
          "type": "boolean",
          "x-go-name": "Chain"
        },
        "csr": {
          "description": "Certificate Signing Request",
          "type": "string",
          "x-go-name": "CSR"
        },
        "rootCAPath": {
          "description": "Path to secret - registered root CA",
          "type": "string",
          "x-go-name": "RootCAPath"
        },
        "subjectAltNames": {
          "description": "A list of Subject Alternative Names for a certificate (each domain must be present in the list of allowed domains)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SubjectAltNames"
        },
        "ttl": {
          "description": "TTL for a generated certificate (in hours, cannot exceed the maximum TTL specified in root CA secret)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TTL"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "SigningRequestInformation": {
      "type": "object",
      "required": [
        "commonName",
        "rootCAPath"
      ],
      "properties": {
        "chain": {
          "description": "Boolean indicating whether to return a root certificate",
          "type": "boolean",
          "x-go-name": "Chain"
        },
        "commonName": {
          "type": "string",
          "x-go-name": "CommonName"
        },
        "country": {
          "type": "string",
          "x-go-name": "Country"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "emailAddress": {
          "type": "string",
          "x-go-name": "EmailAddress"
        },
        "locality": {
          "type": "string",
          "x-go-name": "Locality"
        },
        "organization": {
          "type": "string",
          "x-go-name": "Organization"
        },
        "organizationalUnit": {
          "type": "string",
          "x-go-name": "OrganizationalUnit"
        },
        "rootCAPath": {
          "description": "The name of the secret containing the root CA certificate",
          "type": "string",
          "x-go-name": "RootCAPath"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "storePath": {
          "description": "The name of the secret in which to store the generated certificate and private key",
          "type": "string",
          "x-go-name": "StorePath"
        },
        "ttl": {
          "description": "TTL for a generated certificate (in hours, cannot exceed the maximum TTL specified in root CA secret)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TTL"
        }
      },
      "x-go-package": "api-bambe/domains/pki"
    },
    "StatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "api-bambe/domains/breakglass"
    },
    "TaskResult": {
      "description": "Any metadata values",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "x-go-name": "Value"
        }
      },
      "x-go-package": "api-bambe/domains/task"
    },
    "TaskState": {
      "description": "TaskState represents a state of a task",
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskResult"
          },
          "x-go-name": "Results"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "taskName": {
          "type": "string",
          "x-go-name": "TaskName"
        }
      },
      "x-go-package": "api-bambe/domains/task"
    },
    "UpdateKeyRequest": {
      "type": "object",
      "required": [
        "privateKey"
      ],
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Metadata"
        },
        "nonce": {
          "description": "Base64 encoded nonce to be used with key. If not provided, DSV generates it for the user.",
          "type": "string",
          "x-go-name": "Nonce"
        },
        "privateKey": {
          "description": "Base64 encoded private key",
          "type": "string",
          "x-go-name": "PrivateKey"
        }
      },
      "x-go-package": "api-bambe/domains/encryption"
    },
    "UsageResponseGeneral": {
      "type": "object",
      "title": "UsageResponseGeneral defines the properties that represent a usage response for the general API.",
      "properties": {
        "endDate": {
          "type": "string",
          "x-go-name": "EndDate"
        },
        "requestsUsed": {
          "description": "Keys are days, values are numbers of API requests made that day.",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "RequestsUsed"
        },
        "startDate": {
          "type": "string",
          "x-go-name": "StartDate"
        },
        "totalKeys": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalKeys"
        },
        "totalRequestsUsed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalRequestsUsed"
        },
        "totalSecrets": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalSecrets"
        }
      },
      "x-go-package": "api-bambe/domains/usage"
    },
    "UserCreateModel": {
      "description": "Creation properties of a user",
      "type": "object",
      "required": [
        "userName"
      ],
      "properties": {
        "displayName": {
          "description": "The display name of the user",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "externalId": {
          "description": "External identifier, such as an AWS arn for 3rd party authentication",
          "type": "string",
          "x-go-name": "ExternalID"
        },
        "password": {
          "description": "User's password (not required if using 3rd party auth)",
          "type": "string",
          "x-go-name": "Password"
        },
        "provider": {
          "description": "Provider name defined in the authentication settings section of configuration",
          "type": "string",
          "x-go-name": "Provider"
        },
        "userName": {
          "description": "The name of the user",
          "type": "string",
          "maxLength": 100,
          "minLength": 3,
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "api-bambe/domains/user"
    },
    "UserResponse": {
      "description": "User contains user data along with user metadata",
      "type": "object",
      "properties": {
        "created": {
          "description": "Created date",
          "type": "string",
          "x-go-name": "Created"
        },
        "createdBy": {
          "description": "Who created",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "displayName": {
          "description": "The display name of the user",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "externalId": {
          "description": "External identifier, such as an AWS arn for 3rd party authentication",
          "type": "string",
          "x-go-name": "ExternalID"
        },
        "id": {
          "description": "the id for this item",
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModified": {
          "description": "Last updated date",
          "type": "string",
          "x-go-name": "LastModified"
        },
        "lastModifiedBy": {
          "description": "Who performed the last modification",
          "type": "string",
          "x-go-name": "LastModifiedBy"
        },
        "provider": {
          "description": "Provider name defined in the authentication settings section of configuration",
          "type": "string",
          "x-go-name": "Provider"
        },
        "userName": {
          "description": "The name of the user",
          "type": "string",
          "x-go-name": "UserName"
        },
        "version": {
          "description": "Current version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "User",
      "x-go-package": "api-bambe/domains/user"
    },
    "UserSearch": {
      "description": "User search response with metadata",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Cursor to next batch of results",
          "type": "string",
          "x-go-name": "Cursor"
        },
        "data": {
          "description": "Users that match the search term",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserResponse"
          },
          "x-go-name": "Data"
        },
        "length": {
          "description": "The number of results in this response",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Length"
        },
        "limit": {
          "description": "The maximum number of results per cursor",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "total": {
          "description": "Total number of items",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ResponseModelSearch",
      "x-go-package": "api-bambe/domains/user"
    },
    "UserUpdateModel": {
      "description": "Editable properties of a user",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "The display name of the user",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "password": {
          "description": "User's password (not required if using 3rd party auth)",
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "api-bambe/domains/user"
    },
    "UserVersionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserResponse"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "api-bambe/domains/user"
    }
  },
  "responses": {
    "badRequest": {
      "description": "bad request",
      "schema": {
        "$ref": "#/definitions/HTTPError"
      }
    },
    "emptyResponse": {
      "description": "no error"
    },
    "forbidden": {
      "description": "forbidden",
      "schema": {
        "$ref": "#/definitions/HTTPError"
      }
    },
    "internalError": {
      "description": "server error",
      "schema": {
        "$ref": "#/definitions/HTTPError"
      }
    },
    "notFound": {
      "description": "not found",
      "schema": {
        "$ref": "#/definitions/HTTPError"
      }
    },
    "unauthorized": {
      "description": "unauthorized",
      "schema": {
        "$ref": "#/definitions/HTTPError"
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}