---
swagger: "2.0"
info:
  description: "The purpose of this application is to provide a simple service for\
    \ storing and getting secrets"
  version: "1.0.0"
  title: "DevOps Secrets Vault API"
host: "secretsvaultcloud.com"
basePath: "/v1"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /audit:
    get:
      tags:
      - "Audit"
      summary: "Find Audit Records"
      description: "Find audit records based on search critera."
      operationId: "findAudit"
      parameters:
      - name: "principal"
        in: "query"
        description: "Security principal name"
        required: false
        type: "string"
        x-go-name: "Principal"
        x-exportParamName: "Principal"
        x-optionalDataType: "String"
      - name: "startDate"
        in: "query"
        description: "The start date to find audits from"
        required: false
        type: "string"
        format: "date-time"
        x-go-name: "StartDate"
        x-exportParamName: "StartDate"
        x-optionalDataType: "Time"
      - name: "endDate"
        in: "query"
        description: "The end date to find audits to"
        required: false
        type: "string"
        format: "date-time"
        x-go-name: "EndDate"
        x-exportParamName: "EndDate"
        x-optionalDataType: "Time"
      - name: "action"
        in: "query"
        description: "The audit action"
        required: false
        type: "string"
        x-go-name: "Action"
        x-exportParamName: "Action"
        x-optionalDataType: "String"
      - name: "path"
        in: "query"
        description: "The secret path"
        required: false
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
        x-optionalDataType: "String"
      - name: "cursor"
        in: "query"
        description: "The cursor for pagination"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The number of results to return"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "sort"
        in: "query"
        description: "Sort results ascending (asc) or descending (desc) order. Default\
          \ is desc"
        required: false
        type: "string"
        x-go-name: "Sort"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "Successful audit log search response"
          schema:
            $ref: "#/definitions/LogSearchResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /breakglass:
    get:
      tags:
      - "Break-Glass"
      summary: "Get Status"
      description: "Get break glass status"
      operationId: "GetStatus"
      parameters: []
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
  /breakglass/apply:
    post:
      tags:
      - "Break-Glass"
      summary: "Apply"
      description: "Apply secret shares to break glass and give users admin rights"
      operationId: "ApplyRequest"
      parameters:
      - name: "shares"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
        minLength: 1
        x-go-name: "Shares"
        x-exportParamName: "Shares"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/ApplyResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /breakglass/generate:
    post:
      tags:
      - "Break-Glass"
      summary: "Generate"
      description: "Generate a new break glass secret and shares"
      operationId: "GenerateRequest"
      parameters:
      - name: "newAdmins"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
        minLength: 1
        x-go-name: "NewAdmins"
        x-exportParamName: "NewAdmins"
      - name: "minNumberOfShares"
        in: "query"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-go-name: "MinNumberOfShares"
        x-exportParamName: "MinNumberOfShares"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/GenerateResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /certificate/auth:
    post:
      tags:
      - "Tokens"
      summary: "Initiate authentication by certificate"
      description: "Request a challenge to decrypt to prove ownership of the private\
        \ key for\nauthentication by certificate flow. Challenge id returned in response\
        \ is\nonly valid for 5 minutes."
      operationId: "init-cert-auth"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "client_certificate"
        in: "formData"
        description: "Base64 encoded client certificate in PEM format"
        required: true
        type: "string"
        x-exportParamName: "ClientCertificate"
      responses:
        "200":
          description: "Successful response with an encrypted challenge"
          schema:
            $ref: "#/definitions/InitiateCertAuthResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /clients:
    get:
      tags:
      - "Clients"
      summary: "Search for Client Credentials"
      description: "Search for one or more client credentials associated with a particular\
        \ role."
      operationId: "searchClients"
      parameters:
      - name: "role"
        in: "query"
        description: "Role name associated with client credentials"
        required: true
        type: "string"
        x-go-name: "Role"
        x-exportParamName: "Role"
      - name: "limit"
        in: "query"
        description: "The maximum number of results per cursor"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "Cursor to next batch of results"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ClientSearchModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "Clients"
      summary: "Create a Client Credential"
      description: "Request a new client credential for a role and get back the client\
        \ id and secret key."
      operationId: "createClientCredential"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/ClientCreate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/ClientCredentialsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /clients/bootstrap/{clientId}:
    get:
      tags:
      - "Clients"
      summary: "Get a Client Bootstrap Credential including secret"
      description: "Get a client credential by url."
      operationId: "getBootstrapClientCredential"
      parameters: []
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ClientCredentialsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /clients/{clientId}:
    get:
      tags:
      - "Clients"
      summary: "Get a Client Credential"
      description: "Get a client credential by client id. The secret key is omitted."
      operationId: "getClientCredential"
      parameters:
      - name: "clientId"
        in: "path"
        description: "ClientId property of the client credentials"
        required: true
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "ClientId"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ClientCredentialsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Clients"
      summary: "Delete a Client Credential"
      description: "Delete a client credential by its unique client id."
      operationId: "deleteClientCredential"
      parameters:
      - name: "force"
        in: "query"
        description: "Delete immediately"
        required: false
        type: "boolean"
        x-go-name: "Force"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "clientId"
        in: "path"
        description: "ClientId property of the client credentials"
        required: true
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "ClientId"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /clients/{clientId}/restore:
    get:
      tags:
      - "Clients"
      summary: "Restore a Client"
      description: "Restore a client by ID."
      operationId: "restoreClient"
      parameters:
      - name: "clientId"
        in: "path"
        description: "ClientId property of the client credentials"
        required: true
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "ClientId"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config:
    get:
      tags:
      - "Config"
      summary: "Get Config"
      description: "Get config data."
      operationId: "getConfig"
      parameters: []
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ConfigResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "Config"
      summary: "Create Config"
      description: "Create or update config."
      operationId: "postConfig"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/PostConfigModel"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ConfigResponse"
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/ConfigResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/auth:
    get:
      tags:
      - "Settings"
      summary: "Search Authentication Providers"
      description: "Search authentication providers by name."
      operationId: "searchSettings"
      parameters:
      - name: "searchTerm"
        in: "query"
        description: "Search pattern for setting name."
        required: false
        type: "string"
        x-go-name: "SearchTerm"
        x-exportParamName: "SearchTerm"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of results per cursor."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "Cursor to next batch of results."
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/AuthenticationSettingsSearchResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/auth/:
    post:
      tags:
      - "Settings"
      summary: "Create Authentication Provider"
      description: "Creates new authentication provider settings."
      operationId: "createAuthSettings"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/AuthenticationSettingsCreateModel"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/AuthenticationSettingsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/auth/{name}:
    get:
      tags:
      - "Settings"
      summary: "Get Authentication Provider"
      description: "Retrieve authentication providers by name."
      operationId: "getAuthSettings"
      parameters:
      - name: "name"
        in: "path"
        description: "Full name to lookup authentication settings by."
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/AuthenticationSettingsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    put:
      tags:
      - "Settings"
      summary: "Update Authentication Provider"
      description: "Updates all fields on an existing authentication provider."
      operationId: "updateAuthSettings"
      parameters:
      - name: "name"
        in: "path"
        description: "Full name to lookup authentication settings by."
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/AuthenticationDetailsModel"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/AuthenticationSettingsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Settings"
      summary: "Delete Authentication Provider"
      description: "Remove authentication provider settings from the system."
      operationId: "deleteAuthSettings"
      parameters:
      - name: "force"
        in: "query"
        description: "Delete immediately"
        required: false
        type: "boolean"
        x-go-name: "Force"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "path"
        description: "Full name to lookup authentication settings by."
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/auth/{name}/restore:
    get:
      tags:
      - "Settings"
      summary: "Restore Authentication Provider"
      description: "Restore authentication provider settings if it had been marked\
        \ for deletion."
      operationId: "restoreAuthSettings"
      parameters:
      - name: "name"
        in: "path"
        description: "Full name to lookup authentication settings by."
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/auth/{name}/rollback/{version}:
    put:
      tags:
      - "Settings"
      summary: "Rollback Authentication Provider"
      description: "Rollback authentication provider to a previous version."
      operationId: "rollbackAuthSettings"
      parameters:
      - name: "name"
        in: "path"
        description: "Full name to lookup authentication settings by."
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "Versions to return."
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/AuthenticationSettingsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/auth/{name}/version/{version}:
    get:
      tags:
      - "Settings"
      summary: "Get a list of Authentication Settings by version"
      description: "Get a full Settings by name and version in the query. Returns\
        \ a list of zero up to n versions of an item."
      operationId: "getAuthSettingsByVersion"
      parameters:
      - name: "name"
        in: "path"
        description: "Full name to lookup authentication settings by."
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "Versions to return."
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/AuthenticationSettingsVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/keys:
    put:
      tags:
      - "Key"
      summary: "Update Master Key"
      description: "Update Master Encryption key."
      operationId: "masterkeys"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/Masterkey"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/policies:
    get:
      tags:
      - "Policies"
      summary: "Search Policies"
      description: "Search permission policies by path."
      operationId: "searchFilter"
      parameters:
      - name: "searchTerm"
        in: "query"
        description: "Search term"
        required: false
        type: "string"
        x-go-name: "SearchTerm"
        x-exportParamName: "SearchTerm"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of results per cursor"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "Cursor to next batch of results"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/PolicySearchResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/policies/:
    post:
      tags:
      - "Policies"
      summary: "Create Policy"
      description: "Creates new policy with permission document."
      operationId: "createPolicy"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/PolicyCreate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/PolicyResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/policies/{path}:
    get:
      tags:
      - "Policies"
      summary: "Get Policy"
      description: "Retrieve policy by path."
      operationId: "getPolicy"
      parameters:
      - name: "path"
        in: "path"
        description: "Full path to lookup policy"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/PolicyResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    put:
      tags:
      - "Policies"
      summary: "Update Policy"
      description: "Overwrites an existing policy with an updated permissions document."
      operationId: "updatePolicy"
      parameters:
      - name: "path"
        in: "path"
        description: "Full path for policy"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/PolicyUpdate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/PolicyResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Policies"
      summary: "Delete Policy"
      description: "Remove an existing policy by path."
      operationId: "deletePolicy"
      parameters:
      - name: "force"
        in: "query"
        description: "Delete immediately"
        required: false
        type: "boolean"
        x-go-name: "Force"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "path"
        in: "path"
        description: "Full path to lookup policy"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/policies/{path}/restore:
    get:
      tags:
      - "Policies"
      summary: "Restore Policy"
      description: "Restore an existing policy by path."
      operationId: "restorePolicy"
      parameters:
      - name: "path"
        in: "path"
        description: "Full path to lookup policy"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/policies/{path}/rollback/{version}:
    put:
      tags:
      - "Policies"
      summary: "Rollback Policy"
      description: "Overwrites an existing policy with its previous version."
      operationId: "rollbackPolicy"
      parameters:
      - name: "path"
        in: "path"
        description: "Full path to lookup policy"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/PolicyResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/policies/{path}/version/{version}:
    get:
      tags:
      - "Policies"
      summary: "Get a list of policies by version"
      description: "Get a full policies by path and version in the query.Returns a\
        \ list of zero up to n versions of an item."
      operationId: "getPolicyByVersion"
      parameters:
      - name: "path"
        in: "path"
        description: "Full path to lookup policy"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/PolicyVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/siem:
    get:
      tags:
      - "SIEM"
      summary: "Search SIEM Endpoints"
      description: "Search SIEM Endpoints by name."
      operationId: "searchSiems"
      parameters:
      - name: "searchTerm"
        in: "query"
        description: "Partial search term for search by name"
        required: false
        type: "string"
        x-go-name: "SearchTerm"
        x-exportParamName: "SearchTerm"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit for the number of results per page (cursor)"
        required: false
        type: "integer"
        maximum: 500
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "Cursor to next batch of results"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort results ascending (asc) or descending (desc) order by name.\
          \ Default is asc"
        required: false
        type: "string"
        x-go-name: "Sort"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SiemSearchResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "SIEM"
      summary: "Create SIEM Endpoint"
      description: "Creates a new SIEM endpoint."
      operationId: "siemCreate"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SiemCreateUpdateRequestModel"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/SiemResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/siem/{name}:
    get:
      tags:
      - "SIEM"
      summary: "Get SIEM Endpoint"
      description: "Retrieve an existing SIEM endpoint."
      operationId: "siemGet"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SiemResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    put:
      tags:
      - "SIEM"
      summary: "Update SIEM Endpoint"
      description: "Update an existing SIEM endpoint. Update sets \"failed\" to \"\
        false\" and \"failedEvents\" to \"0\" automatically."
      operationId: "siemUpdate"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SiemCreateUpdateRequestModel"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SiemResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "SIEM"
      summary: "Delete SIEM Endpoint"
      description: "Delete an existing SIEM endpoint."
      operationId: "siemDelete"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /config/version/{version}:
    get:
      tags:
      - "Config"
      summary: "Get Config By Version"
      description: "Get zero or more representations of config specified by version\
        \ number."
      operationId: "getConfigByVersion"
      parameters:
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ConfigVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/decrypt:
    post:
      tags:
      - "EaaS-Auto"
      summary: "Decrypt"
      description: "Decrypt ciphertext with a key."
      operationId: "decrypt"
      parameters:
      - name: "path"
        in: "query"
        description: "The path to data key"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "ciphertext"
        in: "query"
        description: "A value to be decrypted"
        required: true
        type: "array"
        items:
          type: "integer"
          format: "uint8"
        x-go-name: "Ciphertext"
        x-exportParamName: "Ciphertext"
      - name: "version"
        in: "query"
        description: "The version of the key with which to decrypt data"
        required: false
        type: "string"
        x-go-name: "Version"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/DecryptionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/encrypt:
    post:
      tags:
      - "EaaS-Auto"
      summary: "Encrypt"
      description: "Encrypt plaintext with a key."
      operationId: "encrypt"
      parameters:
      - name: "path"
        in: "query"
        description: "The path to data key"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "plaintext"
        in: "query"
        description: "A value to be encrypted"
        required: true
        type: "string"
        x-go-name: "Plaintext"
        x-exportParamName: "Plaintext"
      - name: "version"
        in: "query"
        description: "The version of the key with which to encrypt data"
        required: false
        type: "string"
        x-go-name: "Version"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/EncryptionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/key/{path}:
    get:
      tags:
      - "EaaS-Auto"
      summary: "Get Key Metadata"
      description: "Get metadata of an existing encryption/decryption key."
      operationId: "getKeyMetadata"
      parameters:
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/AutoKeyResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "EaaS-Auto"
      summary: "Create Key"
      description: "Create a new encryption/decryption key."
      operationId: "createKey"
      parameters:
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/AutoKeyResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "EaaS-Auto"
      summary: "Delete Key"
      description: "Delete an existing encryption/decryption key."
      operationId: "deleteKey"
      parameters:
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/key/{path}/restore:
    put:
      tags:
      - "EaaS-Auto"
      summary: "Restore Key"
      description: "Restore a soft-deleted encryption/decryption key."
      operationId: "restoreKey"
      parameters:
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/manual/decrypt:
    post:
      tags:
      - "EaaS-Manual"
      summary: "Decrypt"
      description: "Decrypt ciphertext with a key."
      operationId: "decryptWithManualKey"
      parameters:
      - name: "path"
        in: "query"
        description: "The path to data key"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "ciphertext"
        in: "query"
        description: "A value to be decrypted"
        required: true
        type: "array"
        items:
          type: "integer"
          format: "uint8"
        x-go-name: "Ciphertext"
        x-exportParamName: "Ciphertext"
      - name: "version"
        in: "query"
        description: "The version of the key with which to decrypt data"
        required: false
        type: "string"
        x-go-name: "Version"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/DecryptionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/manual/encrypt:
    post:
      tags:
      - "EaaS-Manual"
      summary: "Encrypt"
      description: "Encrypt plaintext with a key."
      operationId: "encryptWithManualKey"
      parameters:
      - name: "path"
        in: "query"
        description: "The path to data key"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "plaintext"
        in: "query"
        description: "A value to be encrypted"
        required: true
        type: "string"
        x-go-name: "Plaintext"
        x-exportParamName: "Plaintext"
      - name: "version"
        in: "query"
        description: "The version of the key with which to encrypt data"
        required: false
        type: "string"
        x-go-name: "Version"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/EncryptionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/manual/key/{path}:
    get:
      tags:
      - "EaaS-Manual"
      summary: "Read Key"
      description: "Read existing encryption/decryption key."
      operationId: "readManualKey"
      parameters:
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "EaaS-Manual"
      summary: "Upload Key"
      description: "Upload a new encryption/decryption key."
      operationId: "uploadKey"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/ManualKeyData"
        x-exportParamName: "Body"
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    put:
      tags:
      - "EaaS-Manual"
      summary: "Update Key"
      description: "Update an existing encryption/decryption key."
      operationId: "updateKey"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateKeyRequest"
        x-exportParamName: "Body"
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "EaaS-Manual"
      summary: "Delete Key"
      description: "Delete an existing encryption/decryption key."
      operationId: "deleteManualKey"
      parameters:
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/manual/key/{path}/restore:
    put:
      tags:
      - "EaaS-Manual"
      summary: "Restore Key"
      description: "Restore a soft-deleted encryption/decryption key."
      operationId: "restoreManualKey"
      parameters:
      - name: "path"
        in: "path"
        description: "The full key path, for example, mykeys/key01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /crypto/rotate:
    post:
      tags:
      - "EaaS-Auto"
      summary: "Rotate Data and Key"
      description: "Rotate data and optionally an existing encryption/decryption key.\n\
        \nIf the starting version is the current version of the key, then DSV will\
        \ rotate the key (create a new version of it)\nand re-encrypt the data using\
        \ this new version.\n\nIf the starting version is NOT the current version\
        \ of the key, and the ending version is not provided, then DSV will\nonly\
        \ re-encrypt the data using the current latest version of the key.\n\nThe\
        \ starting and ending versions can also be below the latest one, so long as\
        \ the starting is below the ending.\nIn this case, DSV will re-encrypt the\
        \ data using the version of the key specified by the ending version."
      operationId: "RotationRequest"
      parameters:
      - name: "path"
        in: "query"
        description: "The path to data key"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "ciphertext"
        in: "query"
        description: "A value to be rotated (re-encrypted)"
        required: true
        type: "array"
        items:
          type: "integer"
          format: "uint8"
        x-go-name: "Ciphertext"
        x-exportParamName: "Ciphertext"
      - name: "startingVersion"
        in: "query"
        description: "The starting version of the key with which to re-encrypt data"
        required: true
        type: "string"
        x-go-name: "StartingVersion"
        x-exportParamName: "StartingVersion"
      - name: "endingVersion"
        in: "query"
        description: "The ending version of the key with which to re-encrypt data"
        required: false
        type: "string"
        x-go-name: "EndingVersion"
        x-exportParamName: "EndingVersion"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/EncryptionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /download/audit:
    get:
      tags:
      - "Audit"
      summary: "Download Audit Records"
      description: "Download a zip of audit records for a time range"
      operationId: "downloadAudit"
      produces:
      - "application/zip"
      parameters:
      - name: "startDate"
        in: "query"
        description: "The start date to find audits from"
        required: true
        type: "string"
        x-exportParamName: "StartDate"
      - name: "endDate"
        in: "query"
        description: "The end date to find audits to"
        required: true
        type: "string"
        x-exportParamName: "EndDate"
      security:
      - Bearer: []
      responses:
        "200":
          description: "audit file response"
          headers:
            Content-Disposition:
              type: "string"
              description: "attachment; filename=\"attachment.zip\""
          schema:
            type: "string"
            format: "binary"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /engines:
    get:
      tags:
      - "Engines"
      summary: "List Engines"
      description: "List all existing engines."
      operationId: "listEngines"
      parameters: []
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/EngineListResult"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "Engines"
      summary: "Create Engine"
      description: "Registers a new engine and returns its key pair."
      operationId: "createEngine"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/EngineCreate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/EngineCreateResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /engines/{name}:
    get:
      tags:
      - "Engines"
      summary: "Get Engine"
      description: "Retrieve engine by name."
      operationId: "getEngine"
      parameters:
      - name: "path"
        in: "path"
        description: "Name of engine"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/EngineGetResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Engines"
      summary: "Delete Engine"
      description: "Delete an engine  by name."
      operationId: "deleteEngine"
      parameters:
      - name: "force"
        in: "query"
        description: "Delete immediately"
        required: false
        type: "boolean"
        x-go-name: "Force"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "path"
        in: "path"
        description: "Name of engine"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /engines/{name}/ping:
    post:
      tags:
      - "Engines"
      summary: "Ping Engine"
      description: "Sends a message to the engine to validate connectivity."
      operationId: "pingEngine"
      parameters:
      - name: "path"
        in: "path"
        description: "Name of engine"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/EnginePingResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /groups:
    get:
      tags:
      - "Groups"
      summary: "Search Groups"
      description: "Search for one or more groups by name."
      operationId: "searchGroups"
      parameters:
      - name: "searchTerm"
        in: "query"
        description: "Partial search term for search by path"
        required: false
        type: "string"
        x-go-name: "SearchTerm"
        x-exportParamName: "SearchTerm"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit for the number of results per page (cursor)"
        required: false
        type: "integer"
        maximum: 500
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "Cursor to next batch of results"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort results ascending (asc) or descending (desc) order by lastModified\
          \ attribute on field search. Default is desc"
        required: false
        type: "string"
        x-go-name: "Sort"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "sortedBy"
        in: "query"
        description: "SortedBy order the result by name, created or lastModified attribute\
          \ on field search. Default is lastModified"
        required: false
        type: "string"
        x-go-name: "SortedBy"
        x-exportParamName: "SortedBy"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/GroupSearch"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /groups/:
    post:
      tags:
      - "Groups"
      summary: "Create Group"
      description: "Create a new group."
      operationId: "createGroup"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/CreateGroup"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/AddMemberResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /groups/{name}:
    get:
      tags:
      - "Groups"
      summary: "Get Group"
      description: "Retrieve an existing group by name."
      operationId: "getGroup"
      parameters:
      - name: "name"
        in: "path"
        description: "Group name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/GroupResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Groups"
      summary: "Delete Group"
      description: "Delete Group if it exists."
      operationId: "deleteGroup"
      parameters:
      - name: "force"
        in: "query"
        description: "Delete immediately"
        required: false
        type: "boolean"
        x-go-name: "Force"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "path"
        description: "Group name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /groups/{name}/members:
    post:
      tags:
      - "Groups"
      summary: "Add Members To Group"
      description: "Add one or more members to a group."
      operationId: "addMember"
      parameters:
      - name: "name"
        in: "path"
        description: "Group name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/MemberRequest"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/AddMemberResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Groups"
      summary: "Delete Members From Group"
      description: "Delete one or more members from a group."
      operationId: "deleteMember"
      parameters:
      - name: "name"
        in: "path"
        description: "Group name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/MemberRequest"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /groups/{name}/restore:
    get:
      tags:
      - "Groups"
      summary: "Restore Group"
      description: "Restore a soft-deleted group."
      operationId: "restoreGroup"
      parameters:
      - name: "name"
        in: "path"
        description: "Group name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /home/{principalName}:
    get:
      tags:
      - "Home"
      summary: "Search for Home Secrets"
      description: "Lists home secret paths that start with the path parameter."
      operationId: "searchHomeSecrets"
      parameters:
      - name: "searchTerm"
        in: "query"
        description: "Partial search term for search by path"
        required: false
        type: "string"
        x-go-name: "SearchTerm"
        x-exportParamName: "SearchTerm"
        x-optionalDataType: "String"
      - name: "search.links"
        in: "query"
        description: "Whether to search for secrets that link to the path in the search\
          \ term"
        required: false
        type: "boolean"
        x-go-name: "Link"
        x-exportParamName: "SearchLinks"
        x-optionalDataType: "Bool"
      - name: "search.field"
        in: "query"
        description: "Secret field for advanced searching"
        required: false
        type: "string"
        x-go-name: "Field"
        x-exportParamName: "SearchField"
        x-optionalDataType: "String"
      - name: "search.comparison"
        in: "query"
        description: "Comparison type (equal, contains, begins_with) for advanced\
          \ searching"
        required: false
        type: "string"
        x-go-name: "Comparison"
        x-exportParamName: "SearchComparison"
        x-optionalDataType: "String"
      - name: "search.type"
        in: "query"
        description: "Attribute type (string, number) to search on"
        required: false
        type: "string"
        x-go-name: "UnderlyingType"
        x-exportParamName: "SearchType"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit for the number of results per page (cursor)"
        required: false
        type: "integer"
        maximum: 500
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "Cursor to next batch of results"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort results ascending (asc) or descending (desc) order by lastModified\
          \ attribute on field search. Default is desc"
        required: false
        type: "string"
        x-go-name: "Sort"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretSearch"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /home/{principalName}/{path}:
    get:
      tags:
      - "Home"
      summary: "Get Home"
      description: "Gets a full home secret by path or by id in the query."
      operationId: "getHomeSecret"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique uuid identifying a secret"
        required: false
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "Home"
      summary: "Create home secrets"
      description: "Creates a new home secret."
      operationId: "createHomeSecret"
      parameters:
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SecretCreate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    put:
      tags:
      - "Home"
      summary: "Update home Secret"
      description: "Updates an existing home secret."
      operationId: "updateHomeSecret"
      parameters:
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SecretUpdate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Home"
      summary: "Delete Home Secret"
      description: "Deletes a home secret by path or by id in the query."
      operationId: "deleteHomeSecret"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique uuid identifying a secret"
        required: false
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /home/{principalName}/{path}/restore:
    get:
      tags:
      - "Home"
      summary: "Restore home Secret"
      description: "Restores a home secret by path or by id in the query."
      operationId: "restoreHomeSecret"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique uuid identifying a secret"
        required: false
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /home/{principalName}/{path}/rollback/{version}:
    put:
      tags:
      - "Home"
      summary: "Rollback a Home Secret"
      description: "Rollbacks a Home Secret to a previous version."
      operationId: "rollbackHomeSecret"
      parameters:
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /home/{principalName}/{path}/version/{version}:
    get:
      tags:
      - "Home"
      summary: "Get Home Secret By Version"
      description: "Gets a full home secret by path and version in the query."
      operationId: "getHomeSecretByVersion"
      parameters:
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /home/{principalName}/{path}::description:
    get:
      tags:
      - "Home"
      summary: "Get home Secret Description"
      description: "Gets a home secret's metadata without returning the sensitive\
        \ data."
      operationId: "getHomeSecretDescription"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique uuid identifying a secret"
        required: false
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretDescription"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /pki/leaf:
    post:
      tags:
      - "PKI"
      summary: "Create Leaf Certificate and Private Key"
      description: "Create and return a signed certificate with a private key based\
        \ on a registered root CA."
      operationId: "LeafParams"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SigningRequestInformation"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ResponseCertificate"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /pki/register:
    post:
      tags:
      - "PKI"
      summary: "Register Root CA"
      description: "Register a root CA as a secret."
      operationId: "registerRoot"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/RootCASecret"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/ResponseRootCertificate"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /pki/root:
    post:
      tags:
      - "PKI"
      summary: "Generate Root Certificate"
      description: "Create and return a new root certificate."
      operationId: "rootCARegistration"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/RootCARegistration"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ResponseCertificate"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /pki/sign:
    post:
      tags:
      - "PKI"
      summary: "Create Signed Certificate"
      description: "Create and return a signed certificate based on a registered root\
        \ CA with a given CSR."
      operationId: "signCertificate"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SigningRequest"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SignedLeafCertificate"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /pki/ssh-cert:
    post:
      tags:
      - "PKI"
      summary: "Create SSH Certificate"
      description: "Create, store and return a signed SSH certificate using a root\
        \ private key and SHH-compatible\nleaf public key."
      operationId: "SSHCertParams"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SSHCertInformation"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/ResponseSSHCertificate"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /pools:
    get:
      tags:
      - "Pools"
      summary: "List Pools"
      description: "List all existing pools."
      operationId: "listPools"
      parameters: []
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/PoolListResult"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "Pools"
      summary: "Create Pool"
      description: "Create an engine pool."
      operationId: "createPool"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/PoolCreate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/Pool"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /pools/{name}:
    get:
      tags:
      - "Pools"
      summary: "Get Pool"
      description: "Retrieve pool by name."
      operationId: "getPool"
      parameters:
      - name: "name"
        in: "path"
        description: "Name to lookup path by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/Pool"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Pools"
      summary: "Delete Pool"
      description: "Delete an engine pool by name."
      operationId: "deletePool"
      parameters:
      - name: "name"
        in: "path"
        description: "Name to lookup path by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /revoke/{refreshtoken}:
    post:
      tags:
      - "Tokens"
      summary: "Revoke Refresh Token"
      description: "Revoke an existing refresh token to prevent it from being used\
        \ for authentication."
      operationId: "revoke"
      produces:
      - "application/json"
      parameters:
      - name: "refreshtoken"
        in: "path"
        description: "Refresh token to revoke"
        required: true
        type: "string"
        x-go-name: "RefreshToken"
        x-exportParamName: "Refreshtoken"
      security: []
      responses:
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /roles:
    get:
      tags:
      - "Roles"
      summary: "Search for Roles"
      description: "Search for one or more roles by role name."
      operationId: "searchRoles"
      parameters:
      - name: "searchTerm"
        in: "query"
        description: "Search pattern for names of roles to look up"
        required: false
        type: "string"
        x-go-name: "SearchTerm"
        x-exportParamName: "SearchTerm"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of results per cursor"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "C ursor to next batch of results"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/RoleSearchResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /roles/:
    post:
      tags:
      - "Roles"
      summary: "Create a Role"
      description: "Creates a new role."
      operationId: "createRole"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/RoleCreate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/RoleResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /roles/{name}:
    get:
      tags:
      - "Roles"
      summary: "Get a Role"
      description: "Retrieve an existing role by role name. For roles linked to 3rd\
        \ party providers, such as AWS or Azure, the role name\nmust be prefixed with\
        \ the provider name from configuration in the format of <providername>:<rolename>\
        \ i.e. aws-dev:db"
      operationId: "getRole"
      parameters:
      - name: "name"
        in: "path"
        description: "Full role name to lookup role by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/RoleResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    put:
      tags:
      - "Roles"
      summary: "Update a Role"
      description: "Update an existing role."
      operationId: "updateRole"
      parameters:
      - name: "name"
        in: "path"
        description: "Full role name to lookup role by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "role"
        required: true
        schema:
          $ref: "#/definitions/RoleDetailsModel"
        x-go-name: "Body"
        x-exportParamName: "Role"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/RoleResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Roles"
      summary: "Delete a Role"
      description: "Delete a role by the role name. For roles linked to 3rd party\
        \ providers, such as AWS or Azure, the role name\nmust be prefixed with the\
        \ provider name from configuration in the format of <providername>:<rolename>\
        \ i.e. aws-dev:db"
      operationId: "deleteRole"
      parameters:
      - name: "force"
        in: "query"
        description: "Delete immediately"
        required: false
        type: "boolean"
        x-go-name: "Force"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "path"
        description: "Full role name to lookup role by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /roles/{name}/restore:
    get:
      tags:
      - "Roles"
      summary: "Restore a Role"
      description: "Restore a role by path."
      operationId: "restoreRole"
      parameters:
      - name: "name"
        in: "path"
        description: "Full role name to lookup role by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /roles/{name}/version/{version}:
    get:
      tags:
      - "Roles"
      summary: "Get a Role By Version"
      description: "Retrieve an existing role by role name and versions. For roles\
        \ linked to 3rd party providers, such as AWS or Azure, the role name\nmust\
        \ be prefixed with the provider name from configuration in the format of <providername>:<rolename>\
        \ i.e. aws-dev:db"
      operationId: "getRoleByVersion"
      parameters:
      - name: "name"
        in: "path"
        description: "Full name to lookup role by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/RoleVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /secrets:
    get:
      tags:
      - "Secrets"
      summary: "Search for Secrets"
      description: "Lists secret paths that start with the path parameter."
      operationId: "searchSecrets"
      parameters:
      - name: "searchTerm"
        in: "query"
        description: "Partial search term for search by path"
        required: false
        type: "string"
        x-go-name: "SearchTerm"
        x-exportParamName: "SearchTerm"
        x-optionalDataType: "String"
      - name: "search.links"
        in: "query"
        description: "Whether to search for secrets that link to the path in the search\
          \ term"
        required: false
        type: "boolean"
        x-go-name: "Link"
        x-exportParamName: "SearchLinks"
        x-optionalDataType: "Bool"
      - name: "search.field"
        in: "query"
        description: "Secret field for advanced searching"
        required: false
        type: "string"
        x-go-name: "Field"
        x-exportParamName: "SearchField"
        x-optionalDataType: "String"
      - name: "search.comparison"
        in: "query"
        description: "Comparison type (equal, contains, begins_with) for advanced\
          \ searching"
        required: false
        type: "string"
        x-go-name: "Comparison"
        x-exportParamName: "SearchComparison"
        x-optionalDataType: "String"
      - name: "search.type"
        in: "query"
        description: "Attribute type (string, number) to search on"
        required: false
        type: "string"
        x-go-name: "UnderlyingType"
        x-exportParamName: "SearchType"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit for the number of results per page (cursor)"
        required: false
        type: "integer"
        maximum: 500
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "Cursor to next batch of results"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort results ascending (asc) or descending (desc) order by lastModified\
          \ attribute on field search. Default is desc"
        required: false
        type: "string"
        x-go-name: "Sort"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretSearch"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /secrets/{path}:
    get:
      tags:
      - "Secrets"
      summary: "Get Secret"
      description: "Gets a full secret by path or by id in the query."
      operationId: "getSecret"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique uuid identifying a secret"
        required: false
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "Secrets"
      summary: "Create Secret"
      description: "Creates a new secret."
      operationId: "createSecret"
      parameters:
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SecretCreate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    put:
      tags:
      - "Secrets"
      summary: "Update Secret"
      description: "Updates an existing secret."
      operationId: "updateSecret"
      parameters:
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SecretUpdate"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Secrets"
      summary: "Delete Secret"
      description: "Deletes a secret by path or by id in the query."
      operationId: "deleteSecret"
      parameters:
      - name: "force"
        in: "query"
        description: "Delete immediately"
        required: false
        type: "boolean"
        x-go-name: "Force"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "id"
        in: "query"
        description: "Unique uuid identifying a secret"
        required: false
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /secrets/{path}/rollback/{version}:
    put:
      tags:
      - "Secrets"
      summary: "Rollback a Secret"
      description: "Rollbacks a Secret to a previous version."
      operationId: "rollbackSecret"
      parameters:
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /secrets/{path}/version/{version}:
    get:
      tags:
      - "Secrets"
      summary: "Get Secret By Version"
      description: "Gets a full secret by path and version in the query."
      operationId: "getSecretByVersion"
      parameters:
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /secrets/{path}::description:
    get:
      tags:
      - "Secrets"
      summary: "Get Secret Description"
      description: "Gets a secret's metadata without returning the sensitive data."
      operationId: "getSecretDescription"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique uuid identifying a secret"
        required: false
        type: "string"
        x-go-name: "ID"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "path"
        in: "path"
        description: "The full secret path i.e. servers/prod/webserver-01"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretDescription"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /secrets/{path}::listpaths:
    get:
      tags:
      - "Secrets"
      summary: "List Secret Paths"
      description: "Lists secret paths that start with the path parameter."
      operationId: "listSecretPaths"
      parameters:
      - name: "limit"
        in: "query"
        description: "The maximum number of path matches to return"
        required: false
        type: "integer"
        maximum: 500
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "path"
        in: "path"
        description: "The secret path to match on"
        required: true
        type: "string"
        x-go-name: "Path"
        x-exportParamName: "Path"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/SecretListPathsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /task/status/{id}:
    get:
      tags:
      - "Tasks"
      summary: "Get background task status"
      description: "Get background task status by task uuid"
      operationId: "getTaskStatus"
      parameters:
      - name: "id"
        in: "path"
        description: "Task status uuid"
        required: true
        type: "string"
        x-go-name: "Id"
        x-exportParamName: "Id"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/TaskState"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /token:
    post:
      tags:
      - "Tokens"
      summary: "Authenticate"
      description: "Submit parameters to get a new access token for use on protected\
        \ endpoints"
      operationId: "token"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "grant_type"
        in: "formData"
        required: true
        type: "string"
        enum:
        - "password"
        - "client_credentials"
        - "certificate"
        - "refresh_token"
        - "aws_iam"
        - "azure"
        - "gcp"
        x-exportParamName: "GrantType"
      - name: "username"
        in: "formData"
        description: "Username for password grant type"
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "password"
        in: "formData"
        description: "Password for password grant type"
        required: false
        type: "string"
        x-exportParamName: "Password"
        x-optionalDataType: "String"
      - name: "provider"
        in: "formData"
        description: "Provider name for password grant flow for Thycotic One authentication"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      - name: "aws_body"
        in: "formData"
        description: "Base64 encoded signed aws request body for aws_iam grant type"
        required: false
        type: "string"
        x-exportParamName: "AwsBody"
        x-optionalDataType: "String"
      - name: "aws_headers"
        in: "formData"
        description: "Base64 encoded signed aws request headers for aws_iam grant\
          \ type"
        required: false
        type: "string"
        x-exportParamName: "AwsHeaders"
        x-optionalDataType: "String"
      - name: "jwt"
        in: "formData"
        description: "JWT token for azure and gcp grant types"
        required: false
        type: "string"
        x-exportParamName: "Jwt"
        x-optionalDataType: "String"
      - name: "client_id"
        in: "formData"
        description: "Client id for client_credentials grant type"
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      - name: "client_secret"
        in: "formData"
        description: "Client secret for client_credentials grant type"
        required: false
        type: "string"
        x-exportParamName: "ClientSecret"
        x-optionalDataType: "String"
      - name: "refresh_token"
        in: "formData"
        description: "Previously issued refresh token for the refresh_token grant\
          \ type"
        required: false
        type: "string"
        x-exportParamName: "RefreshToken"
        x-optionalDataType: "String"
      - name: "cert_challenge_id"
        in: "formData"
        description: "Challenge id for the certificate grant type"
        required: false
        type: "string"
        x-exportParamName: "CertChallengeId"
        x-optionalDataType: "String"
      - name: "decrypted_challenge"
        in: "formData"
        description: "Decrypted and base64 encoded challenge for the certificate grant\
          \ type"
        required: false
        type: "string"
        x-exportParamName: "DecryptedChallenge"
        x-optionalDataType: "String"
      security: []
      responses:
        "200":
          description: "Successful authentication response"
          schema:
            $ref: "#/definitions/AccessTokenResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /usage:
    get:
      tags:
      - "Usage"
      summary: "Get Usage"
      description: "Get usage statistics for API calls and total number of secrets"
      operationId: "getUsage"
      parameters:
      - name: "startDate"
        in: "query"
        description: "Start date to get usage statistics"
        required: true
        type: "string"
        x-go-name: "StartDate"
        x-exportParamName: "StartDate"
      - name: "endDate"
        in: "query"
        description: "End date to get usage statistics, defaults to current date if\
          \ not set"
        required: false
        type: "string"
        x-go-name: "EndDate"
        x-exportParamName: "EndDate"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/UsageResponseGeneral"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /users:
    get:
      tags:
      - "Users"
      summary: "Search for Users"
      description: "Search for one or more users by their name."
      operationId: "searchUsers"
      parameters:
      - name: "search.field"
        in: "query"
        description: "User field for advanced searching"
        required: false
        type: "string"
        x-go-name: "Field"
        x-exportParamName: "SearchField"
        x-optionalDataType: "String"
      - name: "search.comparison"
        in: "query"
        description: "Comparison type (equal, contains, begins_with) for advanced\
          \ searching"
        required: false
        type: "string"
        x-go-name: "Comparison"
        x-exportParamName: "SearchComparison"
        x-optionalDataType: "String"
      - name: "search.type"
        in: "query"
        description: "Attribute type (string, number) to search on"
        required: false
        type: "string"
        x-go-name: "UnderlyingType"
        x-exportParamName: "SearchType"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort results ascending (asc) or descending (desc) order by lastModified\
          \ attribute on field search. Default is desc"
        required: false
        type: "string"
        x-go-name: "Sort"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "sortedBy"
        in: "query"
        description: "SortedBy order the result by name, created or lastModified attribute\
          \ on field search. Default is lastModified"
        required: false
        type: "string"
        x-go-name: "SortedBy"
        x-exportParamName: "SortedBy"
        x-optionalDataType: "String"
      - name: "searchTerm"
        in: "query"
        description: "Search pattern for names of users to look up"
        required: false
        type: "string"
        x-go-name: "SearchTerm"
        x-exportParamName: "SearchTerm"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of results per cursor"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "cursor"
        in: "query"
        description: "Cursor to next batch of results"
        required: false
        type: "string"
        x-go-name: "Cursor"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/UserSearch"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /users/:
    post:
      tags:
      - "Users"
      summary: "Create a User"
      description: "Create a new user."
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UserCreateModel"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "201":
          description: "no error"
          schema:
            $ref: "#/definitions/UserResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /users/{name}:
    get:
      tags:
      - "Users"
      summary: "Get a User"
      description: "Retrieve an existing user by user name. For users linked to 3rd\
        \ party providers, such as AWS or Azure, the user name\nmust be prefixed with\
        \ the provider name from configuration in the format of <providername>:<username>\
        \ i.e. aws-dev:db"
      operationId: "getUser"
      parameters:
      - name: "name"
        in: "path"
        description: "Full user name to lookup user by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/UserResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    put:
      tags:
      - "Users"
      summary: "Update a User"
      description: "Update an existing user."
      operationId: "updateUser"
      parameters:
      - name: "name"
        in: "path"
        description: "Full user name to lookup user by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UserUpdateModel"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/UserResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    delete:
      tags:
      - "Users"
      summary: "Delete a User"
      description: "Retrieve an existing user by user name. For users linked to 3rd\
        \ party providers, such as AWS or Azure, the user name\nmust be prefixed with\
        \ the provider name from configuration in the format of <providername>:<username>\
        \ i.e. aws-dev:db"
      operationId: "deleteUser"
      parameters:
      - name: "force"
        in: "query"
        description: "Delete immediately"
        required: false
        type: "boolean"
        x-go-name: "Force"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "path"
        description: "Full user name to lookup user by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "204":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /users/{name}/groups:
    get:
      tags:
      - "Users"
      summary: "Get Member Group"
      description: "Retrieve a member's group by member name."
      operationId: "getMember"
      parameters:
      - name: "name"
        in: "path"
        description: "Member name to lookup member"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MemberResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
    post:
      tags:
      - "Users"
      summary: "Add Member To Groups"
      description: "Add a user to one or more groups."
      operationId: "addToGroups"
      parameters:
      - name: "name"
        in: "path"
        description: "Full user name to lookup user by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/AddToGroupsRequest"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/AddToGroupsResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /users/{name}/password:
    post:
      tags:
      - "Users"
      summary: "Change Password"
      description: "Allows the user to change their own password."
      operationId: "changePassword"
      parameters:
      - name: "name"
        in: "path"
        description: "Full user name to lookup user by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/PasswordChangeModel"
        x-exportParamName: "Body"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/MessageResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /users/{name}/restore:
    get:
      tags:
      - "Users"
      summary: "Restore a User"
      description: "Restore a user by path."
      operationId: "restoreUser"
      parameters:
      - name: "name"
        in: "path"
        description: "Full user name to lookup user by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
  /users/{name}/version/{version}:
    get:
      tags:
      - "Users"
      summary: "Get a User By Version"
      description: "Retrieve an existing user by user name and version. For users\
        \ linked to 3rd party providers, such as AWS or Azure, the user name\nmust\
        \ be prefixed with the provider name from configuration in the format of <providername>:<username>\
        \ i.e. aws-dev:db"
      operationId: "getUserByVersion"
      parameters:
      - name: "name"
        in: "path"
        description: "Full user name to lookup user by"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "Versions to return"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "Version"
        x-exportParamName: "Version"
      security:
      - Bearer:
        - "[]"
      responses:
        "200":
          description: "no error"
          schema:
            $ref: "#/definitions/UserVersionResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/HTTPError"
        "401":
          description: "unauthorized"
          schema:
            $ref: "#/definitions/HTTPError"
        "403":
          description: "forbidden"
          schema:
            $ref: "#/definitions/HTTPError"
        "404":
          description: "not found"
          schema:
            $ref: "#/definitions/HTTPError"
        "500":
          description: "server error"
          schema:
            $ref: "#/definitions/HTTPError"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  AccessTokenResponse:
    type: "object"
    properties:
      accessToken:
        type: "string"
        description: "JWT access token for authorized requests"
        x-go-name: "Token"
      expiresIn:
        type: "integer"
        format: "int64"
        description: "Seconds until access token expires"
        x-go-name: "ExpiresIn"
      refreshToken:
        type: "string"
        description: "Refresh token that can be used to get a new access token"
        x-go-name: "RefreshToken"
      tokenType:
        type: "string"
        description: "Token type"
        x-go-name: "TokenType"
    description: "AccessTokenResponse contains the bearer access token for accessing\
      \ authorized endpoints"
    example:
      expiresIn: 0
      accessToken: "accessToken"
      tokenType: "tokenType"
      refreshToken: "refreshToken"
    x-go-package: "api-bambe/domains/token"
  AddMemberResponse:
    type: "object"
    properties:
      addedMemberNames:
        type: "array"
        items:
          type: "string"
        x-go-name: "Names"
      errors:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Errors"
    description: "AddMemberResponse for Add members response"
    example:
      addedMemberNames:
      - "addedMemberNames"
      - "addedMemberNames"
      errors:
        key: "errors"
    x-go-package: "api-bambe/domains/group"
  AddToGroupsRequest:
    type: "object"
    properties:
      groupNames:
        type: "array"
        description: "List of group names"
        items:
          type: "string"
        x-go-name: "Names"
    description: "AddToGroupsRequest to add user to a list of groups"
    x-go-package: "api-bambe/domains/group"
  AddToGroupsResponse:
    type: "object"
    properties:
      errors:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Errors"
    description: "AddToGroupsResponse to add user to a list of groups"
    example:
      errors:
        key: "errors"
    x-go-package: "api-bambe/domains/group"
  ApplyResponse:
    type: "object"
    properties:
      status:
        type: "string"
        x-go-name: "Status"
    example:
      status: "status"
    x-go-package: "api-bambe/domains/breakglass"
  Audit:
    type: "object"
    properties:
      action:
        type: "string"
        description: "Action performed"
        x-go-name: "Action"
      created:
        type: "string"
        format: "date-time"
        description: "Audit created date"
        x-go-name: "Created"
      id:
        type: "string"
        description: "Audit id"
        x-go-name: "ID"
      ipaddress:
        type: "string"
        description: "IP Address logged from client"
        x-go-name: "IpAddress"
      message:
        type: "string"
        description: "Message additional details"
        x-go-name: "Message"
      path:
        type: "string"
        description: "Resource path action performed on"
        x-go-name: "Path"
      principal:
        type: "string"
        description: "Security principal that performed action"
        x-go-name: "Principal"
      principalItemId:
        type: "string"
        description: "Principal item ID"
        x-go-name: "PrincipalItemId"
      status:
        type: "integer"
        format: "int64"
        description: "Http status code"
        x-go-name: "Status"
      tenant:
        type: "string"
        description: "Tenant ID"
        x-go-name: "Tenant"
      tenantName:
        type: "string"
        description: "Tenant Name"
        x-go-name: "TenantName"
    description: "Audit model"
    example:
      principal: "principal"
      ipaddress: "ipaddress"
      path: "path"
      principalItemId: "principalItemId"
      tenantName: "tenantName"
      created: "2000-01-23T04:56:07.000+00:00"
      action: "action"
      id: "id"
      message: "message"
      tenant: "tenant"
      status: 0
    x-go-package: "api-bambe/domains/audit"
  AuthProperties:
    type: "object"
    properties:
      accountId:
        type: "string"
        x-go-name: "AccountID"
      baseUri:
        type: "string"
        x-go-name: "BaseURI"
      clientEmail:
        type: "string"
        x-go-name: "ClientEmail"
      clientId:
        type: "string"
        x-go-name: "ClientID"
      clientSecret:
        type: "string"
        x-go-name: "ClientSecret"
      default:
        type: "boolean"
        x-go-name: "Default"
      privateKey:
        type: "string"
        x-go-name: "PrivateKey"
      privateKeyId:
        type: "string"
        x-go-name: "PrivateKeyID"
      projectId:
        type: "string"
        x-go-name: "ProjectID"
      sendWelcomeEmail:
        type: "boolean"
        x-go-name: "SendWelcomeEmail"
      tenantId:
        type: "string"
        x-go-name: "TenantID"
      tokenUri:
        type: "string"
        x-go-name: "TokenURI"
      type:
        type: "string"
        x-go-name: "Type"
      usernameClaim:
        type: "string"
        x-go-name: "UsernameClaim"
    example:
      clientId: "clientId"
      sendWelcomeEmail: true
      clientEmail: "clientEmail"
      tokenUri: "tokenUri"
      type: "type"
      accountId: "accountId"
      privateKey: "privateKey"
      default: true
      baseUri: "baseUri"
      tenantId: "tenantId"
      clientSecret: "clientSecret"
      projectId: "projectId"
      usernameClaim: "usernameClaim"
      privateKeyId: "privateKeyId"
    x-go-package: "api-bambe/domains/config"
  Authentication:
    type: "object"
    properties:
      ID:
        type: "string"
      name:
        type: "string"
        x-go-name: "Name"
      properties:
        $ref: "#/definitions/AuthProperties"
      type:
        type: "string"
        x-go-name: "Type"
    description: "Authentication is the 3rd party authentication providers"
    example:
      name: "name"
      ID: "ID"
      type: "type"
      properties:
        clientId: "clientId"
        sendWelcomeEmail: true
        clientEmail: "clientEmail"
        tokenUri: "tokenUri"
        type: "type"
        accountId: "accountId"
        privateKey: "privateKey"
        default: true
        baseUri: "baseUri"
        tenantId: "tenantId"
        clientSecret: "clientSecret"
        projectId: "projectId"
        usernameClaim: "usernameClaim"
        privateKeyId: "privateKeyId"
    x-go-package: "api-bambe/domains/config"
  AuthenticationDetailsModel:
    type: "object"
    properties:
      properties:
        $ref: "#/definitions/AuthenticationProviderPropertiesModel"
      type:
        type: "string"
        description: "AuthenticationSettings provider system type."
        x-go-name: "AuthType"
    title: "Details defines the editable properties of a Role."
    x-go-name: "Details"
    x-go-package: "api-bambe/domains/config/auth"
  AuthenticationProviderPropertiesModel:
    type: "object"
    properties:
      accountId:
        type: "string"
        x-go-name: "AccountID"
      baseUri:
        type: "string"
        x-go-name: "BaseURI"
      clientEmail:
        type: "string"
        x-go-name: "ClientEmail"
      clientId:
        type: "string"
        x-go-name: "ClientID"
      clientSecret:
        type: "string"
        x-go-name: "ClientSecret"
      default:
        type: "boolean"
        x-go-name: "Default"
      privateKey:
        type: "string"
        x-go-name: "PrivateKey"
      privateKeyId:
        type: "string"
        x-go-name: "PrivateKeyID"
      projectId:
        type: "string"
        x-go-name: "ProjectID"
      sendWelcomeEmail:
        type: "boolean"
        x-go-name: "SendWelcomeEmail"
      tenantId:
        type: "string"
        x-go-name: "TenantID"
      tokenUri:
        type: "string"
        x-go-name: "TokenURI"
      type:
        type: "string"
        x-go-name: "Type"
      usernameClaim:
        type: "string"
        x-go-name: "UsernameClaim"
    title: "AuthenticationSettings is the 3rd party authentication providers."
    example:
      clientId: "clientId"
      sendWelcomeEmail: true
      clientEmail: "clientEmail"
      tokenUri: "tokenUri"
      type: "type"
      accountId: "accountId"
      privateKey: "privateKey"
      default: true
      baseUri: "baseUri"
      tenantId: "tenantId"
      clientSecret: "clientSecret"
      projectId: "projectId"
      usernameClaim: "usernameClaim"
      privateKeyId: "privateKeyId"
    x-go-name: "ProviderProperties"
    x-go-package: "api-bambe/domains/config/auth"
  AuthenticationSettingsCreateModel:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of authentication provider."
        minLength: 3
        maxLength: 50
        x-go-name: "Name"
      properties:
        $ref: "#/definitions/AuthenticationProviderPropertiesModel"
      type:
        type: "string"
        description: "AuthenticationSettings provider system type."
        x-go-name: "AuthType"
    title: "AuthenticationCreateModel defines the post parameters."
    x-go-name: "AuthenticationCreateModel"
    x-go-package: "api-bambe/domains/config/auth"
  AuthenticationSettingsResponse:
    type: "object"
    properties:
      created:
        type: "string"
        x-go-name: "Created"
      createdBy:
        type: "string"
        x-go-name: "CreatedBy"
      id:
        type: "string"
        x-go-name: "ID"
      lastModified:
        type: "string"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        x-go-name: "LastModifiedBy"
      name:
        type: "string"
        x-go-name: "Name"
      properties:
        $ref: "#/definitions/AuthenticationProviderPropertiesModel"
      type:
        type: "string"
        description: "AuthenticationSettings provider system type."
        x-go-name: "AuthType"
      version:
        type: "string"
        x-go-name: "Version"
    title: "AuthenticationSettings is the 3rd party authentication providers."
    example:
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      name: "name"
      id: "id"
      lastModified: "lastModified"
      type: "type"
      version: "version"
      properties:
        clientId: "clientId"
        sendWelcomeEmail: true
        clientEmail: "clientEmail"
        tokenUri: "tokenUri"
        type: "type"
        accountId: "accountId"
        privateKey: "privateKey"
        default: true
        baseUri: "baseUri"
        tenantId: "tenantId"
        clientSecret: "clientSecret"
        projectId: "projectId"
        usernameClaim: "usernameClaim"
        privateKeyId: "privateKeyId"
    x-go-name: "AuthenticationSettings"
    x-go-package: "api-bambe/domains/config/auth"
  AuthenticationSettingsSearchResponse:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results."
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "AuthenticationSettings settings that match the search term."
        items:
          $ref: "#/definitions/AuthenticationSettingsResponse"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response."
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor."
        x-go-name: "Limit"
    title: "AuthenticationSettings settings search response with metadata."
    example:
      cursor: "cursor"
      data:
      - createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        name: "name"
        id: "id"
        lastModified: "lastModified"
        type: "type"
        version: "version"
        properties:
          clientId: "clientId"
          sendWelcomeEmail: true
          clientEmail: "clientEmail"
          tokenUri: "tokenUri"
          type: "type"
          accountId: "accountId"
          privateKey: "privateKey"
          default: true
          baseUri: "baseUri"
          tenantId: "tenantId"
          clientSecret: "clientSecret"
          projectId: "projectId"
          usernameClaim: "usernameClaim"
          privateKeyId: "privateKeyId"
      - createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        name: "name"
        id: "id"
        lastModified: "lastModified"
        type: "type"
        version: "version"
        properties:
          clientId: "clientId"
          sendWelcomeEmail: true
          clientEmail: "clientEmail"
          tokenUri: "tokenUri"
          type: "type"
          accountId: "accountId"
          privateKey: "privateKey"
          default: true
          baseUri: "baseUri"
          tenantId: "tenantId"
          clientSecret: "clientSecret"
          projectId: "projectId"
          usernameClaim: "usernameClaim"
          privateKeyId: "privateKeyId"
      length: 0
      limit: 6
    x-go-name: "SearchResponse"
    x-go-package: "api-bambe/domains/config/auth"
  AuthenticationSettingsVersionResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "AuthenticationSettingsVersionResponse that match the version."
        items:
          $ref: "#/definitions/AuthenticationSettingsResponse"
        x-go-name: "Data"
    title: "Version results response."
    example:
      data:
      - createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        name: "name"
        id: "id"
        lastModified: "lastModified"
        type: "type"
        version: "version"
        properties:
          clientId: "clientId"
          sendWelcomeEmail: true
          clientEmail: "clientEmail"
          tokenUri: "tokenUri"
          type: "type"
          accountId: "accountId"
          privateKey: "privateKey"
          default: true
          baseUri: "baseUri"
          tenantId: "tenantId"
          clientSecret: "clientSecret"
          projectId: "projectId"
          usernameClaim: "usernameClaim"
          privateKeyId: "privateKeyId"
      - createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        name: "name"
        id: "id"
        lastModified: "lastModified"
        type: "type"
        version: "version"
        properties:
          clientId: "clientId"
          sendWelcomeEmail: true
          clientEmail: "clientEmail"
          tokenUri: "tokenUri"
          type: "type"
          accountId: "accountId"
          privateKey: "privateKey"
          default: true
          baseUri: "baseUri"
          tenantId: "tenantId"
          clientSecret: "clientSecret"
          projectId: "projectId"
          usernameClaim: "usernameClaim"
          privateKeyId: "privateKeyId"
    x-go-package: "api-bambe/domains/config/auth"
  AutoKey:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created the item"
        x-go-name: "CreatedBy"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      version:
        type: "string"
        description: "Current version"
        x-go-name: "Version"
    x-go-package: "api-bambe/domains/encryption"
  AutoKeyResponse:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created the item"
        x-go-name: "CreatedBy"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      path:
        type: "string"
        description: "A path to a data-key managed by DSV"
        x-go-name: "Path"
      version:
        type: "string"
        description: "Current version"
        x-go-name: "Version"
    description: "AutoKeyResponse contains the metadata of a data key"
    example:
      path: "path"
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      id: "id"
      lastModified: "lastModified"
      version: "version"
    x-go-package: "api-bambe/domains/encryption"
  ClientCreate:
    type: "object"
    required:
    - "role"
    properties:
      description:
        type: "string"
        description: "Client description"
        x-go-name: "Description"
      role:
        type: "string"
        description: "Name of role to assign to client"
        x-go-name: "Role"
      ttl:
        type: "integer"
        format: "int64"
        description: "TTL expiration in seconds"
        x-go-name: "TTL"
      url:
        type: "boolean"
        x-go-name: "Url"
      urlTTL:
        type: "integer"
        format: "int64"
        x-go-name: "UrlTTL"
      usesLimit:
        type: "integer"
        format: "int64"
        description: "Uses the number of times the client credential can be read.\
          \ if set to 0, it can be used infinitely. default is 0."
        x-go-name: "UsesLimit"
    x-go-package: "api-bambe/domains/client"
  ClientCredentialsResponse:
    type: "object"
    properties:
      TTL:
        type: "integer"
        format: "int64"
        description: "TTL expiration in seconds"
      accessed:
        type: "string"
        description: "Url already used or not"
        x-go-name: "Accessed"
      clientId:
        type: "string"
        description: "Unique uuid of client credentials"
        x-go-name: "ClientID"
      clientSecret:
        type: "string"
        description: "Secret key returned on create"
        x-go-name: "ClientSecret"
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created"
        x-go-name: "CreatedBy"
      description:
        type: "string"
        x-go-name: "Description"
      expiredAt:
        type: "string"
        description: "ExpiredAt expiration time"
        x-go-name: "ExpiredAt"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      role:
        type: "string"
        description: "Assigned role for determining access"
        x-go-name: "Role"
      status:
        type: "string"
        x-go-name: "Status"
      url:
        type: "boolean"
        description: "If Url requested"
        x-go-name: "Url"
      urlExpires:
        type: "string"
        description: "Url expiration time"
        x-go-name: "UrlExpires"
      urlPath:
        type: "string"
        description: "URL Path"
        x-go-name: "UrlPath"
      urlTTL:
        type: "integer"
        format: "int64"
        description: "Url expiration in seconds"
        x-go-name: "UrlTTL"
      usedCount:
        type: "integer"
        format: "int64"
        x-go-name: "UsedCount"
      usesLimit:
        type: "integer"
        format: "int64"
        description: "Uses  the number of times the client credential can be read.\
          \  if set to 0, it can be used infinitely.  default is 0."
        x-go-name: "UsesLimit"
    description: "ClientCredentials are used in the client_credentials authentication\
      \ flow"
    example:
      urlTTL: 6
      clientId: "clientId"
      role: "role"
      created: "created"
      description: "description"
      accessed: "accessed"
      TTL: 0
      urlPath: "urlPath"
      url: true
      usesLimit: 5
      expiredAt: "expiredAt"
      createdBy: "createdBy"
      clientSecret: "clientSecret"
      id: "id"
      urlExpires: "urlExpires"
      usedCount: 1
      status: "status"
    x-go-name: "ClientCredentials"
    x-go-package: "api-bambe/domains/client"
  ClientSearchModel:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "List of client credentials with a matching role"
        items:
          $ref: "#/definitions/ClientCredentialsResponse"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of items"
        x-go-name: "Total"
    description: "Client Credential search response with metadata"
    example:
      cursor: "cursor"
      total: 7
      data:
      - urlTTL: 6
        clientId: "clientId"
        role: "role"
        created: "created"
        description: "description"
        accessed: "accessed"
        TTL: 0
        urlPath: "urlPath"
        url: true
        usesLimit: 5
        expiredAt: "expiredAt"
        createdBy: "createdBy"
        clientSecret: "clientSecret"
        id: "id"
        urlExpires: "urlExpires"
        usedCount: 1
        status: "status"
      - urlTTL: 6
        clientId: "clientId"
        role: "role"
        created: "created"
        description: "description"
        accessed: "accessed"
        TTL: 0
        urlPath: "urlPath"
        url: true
        usesLimit: 5
        expiredAt: "expiredAt"
        createdBy: "createdBy"
        clientSecret: "clientSecret"
        id: "id"
        urlExpires: "urlExpires"
        usedCount: 1
        status: "status"
      length: 5
      limit: 2
    x-go-name: "ResponseModelSearch"
    x-go-package: "api-bambe/domains/client"
  Condition:
    type: "object"
    properties:
      GetName:
        type: "string"
        description: "GetName returns the condition's name."
    title: "Condition either do or do not fulfill an access request."
    x-go-package: "github.com/ory/ladon"
  Conditions:
    type: "object"
    title: "Conditions is a collection of conditions."
    additionalProperties:
      $ref: "#/definitions/Condition"
    x-go-package: "github.com/ory/ladon"
  ConfigResponse:
    type: "object"
    properties:
      created:
        type: "string"
        x-go-name: "Created"
      createdBy:
        type: "string"
        x-go-name: "CreatedBy"
      lastModified:
        type: "string"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        x-go-name: "LastModifiedBy"
      permissionDocument:
        type: "array"
        items:
          $ref: "#/definitions/DefaultPolicy"
        x-go-name: "PermissionDocument"
      refreshTokenTTLHours:
        type: "integer"
        format: "int64"
        x-go-name: "RefreshTokenTTLHours"
      settings:
        $ref: "#/definitions/Settings"
      tenantName:
        type: "string"
        x-go-name: "TenantName"
      version:
        type: "string"
        x-go-name: "Version"
    description: "Document is the per-tenant configuration store"
    example:
      settings:
        authentication:
        - name: "name"
          ID: "ID"
          type: "type"
          properties:
            clientId: "clientId"
            sendWelcomeEmail: true
            clientEmail: "clientEmail"
            tokenUri: "tokenUri"
            type: "type"
            accountId: "accountId"
            privateKey: "privateKey"
            default: true
            baseUri: "baseUri"
            tenantId: "tenantId"
            clientSecret: "clientSecret"
            projectId: "projectId"
            usernameClaim: "usernameClaim"
            privateKeyId: "privateKeyId"
        - name: "name"
          ID: "ID"
          type: "type"
          properties:
            clientId: "clientId"
            sendWelcomeEmail: true
            clientEmail: "clientEmail"
            tokenUri: "tokenUri"
            type: "type"
            accountId: "accountId"
            privateKey: "privateKey"
            default: true
            baseUri: "baseUri"
            tenantId: "tenantId"
            clientSecret: "clientSecret"
            projectId: "projectId"
            usernameClaim: "usernameClaim"
            privateKeyId: "privateKeyId"
      tenantName: "tenantName"
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      permissionDocument:
      - meta:
        - 0
        - 0
        effect: "effect"
        subjects:
        - "subjects"
        - "subjects"
        description: "description"
        resources:
        - "resources"
        - "resources"
        id: "id"
        conditions: {}
        actions:
        - "actions"
        - "actions"
      - meta:
        - 0
        - 0
        effect: "effect"
        subjects:
        - "subjects"
        - "subjects"
        description: "description"
        resources:
        - "resources"
        - "resources"
        id: "id"
        conditions: {}
        actions:
        - "actions"
        - "actions"
      lastModified: "lastModified"
      refreshTokenTTLHours: 6
      version: "version"
    x-go-name: "Document"
    x-go-package: "api-bambe/domains/config"
  ConfigVersionResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/ConfigResponse"
        x-go-name: "Data"
    example:
      data:
      - settings:
          authentication:
          - name: "name"
            ID: "ID"
            type: "type"
            properties:
              clientId: "clientId"
              sendWelcomeEmail: true
              clientEmail: "clientEmail"
              tokenUri: "tokenUri"
              type: "type"
              accountId: "accountId"
              privateKey: "privateKey"
              default: true
              baseUri: "baseUri"
              tenantId: "tenantId"
              clientSecret: "clientSecret"
              projectId: "projectId"
              usernameClaim: "usernameClaim"
              privateKeyId: "privateKeyId"
          - name: "name"
            ID: "ID"
            type: "type"
            properties:
              clientId: "clientId"
              sendWelcomeEmail: true
              clientEmail: "clientEmail"
              tokenUri: "tokenUri"
              type: "type"
              accountId: "accountId"
              privateKey: "privateKey"
              default: true
              baseUri: "baseUri"
              tenantId: "tenantId"
              clientSecret: "clientSecret"
              projectId: "projectId"
              usernameClaim: "usernameClaim"
              privateKeyId: "privateKeyId"
        tenantName: "tenantName"
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        permissionDocument:
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        lastModified: "lastModified"
        refreshTokenTTLHours: 6
        version: "version"
      - settings:
          authentication:
          - name: "name"
            ID: "ID"
            type: "type"
            properties:
              clientId: "clientId"
              sendWelcomeEmail: true
              clientEmail: "clientEmail"
              tokenUri: "tokenUri"
              type: "type"
              accountId: "accountId"
              privateKey: "privateKey"
              default: true
              baseUri: "baseUri"
              tenantId: "tenantId"
              clientSecret: "clientSecret"
              projectId: "projectId"
              usernameClaim: "usernameClaim"
              privateKeyId: "privateKeyId"
          - name: "name"
            ID: "ID"
            type: "type"
            properties:
              clientId: "clientId"
              sendWelcomeEmail: true
              clientEmail: "clientEmail"
              tokenUri: "tokenUri"
              type: "type"
              accountId: "accountId"
              privateKey: "privateKey"
              default: true
              baseUri: "baseUri"
              tenantId: "tenantId"
              clientSecret: "clientSecret"
              projectId: "projectId"
              usernameClaim: "usernameClaim"
              privateKeyId: "privateKeyId"
        tenantName: "tenantName"
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        permissionDocument:
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        lastModified: "lastModified"
        refreshTokenTTLHours: 6
        version: "version"
    x-go-name: "DocumentVersion"
    x-go-package: "api-bambe/domains/config"
  CreateGroup:
    type: "object"
    required:
    - "groupName"
    properties:
      groupName:
        type: "string"
        description: "Group name"
        x-go-name: "Name"
      members:
        type: "array"
        description: "Members"
        items:
          type: "string"
        x-go-name: "Members"
      metaData:
        type: "array"
        description: "MetaData"
        items:
          type: "object"
          additionalProperties:
            type: "string"
        x-go-name: "MetaData"
    x-go-package: "api-bambe/domains/group"
  DecryptionResponse:
    type: "object"
    properties:
      data:
        type: "string"
        x-go-name: "Data"
      path:
        type: "string"
        description: "Path of the key with which decryption was performed"
        x-go-name: "Path"
      version:
        type: "string"
        description: "Version of the key with which decryption was performed"
        x-go-name: "Version"
    description: "DecryptionResponse contains data decrypted from ciphertext"
    example:
      path: "path"
      data: "data"
      version: "version"
    x-go-package: "api-bambe/domains/encryption"
  DefaultPolicy:
    type: "object"
    properties:
      actions:
        type: "array"
        items:
          type: "string"
        x-go-name: "Actions"
      conditions:
        $ref: "#/definitions/Conditions"
      description:
        type: "string"
        x-go-name: "Description"
      effect:
        type: "string"
        x-go-name: "Effect"
      id:
        type: "string"
        x-go-name: "ID"
      meta:
        type: "array"
        items:
          type: "integer"
          format: "uint8"
        x-go-name: "Meta"
      resources:
        type: "array"
        items:
          type: "string"
        x-go-name: "Resources"
      subjects:
        type: "array"
        items:
          type: "string"
        x-go-name: "Subjects"
    title: "DefaultPolicy is the default implementation of the policy interface."
    example:
      meta:
      - 0
      - 0
      effect: "effect"
      subjects:
      - "subjects"
      - "subjects"
      description: "description"
      resources:
      - "resources"
      - "resources"
      id: "id"
      conditions: {}
      actions:
      - "actions"
      - "actions"
    x-go-package: "github.com/ory/ladon"
  EncryptionResponse:
    type: "object"
    properties:
      ciphertext:
        type: "array"
        items:
          type: "integer"
          format: "uint8"
        x-go-name: "Ciphertext"
      path:
        type: "string"
        description: "Path of the key with which encryption was performed"
        x-go-name: "Path"
      version:
        type: "string"
        description: "Version of the key with which encryption was performed"
        x-go-name: "Version"
    description: "EncryptionResponse contains ciphertext produced from encrypting\
      \ a plaintext string with a key"
    example:
      path: "path"
      ciphertext:
      - 0
      - 0
      version: "version"
    x-go-package: "api-bambe/domains/encryption"
  EngineCreate:
    type: "object"
    required:
    - "name"
    - "poolName"
    properties:
      name:
        type: "string"
        description: "Name of engine"
        x-go-name: "Name"
      poolName:
        type: "string"
        description: "Name of pool to assign engine to"
        x-go-name: "PoolName"
    x-go-package: "api-bambe/domains/engine"
  EngineCreateResponse:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created the item"
        x-go-name: "CreatedBy"
      endpoint:
        type: "string"
        x-go-name: "Endpoint"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      lastHeartbeat:
        type: "string"
        x-go-name: "LastHeartbeat"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      name:
        type: "string"
        x-go-name: "Name"
      poolName:
        type: "string"
        x-go-name: "PoolName"
      privateKey:
        type: "string"
        x-go-name: "PrivateKey"
      publicKey:
        type: "string"
        x-go-name: "PublicKey"
      version:
        type: "string"
        description: "Current version"
        x-go-name: "Version"
    description: "Initialized engine and corresponding public / private key pair for\
      \ signing engine tokens"
    example:
      privateKey: "privateKey"
      endpoint: "endpoint"
      lastHeartbeat: "lastHeartbeat"
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      name: "name"
      id: "id"
      lastModified: "lastModified"
      publicKey: "publicKey"
      version: "version"
      poolName: "poolName"
    x-go-name: "CreateResponse"
    x-go-package: "api-bambe/domains/engine"
  EngineGetResponse:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created the item"
        x-go-name: "CreatedBy"
      endpoint:
        type: "string"
        x-go-name: "Endpoint"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      lastHeartbeat:
        type: "string"
        x-go-name: "LastHeartbeat"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      name:
        type: "string"
        x-go-name: "Name"
      poolName:
        type: "string"
        x-go-name: "PoolName"
      publicKey:
        type: "string"
        x-go-name: "PublicKey"
      version:
        type: "string"
        description: "Current version"
        x-go-name: "Version"
    description: "Engine is the stored record"
    example:
      endpoint: "endpoint"
      lastHeartbeat: "lastHeartbeat"
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      name: "name"
      id: "id"
      lastModified: "lastModified"
      publicKey: "publicKey"
      version: "version"
      poolName: "poolName"
    x-go-name: "Engine"
    x-go-package: "api-bambe/domains/engine"
  EngineListResult:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      poolName:
        type: "string"
        x-go-name: "PoolName"
    example:
      name: "name"
      poolName: "poolName"
    x-go-package: "api-bambe/domains/engine"
  EnginePingResponse:
    type: "object"
    properties:
      message:
        type: "string"
        x-go-name: "Message"
    example:
      message: "message"
    x-go-name: "PingResponse"
    x-go-package: "api-bambe/domains/engine"
  EngineSearchResponse:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "Policies that match the search term"
        items:
          $ref: "#/definitions/EngineGetResponse"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      sort:
        type: "string"
        description: "Sort order"
        x-go-name: "Sort"
    description: "Search results response"
    x-go-package: "api-bambe/domains/engine"
  GenerateResponse:
    type: "object"
    properties:
      minNumberOfShares:
        type: "integer"
        format: "int64"
        x-go-name: "MinNumberOfShares"
      newAdmins:
        type: "array"
        items:
          type: "string"
        x-go-name: "NewAdmins"
      status:
        type: "string"
        x-go-name: "Status"
      totalNumberOfShares:
        type: "integer"
        format: "int64"
        x-go-name: "TotalNumberOfShares"
    example:
      totalNumberOfShares: 6
      newAdmins:
      - "newAdmins"
      - "newAdmins"
      minNumberOfShares: 0
      status: "status"
    x-go-package: "api-bambe/domains/breakglass"
  Group:
    type: "object"
    properties:
      groupName:
        type: "string"
        description: "Name"
        x-go-name: "Name"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      members:
        type: "array"
        description: "Members"
        items:
          type: "string"
        x-go-name: "Members"
      metaData:
        type: "array"
        description: "MetaData"
        items:
          type: "object"
          additionalProperties:
            type: "string"
        x-go-name: "MetaData"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of members"
        x-go-name: "Total"
    x-go-package: "api-bambe/domains/group"
  GroupMemberInfo:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created at"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created"
        x-go-name: "CreatedBy"
      groupName:
        type: "string"
        description: "GroupName"
        x-go-name: "GroupName"
    example:
      groupName: "groupName"
      createdBy: "createdBy"
      created: "created"
    x-go-package: "api-bambe/domains/group"
  GroupResponse:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created"
        x-go-name: "CreatedBy"
      groupName:
        type: "string"
        description: "Name"
        x-go-name: "Name"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      members:
        type: "array"
        description: "Members"
        items:
          type: "string"
        x-go-name: "Members"
      metaData:
        type: "array"
        description: "MetaData"
        items:
          type: "object"
          additionalProperties:
            type: "string"
        x-go-name: "MetaData"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of members"
        x-go-name: "Total"
      version:
        type: "string"
        x-go-name: "Version"
    description: "GroupResponse  response with metadata"
    example:
      metaData:
      - key: "metaData"
      - key: "metaData"
      groupName: "groupName"
      total: 0
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      members:
      - "members"
      - "members"
      id: "id"
      lastModified: "lastModified"
      version: "version"
    x-go-package: "api-bambe/domains/group"
  GroupSearch:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "Groups that match the search term"
        items:
          $ref: "#/definitions/GroupResponse"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      sort:
        type: "string"
        description: "Sort order"
        x-go-name: "Sort"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of items"
        x-go-name: "Total"
    description: "Group search response with metadata"
    example:
      cursor: "cursor"
      total: 5
      data:
      - metaData:
        - key: "metaData"
        - key: "metaData"
        groupName: "groupName"
        total: 0
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        members:
        - "members"
        - "members"
        id: "id"
        lastModified: "lastModified"
        version: "version"
      - metaData:
        - key: "metaData"
        - key: "metaData"
        groupName: "groupName"
        total: 0
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        members:
        - "members"
        - "members"
        id: "id"
        lastModified: "lastModified"
        version: "version"
      length: 6
      limit: 1
      sort: "sort"
    x-go-name: "ResponseModelSearch"
    x-go-package: "api-bambe/domains/group"
  HTTPError:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        description: "HTTP status code"
        x-go-name: "Code"
      errors:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            type: "string"
        x-go-name: "Errors"
      message:
        type: "string"
        description: "Detailed error message"
        x-go-name: "Message"
    description: "HTTPError contains the status code and a detailed error message"
    x-go-package: "api-bambe/utils/apperrors"
  History:
    description: "History struct common to most responses"
  InitiateCertAuthResponse:
    type: "object"
    properties:
      cert_challenge_id:
        type: "string"
        description: "Challenge id"
        x-go-name: "ID"
      encrypted:
        type: "string"
        description: "Encrypted and base64 encoded challenge"
        x-go-name: "Encrypted"
    description: "InitiateCertAuthResponse contains challenge to decrypt and challenge\
      \ id"
    example:
      cert_challenge_id: "cert_challenge_id"
      encrypted: "encrypted"
    x-go-package: "api-bambe/domains/token"
  Key:
    description: "Key struct"
  LogSearchResponse:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "List of matching records"
        items:
          $ref: "#/definitions/Audit"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      totalItems:
        type: "integer"
        format: "int64"
        description: "Number of all items that match the criteria."
        x-go-name: "TotalItems"
    example:
      cursor: "cursor"
      totalItems: 5
      data:
      - principal: "principal"
        ipaddress: "ipaddress"
        path: "path"
        principalItemId: "principalItemId"
        tenantName: "tenantName"
        created: "2000-01-23T04:56:07.000+00:00"
        action: "action"
        id: "id"
        message: "message"
        tenant: "tenant"
        status: 0
      - principal: "principal"
        ipaddress: "ipaddress"
        path: "path"
        principalItemId: "principalItemId"
        tenantName: "tenantName"
        created: "2000-01-23T04:56:07.000+00:00"
        action: "action"
        id: "id"
        message: "message"
        tenant: "tenant"
        status: 0
      length: 6
      limit: 1
    x-go-name: "ResponseAuditSearch"
    x-go-package: "api-bambe/domains/audit"
  ManualKeyData:
    type: "object"
    required:
    - "privateKey"
    - "scheme"
    properties:
      metadata:
        type: "object"
        additionalProperties: {}
        x-go-name: "Metadata"
      nonce:
        type: "string"
        description: "Base64 encoded nonce to be used with key. If not provided, DSV\
          \ generates it for the user."
        x-go-name: "Nonce"
      privateKey:
        type: "string"
        description: "Base64 encoded private key"
        x-go-name: "PrivateKey"
      scheme:
        type: "string"
        description: "Encryption scheme to be used."
        x-go-name: "Scheme"
    x-go-package: "api-bambe/domains/encryption"
  Masterkey:
    type: "object"
    required:
    - "keyprovider"
    - "primaryKey"
    - "secondaryKey"
    properties:
      keyprovider:
        type: "string"
        x-go-name: "KeyProvider"
      primaryKey:
        type: "string"
        x-go-name: "PrimaryKey"
      secondaryKey:
        type: "string"
        x-go-name: "SecondaryKey"
    x-go-name: "Key"
    x-go-package: "api-bambe/domains/config"
  MemberRequest:
    type: "object"
    properties:
      memberNames:
        type: "array"
        description: "Names"
        items:
          type: "string"
        x-go-name: "Names"
    description: "MemberRequest to add users to or delete from a group"
    x-go-package: "api-bambe/domains/group"
  MemberResponse:
    type: "object"
    properties:
      groups:
        type: "array"
        description: "Groups information"
        items:
          $ref: "#/definitions/GroupMemberInfo"
        x-go-name: "GroupMemberInfo"
      name:
        type: "string"
        description: "Name"
        x-go-name: "Name"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of items"
        x-go-name: "Total"
    description: "MemberResponse for member response"
    example:
      total: 0
      name: "name"
      groups:
      - groupName: "groupName"
        createdBy: "createdBy"
        created: "created"
      - groupName: "groupName"
        createdBy: "createdBy"
        created: "created"
    x-go-package: "api-bambe/domains/group"
  MessageResponse:
    type: "object"
    properties:
      message:
        type: "string"
        x-go-name: "Message"
    description: "MessageResponse is a generic response that includes a message for\
      \ the user"
    example:
      message: "message"
    x-go-package: "api-bambe/domains"
  PageInfo:
    description: "Paging struct common to all search results"
  PasswordChangeModel:
    type: "object"
    required:
    - "currentPassword"
    - "newPassword"
    properties:
      currentPassword:
        type: "string"
        description: "The user's current password"
        x-go-name: "CurrentPassword"
      newPassword:
        type: "string"
        description: "The new password to use"
        minLength: 8
        maxLength: 100
        x-go-name: "NewPassword"
    description: "PasswordChange model for submitting password change requests"
    x-go-name: "PasswordChange"
    x-go-package: "api-bambe/domains/user"
  PolicyCreate:
    type: "object"
    required:
    - "path"
    - "policy"
    properties:
      path:
        type: "string"
        minLength: 3
        maxLength: 500
        x-go-name: "Path"
      policy:
        type: "string"
        minLength: 10
        maxLength: 2000
        x-go-name: "Policy"
      serialization:
        type: "string"
        default: "json"
        enum:
        - "json"
        - "yaml"
        - "yml"
        x-go-name: "Serialization"
    description: "PolicyCreate struct"
    x-go-package: "api-bambe/domains/config"
  PolicyResponse:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created the item"
        x-go-name: "CreatedBy"
      id:
        type: "string"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      path:
        type: "string"
        x-go-name: "Path"
      permissionDocument:
        type: "array"
        items:
          $ref: "#/definitions/DefaultPolicy"
        x-go-name: "PermissionDocument"
      version:
        type: "string"
        description: "Current version"
        x-go-name: "Version"
    description: "Policy is a named set of permissions"
    example:
      path: "path"
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      permissionDocument:
      - meta:
        - 0
        - 0
        effect: "effect"
        subjects:
        - "subjects"
        - "subjects"
        description: "description"
        resources:
        - "resources"
        - "resources"
        id: "id"
        conditions: {}
        actions:
        - "actions"
        - "actions"
      - meta:
        - 0
        - 0
        effect: "effect"
        subjects:
        - "subjects"
        - "subjects"
        description: "description"
        resources:
        - "resources"
        - "resources"
        id: "id"
        conditions: {}
        actions:
        - "actions"
        - "actions"
      id: "id"
      lastModified: "lastModified"
      version: "version"
    x-go-name: "Policy"
    x-go-package: "api-bambe/domains/config"
  PolicySearchResponse:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "Policies that match the search term"
        items:
          $ref: "#/definitions/PolicyResponse"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      sort:
        type: "string"
        description: "Sort order"
        x-go-name: "Sort"
    description: "Search results response"
    example:
      cursor: "cursor"
      data:
      - path: "path"
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        permissionDocument:
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        id: "id"
        lastModified: "lastModified"
        version: "version"
      - path: "path"
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        permissionDocument:
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        id: "id"
        lastModified: "lastModified"
        version: "version"
      length: 0
      limit: 6
      sort: "sort"
    x-go-package: "api-bambe/domains/config"
  PolicyUpdate:
    type: "object"
    required:
    - "policy"
    properties:
      policy:
        type: "string"
        minLength: 10
        maxLength: 2000
        x-go-name: "Policy"
      serialization:
        type: "string"
        default: "json"
        enum:
        - "json"
        - "yaml"
        - "yml"
        x-go-name: "Serialization"
    description: "PolicyUpdate struct"
    x-go-package: "api-bambe/domains/config"
  PolicyVersionResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "Policies that match the version"
        items:
          $ref: "#/definitions/PolicyResponse"
        x-go-name: "Data"
    description: "Version results response"
    example:
      data:
      - path: "path"
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        permissionDocument:
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        id: "id"
        lastModified: "lastModified"
        version: "version"
      - path: "path"
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        permissionDocument:
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        - meta:
          - 0
          - 0
          effect: "effect"
          subjects:
          - "subjects"
          - "subjects"
          description: "description"
          resources:
          - "resources"
          - "resources"
          id: "id"
          conditions: {}
          actions:
          - "actions"
          - "actions"
        id: "id"
        lastModified: "lastModified"
        version: "version"
    x-go-package: "api-bambe/domains/config"
  Pool:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created the item"
        x-go-name: "CreatedBy"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      name:
        type: "string"
        x-go-name: "Name"
      version:
        type: "string"
        description: "Current version"
        x-go-name: "Version"
    description: "Created Engine Pool"
    example:
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      name: "name"
      id: "id"
      lastModified: "lastModified"
      version: "version"
    x-go-package: "api-bambe/domains/engine"
  PoolCreate:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of engine pool"
        x-go-name: "Name"
    x-go-package: "api-bambe/domains/engine"
  PoolListResult:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
    example:
      name: "name"
    x-go-package: "api-bambe/domains/engine"
  PostConfigModel:
    type: "object"
    required:
    - "Config"
    properties:
      Config:
        type: "string"
        description: "Encoded config string"
      Overwrite:
        type: "boolean"
      Serialization:
        type: "string"
        description: "Json or yaml encoding type"
        default: "json"
        enum:
        - "json"
        - "yaml"
        - "yml"
    x-go-package: "api-bambe/domains/config"
  ResponseCertificate:
    type: "object"
    properties:
      certificate:
        type: "string"
        x-go-name: "Certificate"
      privateKey:
        type: "string"
        x-go-name: "PrivateKey"
      rootCertificate:
        type: "string"
        x-go-name: "RootCertificate"
      sshPublicKey:
        type: "string"
        x-go-name: "SSHPublicKey"
    title: "ResponseCertificate contains the signed certificate and private key."
    example:
      privateKey: "privateKey"
      sshPublicKey: "sshPublicKey"
      rootCertificate: "rootCertificate"
      certificate: "certificate"
    x-go-package: "api-bambe/domains/pki"
  ResponseRootCertificate:
    type: "object"
    properties:
      certificate:
        type: "string"
        x-go-name: "Certificate"
      privateKey:
        type: "string"
        x-go-name: "PrivateKey"
      sshPublicKey:
        type: "string"
        x-go-name: "SSHPublicKey"
    title: "ResponseRootCertificate contains a root certificate."
    example:
      privateKey: "privateKey"
      sshPublicKey: "sshPublicKey"
      certificate: "certificate"
    x-go-package: "api-bambe/domains/pki"
  ResponseSSHCertificate:
    type: "object"
    properties:
      sshCertificate:
        type: "string"
        x-go-name: "SSHCertificate"
    title: "ResponseSSHCertificate contains an SSH certificate."
    example:
      sshCertificate: "sshCertificate"
    x-go-package: "api-bambe/domains/pki"
  RoleCreate:
    type: "object"
    required:
    - "name"
    properties:
      description:
        type: "string"
        description: "Role description"
        x-go-name: "Description"
      externalId:
        type: "string"
        description: "External identifier, such as an AWS arn for 3rd party authentication"
        x-go-name: "ExternalID"
      name:
        type: "string"
        description: "Name of role"
        x-go-name: "Name"
      provider:
        type: "string"
        description: "Provider name defined in the authentication settings section\
          \ of configuration"
        x-go-name: "Provider"
    x-go-package: "api-bambe/domains/role"
  RoleDetailsModel:
    type: "object"
    properties:
      description:
        type: "string"
        description: "Role description"
        x-go-name: "Description"
      externalId:
        type: "string"
        description: "External identifier, such as an AWS arn for 3rd party authentication"
        x-go-name: "ExternalID"
      provider:
        type: "string"
        description: "Provider name defined in the authentication settings section\
          \ of configuration"
        x-go-name: "Provider"
    description: "RoleDetails defines the editable properties of a Role"
    x-go-name: "RoleDetails"
    x-go-package: "api-bambe/domains/role"
  RoleResponse:
    type: "object"
    required:
    - "name"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created"
        x-go-name: "CreatedBy"
      description:
        type: "string"
        description: "Role description"
        x-go-name: "Description"
      externalId:
        type: "string"
        description: "External identifier, such as an AWS arn for 3rd party authentication"
        x-go-name: "ExternalID"
      groups:
        type: "array"
        items:
          type: "string"
        x-go-name: "Groups"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      name:
        type: "string"
        description: "Name of role"
        x-go-name: "Name"
      provider:
        type: "string"
        description: "Provider name defined in the authentication settings section\
          \ of configuration"
        x-go-name: "Provider"
      version:
        type: "string"
        x-go-name: "Version"
    description: "Role defines the role security principal and any mappings to 3rd\
      \ party providers"
    example:
      createdBy: "createdBy"
      provider: "provider"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      name: "name"
      description: "description"
      externalId: "externalId"
      groups:
      - "groups"
      - "groups"
      id: "id"
      lastModified: "lastModified"
      version: "version"
    x-go-name: "Role"
    x-go-package: "api-bambe/domains/role"
  RoleSearchResponse:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "List of matching roles"
        items:
          $ref: "#/definitions/RoleResponse"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of items"
        x-go-name: "Total"
    description: "Role search response with metadata"
    example:
      cursor: "cursor"
      total: 1
      data:
      - createdBy: "createdBy"
        provider: "provider"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        name: "name"
        description: "description"
        externalId: "externalId"
        groups:
        - "groups"
        - "groups"
        id: "id"
        lastModified: "lastModified"
        version: "version"
      - createdBy: "createdBy"
        provider: "provider"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        name: "name"
        description: "description"
        externalId: "externalId"
        groups:
        - "groups"
        - "groups"
        id: "id"
        lastModified: "lastModified"
        version: "version"
      length: 0
      limit: 6
    x-go-name: "ResponseModelSearch"
    x-go-package: "api-bambe/domains/role"
  RoleVersionResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Roles"
    example:
      data: ""
    x-go-package: "api-bambe/domains/role"
  Roles:
    type: "array"
    items:
      $ref: "#/definitions/RoleResponse"
    x-go-package: "api-bambe/domains/role"
  RootCARegistration:
    type: "object"
    required:
    - "commonName"
    - "domains"
    - "maxTTL"
    - "rootCAPath"
    properties:
      commonName:
        type: "string"
        x-go-name: "CommonName"
      country:
        type: "string"
        x-go-name: "Country"
      crl:
        type: "string"
        description: "URL of the CRL from which the revocation of leaf certificates\
          \ can be checked"
        x-go-name: "CRL"
      description:
        type: "string"
        x-go-name: "Description"
      domains:
        type: "array"
        description: "List of domains for which certificate signing is allowed"
        items:
          type: "string"
        x-go-name: "Domains"
      emailAddress:
        type: "string"
        x-go-name: "EmailAddress"
      locality:
        type: "string"
        x-go-name: "Locality"
      maxTTL:
        type: "integer"
        format: "int64"
        description: "Maximum TTL of a signed certificate issued from a given root\
          \ CA (in hours)"
        x-go-name: "MaxTTL"
      organization:
        type: "string"
        x-go-name: "Organization"
      organizationalUnit:
        type: "string"
        x-go-name: "OrganizationalUnit"
      rootCAPath:
        type: "string"
        description: "The name of the secret containing the root CA certificate"
        x-go-name: "RootCAPath"
      state:
        type: "string"
        x-go-name: "State"
      storePath:
        type: "string"
        description: "The name of the secret in which to store the generated certificate\
          \ and private key"
        x-go-name: "StorePath"
    x-go-package: "api-bambe/domains/pki"
  RootCASecret:
    type: "object"
    required:
    - "certificate"
    - "domains"
    - "maxTTL"
    - "privateKey"
    - "rootCAPath"
    properties:
      certificate:
        type: "string"
        description: "Certificate of the root CA that contains information about it\
          \ and public key"
        x-go-name: "Certificate"
      crl:
        type: "string"
        description: "URL of the CRL from which the revocation of leaf certificates\
          \ can be checked"
        x-go-name: "CRL"
      domains:
        type: "array"
        description: "List of domains for which certificate signing is allowed"
        items:
          type: "string"
        x-go-name: "Domains"
      maxTTL:
        type: "integer"
        format: "int64"
        description: "Maximum TTL of a signed certificate issued from a given root\
          \ CA (in hours)"
        x-go-name: "MaxTTL"
      privateKey:
        type: "string"
        description: "Private key of the root CA"
        x-go-name: "PrivateKey"
      rootCAPath:
        type: "string"
        description: "RootCAPath to secret, which also serves as an identifier of\
          \ the root CA"
        x-go-name: "RootCAPath"
    x-go-package: "api-bambe/domains/pki"
  SSHCertInformation:
    type: "object"
    required:
    - "leafCAPath"
    - "principals"
    - "rootCAPath"
    - "ttl"
    properties:
      leafCAPath:
        type: "string"
        description: "Path to secret containing leaf certificate"
        x-go-name: "LeafCAPath"
      principals:
        type: "array"
        description: "A list of principals on a certificate (user or host names)"
        items:
          type: "string"
        x-go-name: "Principals"
      rootCAPath:
        type: "string"
        description: "Path to secret containing root certificate"
        x-go-name: "RootCAPath"
      ttl:
        type: "integer"
        format: "int64"
        description: "TTL for a generated certificate (in hours)"
        x-go-name: "TTL"
    x-go-package: "api-bambe/domains/pki"
  SecretCreate:
    type: "object"
    properties:
      attributes:
        type: "object"
        description: "The user defined metadata"
        additionalProperties: {}
        x-go-name: "Attributes"
      data:
        type: "object"
        description: "The secret data"
        additionalProperties: {}
        x-go-name: "Data"
      description:
        type: "string"
        description: "The secret's description"
        x-go-name: "Description"
    x-go-name: "RequestModelCreate"
    x-go-package: "api-bambe/domains/secret"
  SecretDescription:
    type: "object"
    properties:
      attributes:
        type: "object"
        description: "The user defined metadata"
        additionalProperties: {}
        x-go-name: "Attributes"
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created"
        x-go-name: "CreatedBy"
      description:
        type: "string"
        description: "Description of secret"
        x-go-name: "Description"
      id:
        type: "string"
        description: "The unique id for this item"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      path:
        type: "string"
        description: "The path the secret is located at"
        x-go-name: "Path"
      version:
        type: "string"
        x-go-name: "Version"
    description: "ResponseModelDescription contains metadata but not the sensitive\
      \ secret data"
    example:
      path: "path"
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      description: "description"
      attributes:
        key: ""
      id: "id"
      lastModified: "lastModified"
      version: "version"
    x-go-name: "ResponseModelDescription"
    x-go-package: "api-bambe/domains/secret"
  SecretListPathsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "Matching secret paths"
        items:
          type: "string"
        x-go-name: "Data"
    example:
      data:
      - "data"
      - "data"
    x-go-package: "api-bambe/domains/secret"
  SecretResponse:
    type: "object"
    properties:
      attributes:
        type: "object"
        description: "The user defined metadata"
        additionalProperties: {}
        x-go-name: "Attributes"
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created"
        x-go-name: "CreatedBy"
      data:
        type: "object"
        description: "The sensitive secret info, such as a password or key"
        additionalProperties: {}
        x-go-name: "Data"
      description:
        type: "string"
        description: "Description of secret"
        x-go-name: "Description"
      id:
        type: "string"
        description: "The unique id for this item"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      path:
        type: "string"
        description: "The path the secret is located at"
        x-go-name: "Path"
      version:
        type: "string"
        x-go-name: "Version"
    description: "ResponseModelFull contains the sensitive secret data along with\
      \ secret metadata"
    example:
      path: "path"
      data:
        key: ""
      createdBy: "createdBy"
      created: "created"
      lastModifiedBy: "lastModifiedBy"
      description: "description"
      attributes:
        key: ""
      id: "id"
      lastModified: "lastModified"
      version: "version"
    x-go-name: "ResponseModelFull"
    x-go-package: "api-bambe/domains/secret"
  SecretSearch:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "The returned secret descriptions"
        items:
          $ref: "#/definitions/SecretDescription"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      sort:
        type: "string"
        description: "Sort order"
        x-go-name: "Sort"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of items"
        x-go-name: "Total"
    description: "Secret search response with metadata"
    example:
      cursor: "cursor"
      total: 1
      data:
      - path: "path"
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        description: "description"
        attributes:
          key: ""
        id: "id"
        lastModified: "lastModified"
        version: "version"
      - path: "path"
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        description: "description"
        attributes:
          key: ""
        id: "id"
        lastModified: "lastModified"
        version: "version"
      length: 0
      limit: 6
      sort: "sort"
    x-go-name: "ResponseModelSearch"
    x-go-package: "api-bambe/domains/secret"
  SecretUpdate:
    type: "object"
    properties:
      attributes:
        type: "object"
        description: "The user defined metadata"
        additionalProperties: {}
        x-go-name: "Attributes"
      data:
        type: "object"
        description: "The secret data"
        additionalProperties: {}
        x-go-name: "Data"
      description:
        type: "string"
        description: "The secret's description"
        x-go-name: "Description"
      overwrite:
        type: "boolean"
        description: "Overwrite data and description on update"
        x-go-name: "Overwrite"
    x-go-name: "RequestModelUpdate"
    x-go-package: "api-bambe/domains/secret"
  SecretVersionResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/SecretResponse"
        x-go-name: "Data"
    example:
      data:
      - path: "path"
        data:
          key: ""
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        description: "description"
        attributes:
          key: ""
        id: "id"
        lastModified: "lastModified"
        version: "version"
      - path: "path"
        data:
          key: ""
        createdBy: "createdBy"
        created: "created"
        lastModifiedBy: "lastModifiedBy"
        description: "description"
        attributes:
          key: ""
        id: "id"
        lastModified: "lastModified"
        version: "version"
    x-go-package: "api-bambe/domains/secret"
  Settings:
    type: "object"
    properties:
      authentication:
        type: "array"
        items:
          $ref: "#/definitions/Authentication"
        x-go-name: "Authentication"
    description: "Settings is the per tenant app config settings"
    example:
      authentication:
      - name: "name"
        ID: "ID"
        type: "type"
        properties:
          clientId: "clientId"
          sendWelcomeEmail: true
          clientEmail: "clientEmail"
          tokenUri: "tokenUri"
          type: "type"
          accountId: "accountId"
          privateKey: "privateKey"
          default: true
          baseUri: "baseUri"
          tenantId: "tenantId"
          clientSecret: "clientSecret"
          projectId: "projectId"
          usernameClaim: "usernameClaim"
          privateKeyId: "privateKeyId"
      - name: "name"
        ID: "ID"
        type: "type"
        properties:
          clientId: "clientId"
          sendWelcomeEmail: true
          clientEmail: "clientEmail"
          tokenUri: "tokenUri"
          type: "type"
          accountId: "accountId"
          privateKey: "privateKey"
          default: true
          baseUri: "baseUri"
          tenantId: "tenantId"
          clientSecret: "clientSecret"
          projectId: "projectId"
          usernameClaim: "usernameClaim"
          privateKeyId: "privateKeyId"
    x-go-package: "api-bambe/domains/config"
  SiemCreateUpdateRequestModel:
    type: "object"
    required:
    - "auth"
    - "authMethod"
    - "host"
    - "loggingFormat"
    - "name"
    - "port"
    - "protocol"
    - "siemType"
    properties:
      auth:
        type: "string"
        description: "Authentication token"
        x-go-name: "Auth"
      authMethod:
        type: "string"
        description: "Authentication method (token)"
        x-go-name: "AuthMethod"
      endpoint:
        type: "string"
        description: "Endpoint"
        x-go-name: "Endpoint"
      host:
        type: "string"
        description: "Collect Server IP/FQDN"
        x-go-name: "Host"
      loggingFormat:
        type: "string"
        description: "Logging Format (i.e. syslog (RFC 5424))"
        x-go-name: "LoggingFormat"
      name:
        type: "string"
        description: "Name of registered SIEM endpoint, similar to path"
        x-go-name: "Name"
      pool:
        type: "string"
        description: "Engine pool name, used when sending request to a DSV engine\
          \ instance"
        x-go-name: "Pool"
      port:
        type: "integer"
        format: "int64"
        description: "Port"
        x-go-name: "Port"
      protocol:
        type: "string"
        description: "Type of protocol (i.e. TCP, UDP)"
        x-go-name: "Protocol"
      sendToEngine:
        type: "boolean"
        description: "Denotes whether the endpoint should be accessed through a DSV\
          \ engine instance"
        x-go-name: "SendToEngine"
      siemType:
        type: "string"
        description: "Type of endpoint (\"syslog\", \"cef\", \"json\", \"splunk\")"
        x-go-name: "SiemType"
    x-go-package: "api-bambe/domains/config/siem"
  SiemNoSensitiveResponseModel:
    type: "object"
    properties:
      authMethod:
        type: "string"
        description: "Authentication method (token)"
        x-go-name: "AuthMethod"
      endpoint:
        type: "string"
        description: "Endpoint"
        x-go-name: "Endpoint"
      failed:
        type: "boolean"
        description: "Failed is true if send has failed too many times, false otherwise"
        x-go-name: "Failed"
      failedEvents:
        type: "integer"
        format: "int64"
        description: "Number of failed send events"
        x-go-name: "FailedEvents"
      host:
        type: "string"
        description: "Collect Server IP/FQDN"
        x-go-name: "Host"
      id:
        type: "string"
        description: "The unique id for this item"
        x-go-name: "ID"
      loggingFormat:
        type: "string"
        description: "Logging format (e.g. \"rfc5424\" for syslog)"
        x-go-name: "LoggingFormat"
      name:
        type: "string"
        description: "Name of registered SIEM endpoint, similar to path"
        x-go-name: "Name"
      pool:
        type: "string"
        description: "Engine pool name, used when sending request to a DSV engine\
          \ instance"
        x-go-name: "Pool"
      port:
        type: "integer"
        format: "int64"
        description: "Collect Server Port"
        x-go-name: "Port"
      protocol:
        type: "string"
        description: "Type of protocol (\"tcp\", \"udp\", \"http\", \"https\", \"\
          tls\")"
        x-go-name: "Protocol"
      sendToEngine:
        type: "boolean"
        description: "Denotes whether the endpoint should be accessed through a DSV\
          \ engine instance"
        x-go-name: "SendToEngine"
      siemType:
        type: "string"
        description: "Type of endpoint (\"syslog\", \"cef\", \"json\", \"splunk\")"
        x-go-name: "SiemType"
    example:
      sendToEngine: true
      loggingFormat: "loggingFormat"
      pool: "pool"
      failed: true
      siemType: "siemType"
      endpoint: "endpoint"
      protocol: "protocol"
      port: 6
      failedEvents: 0
      host: "host"
      name: "name"
      id: "id"
      authMethod: "authMethod"
    x-go-package: "api-bambe/domains/config/siem"
  SiemResponse:
    type: "object"
    properties:
      auth:
        type: "string"
        description: "Authentication token"
        x-go-name: "Auth"
      authMethod:
        type: "string"
        description: "Authentication method (token)"
        x-go-name: "AuthMethod"
      endpoint:
        type: "string"
        description: "Endpoint"
        x-go-name: "Endpoint"
      failed:
        type: "boolean"
        description: "Failed is true if send has failed too many times, false otherwise"
        x-go-name: "Failed"
      failedEvents:
        type: "integer"
        format: "int64"
        description: "Number of failed send events"
        x-go-name: "FailedEvents"
      host:
        type: "string"
        description: "Collect Server IP/FQDN"
        x-go-name: "Host"
      id:
        type: "string"
        description: "The unique id for this item"
        x-go-name: "ID"
      loggingFormat:
        type: "string"
        description: "Logging format (e.g. \"rfc5424\" for syslog)"
        x-go-name: "LoggingFormat"
      name:
        type: "string"
        description: "Name of registered SIEM endpoint, similar to path"
        x-go-name: "Name"
      pool:
        type: "string"
        description: "Engine pool name, used when sending request to a DSV engine\
          \ instance"
        x-go-name: "Pool"
      port:
        type: "integer"
        format: "int64"
        description: "Collect Server Port"
        x-go-name: "Port"
      protocol:
        type: "string"
        description: "Type of protocol (\"tcp\", \"udp\", \"http\", \"https\", \"\
          tls\")"
        x-go-name: "Protocol"
      sendToEngine:
        type: "boolean"
        description: "Denotes whether the endpoint should be accessed through a DSV\
          \ engine instance"
        x-go-name: "SendToEngine"
      siemType:
        type: "string"
        description: "Type of endpoint (\"syslog\", \"cef\", \"json\", \"splunk\")"
        x-go-name: "SiemType"
    example:
      sendToEngine: true
      loggingFormat: "loggingFormat"
      auth: "auth"
      pool: "pool"
      failed: true
      siemType: "siemType"
      endpoint: "endpoint"
      protocol: "protocol"
      port: 6
      failedEvents: 0
      host: "host"
      name: "name"
      id: "id"
      authMethod: "authMethod"
    x-go-name: "SiemResponseModel"
    x-go-package: "api-bambe/domains/config/siem"
  SiemSearchResponse:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "List of matching siems"
        items:
          $ref: "#/definitions/SiemNoSensitiveResponseModel"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of items"
        x-go-name: "Total"
    example:
      cursor: "cursor"
      total: 5
      data:
      - sendToEngine: true
        loggingFormat: "loggingFormat"
        pool: "pool"
        failed: true
        siemType: "siemType"
        endpoint: "endpoint"
        protocol: "protocol"
        port: 6
        failedEvents: 0
        host: "host"
        name: "name"
        id: "id"
        authMethod: "authMethod"
      - sendToEngine: true
        loggingFormat: "loggingFormat"
        pool: "pool"
        failed: true
        siemType: "siemType"
        endpoint: "endpoint"
        protocol: "protocol"
        port: 6
        failedEvents: 0
        host: "host"
        name: "name"
        id: "id"
        authMethod: "authMethod"
      length: 1
      limit: 5
    x-go-name: "ResponseModelSearch"
    x-go-package: "api-bambe/domains/config/siem"
  SignedLeafCertificate:
    type: "object"
    properties:
      certificate:
        type: "string"
        x-go-name: "Certificate"
      rootCertificate:
        type: "string"
        x-go-name: "RootCertificate"
    title: "SignedLeafCertificate contains the signed certificate and optionally root\
      \ certificate."
    example:
      rootCertificate: "rootCertificate"
      certificate: "certificate"
    x-go-package: "api-bambe/domains/pki"
  SigningRequest:
    type: "object"
    required:
    - "csr"
    - "rootCAPath"
    properties:
      chain:
        type: "boolean"
        description: "Boolean indicating whether to return a root certificate"
        x-go-name: "Chain"
      csr:
        type: "string"
        description: "Certificate Signing Request"
        x-go-name: "CSR"
      rootCAPath:
        type: "string"
        description: "Path to secret - registered root CA"
        x-go-name: "RootCAPath"
      subjectAltNames:
        type: "array"
        description: "A list of Subject Alternative Names for a certificate (each\
          \ domain must be present in the list of allowed domains)"
        items:
          type: "string"
        x-go-name: "SubjectAltNames"
      ttl:
        type: "integer"
        format: "int64"
        description: "TTL for a generated certificate (in hours, cannot exceed the\
          \ maximum TTL specified in root CA secret)"
        x-go-name: "TTL"
    x-go-package: "api-bambe/domains/pki"
  SigningRequestInformation:
    type: "object"
    required:
    - "commonName"
    - "rootCAPath"
    properties:
      chain:
        type: "boolean"
        description: "Boolean indicating whether to return a root certificate"
        x-go-name: "Chain"
      commonName:
        type: "string"
        x-go-name: "CommonName"
      country:
        type: "string"
        x-go-name: "Country"
      description:
        type: "string"
        x-go-name: "Description"
      emailAddress:
        type: "string"
        x-go-name: "EmailAddress"
      locality:
        type: "string"
        x-go-name: "Locality"
      organization:
        type: "string"
        x-go-name: "Organization"
      organizationalUnit:
        type: "string"
        x-go-name: "OrganizationalUnit"
      rootCAPath:
        type: "string"
        description: "The name of the secret containing the root CA certificate"
        x-go-name: "RootCAPath"
      state:
        type: "string"
        x-go-name: "State"
      storePath:
        type: "string"
        description: "The name of the secret in which to store the generated certificate\
          \ and private key"
        x-go-name: "StorePath"
      ttl:
        type: "integer"
        format: "int64"
        description: "TTL for a generated certificate (in hours, cannot exceed the\
          \ maximum TTL specified in root CA secret)"
        x-go-name: "TTL"
    x-go-package: "api-bambe/domains/pki"
  StatusResponse:
    type: "object"
    properties:
      status:
        type: "string"
        x-go-name: "Status"
    example:
      status: "status"
    x-go-package: "api-bambe/domains/breakglass"
  TaskResult:
    type: "object"
    properties:
      type:
        type: "string"
        x-go-name: "Type"
      value:
        x-go-name: "Value"
    description: "Any metadata values"
    example:
      type: "type"
      value: ""
    x-go-package: "api-bambe/domains/task"
  TaskState:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
        x-go-name: "CreatedAt"
      results:
        type: "array"
        items:
          $ref: "#/definitions/TaskResult"
        x-go-name: "Results"
      state:
        type: "string"
        x-go-name: "State"
      taskName:
        type: "string"
        x-go-name: "TaskName"
    description: "TaskState represents a state of a task"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      taskName: "taskName"
      state: "state"
      results:
      - type: "type"
        value: ""
      - type: "type"
        value: ""
    x-go-package: "api-bambe/domains/task"
  UpdateKeyRequest:
    type: "object"
    required:
    - "privateKey"
    properties:
      metadata:
        type: "object"
        additionalProperties: {}
        x-go-name: "Metadata"
      nonce:
        type: "string"
        description: "Base64 encoded nonce to be used with key. If not provided, DSV\
          \ generates it for the user."
        x-go-name: "Nonce"
      privateKey:
        type: "string"
        description: "Base64 encoded private key"
        x-go-name: "PrivateKey"
    x-go-package: "api-bambe/domains/encryption"
  UsageResponseGeneral:
    type: "object"
    properties:
      endDate:
        type: "string"
        x-go-name: "EndDate"
      requestsUsed:
        type: "object"
        description: "Keys are days, values are numbers of API requests made that\
          \ day."
        additionalProperties:
          type: "integer"
          format: "int64"
        x-go-name: "RequestsUsed"
      startDate:
        type: "string"
        x-go-name: "StartDate"
      totalKeys:
        type: "integer"
        format: "int64"
        x-go-name: "TotalKeys"
      totalRequestsUsed:
        type: "integer"
        format: "int64"
        x-go-name: "TotalRequestsUsed"
      totalSecrets:
        type: "integer"
        format: "int64"
        x-go-name: "TotalSecrets"
    title: "UsageResponseGeneral defines the properties that represent a usage response\
      \ for the general API."
    example:
      endDate: "endDate"
      requestsUsed:
        key: 0
      totalKeys: 6
      totalRequestsUsed: 1
      totalSecrets: 5
      startDate: "startDate"
    x-go-package: "api-bambe/domains/usage"
  UserCreateModel:
    type: "object"
    required:
    - "userName"
    properties:
      displayName:
        type: "string"
        description: "The display name of the user"
        x-go-name: "DisplayName"
      externalId:
        type: "string"
        description: "External identifier, such as an AWS arn for 3rd party authentication"
        x-go-name: "ExternalID"
      password:
        type: "string"
        description: "User's password (not required if using 3rd party auth)"
        x-go-name: "Password"
      provider:
        type: "string"
        description: "Provider name defined in the authentication settings section\
          \ of configuration"
        x-go-name: "Provider"
      userName:
        type: "string"
        description: "The name of the user"
        minLength: 3
        maxLength: 100
        x-go-name: "UserName"
    description: "Creation properties of a user"
    x-go-package: "api-bambe/domains/user"
  UserResponse:
    type: "object"
    properties:
      created:
        type: "string"
        description: "Created date"
        x-go-name: "Created"
      createdBy:
        type: "string"
        description: "Who created"
        x-go-name: "CreatedBy"
      displayName:
        type: "string"
        description: "The display name of the user"
        x-go-name: "DisplayName"
      externalId:
        type: "string"
        description: "External identifier, such as an AWS arn for 3rd party authentication"
        x-go-name: "ExternalID"
      id:
        type: "string"
        description: "the id for this item"
        x-go-name: "ID"
      lastModified:
        type: "string"
        description: "Last updated date"
        x-go-name: "LastModified"
      lastModifiedBy:
        type: "string"
        description: "Who performed the last modification"
        x-go-name: "LastModifiedBy"
      provider:
        type: "string"
        description: "Provider name defined in the authentication settings section\
          \ of configuration"
        x-go-name: "Provider"
      userName:
        type: "string"
        description: "The name of the user"
        x-go-name: "UserName"
      version:
        type: "string"
        description: "Current version"
        x-go-name: "Version"
    description: "User contains user data along with user metadata"
    example:
      createdBy: "createdBy"
      provider: "provider"
      created: "created"
      displayName: "displayName"
      lastModifiedBy: "lastModifiedBy"
      externalId: "externalId"
      id: "id"
      lastModified: "lastModified"
      userName: "userName"
      version: "version"
    x-go-name: "User"
    x-go-package: "api-bambe/domains/user"
  UserSearch:
    type: "object"
    properties:
      cursor:
        type: "string"
        description: "Cursor to next batch of results"
        x-go-name: "Cursor"
      data:
        type: "array"
        description: "Users that match the search term"
        items:
          $ref: "#/definitions/UserResponse"
        x-go-name: "Data"
      length:
        type: "integer"
        format: "int64"
        description: "The number of results in this response"
        x-go-name: "Length"
      limit:
        type: "integer"
        format: "int64"
        description: "The maximum number of results per cursor"
        x-go-name: "Limit"
      total:
        type: "integer"
        format: "int64"
        description: "Total number of items"
        x-go-name: "Total"
    description: "User search response with metadata"
    example:
      cursor: "cursor"
      total: 1
      data:
      - createdBy: "createdBy"
        provider: "provider"
        created: "created"
        displayName: "displayName"
        lastModifiedBy: "lastModifiedBy"
        externalId: "externalId"
        id: "id"
        lastModified: "lastModified"
        userName: "userName"
        version: "version"
      - createdBy: "createdBy"
        provider: "provider"
        created: "created"
        displayName: "displayName"
        lastModifiedBy: "lastModifiedBy"
        externalId: "externalId"
        id: "id"
        lastModified: "lastModified"
        userName: "userName"
        version: "version"
      length: 0
      limit: 6
    x-go-name: "ResponseModelSearch"
    x-go-package: "api-bambe/domains/user"
  UserUpdateModel:
    type: "object"
    properties:
      displayName:
        type: "string"
        description: "The display name of the user"
        x-go-name: "DisplayName"
      password:
        type: "string"
        description: "User's password (not required if using 3rd party auth)"
        x-go-name: "Password"
    description: "Editable properties of a user"
    x-go-package: "api-bambe/domains/user"
  UserVersionResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/UserResponse"
        x-go-name: "Data"
    example:
      data:
      - createdBy: "createdBy"
        provider: "provider"
        created: "created"
        displayName: "displayName"
        lastModifiedBy: "lastModifiedBy"
        externalId: "externalId"
        id: "id"
        lastModified: "lastModified"
        userName: "userName"
        version: "version"
      - createdBy: "createdBy"
        provider: "provider"
        created: "created"
        displayName: "displayName"
        lastModifiedBy: "lastModifiedBy"
        externalId: "externalId"
        id: "id"
        lastModified: "lastModified"
        userName: "userName"
        version: "version"
    x-go-package: "api-bambe/domains/user"
responses:
  badRequest:
    description: "bad request"
    schema:
      $ref: "#/definitions/HTTPError"
  emptyResponse:
    description: "no error"
  forbidden:
    description: "forbidden"
    schema:
      $ref: "#/definitions/HTTPError"
  internalError:
    description: "server error"
    schema:
      $ref: "#/definitions/HTTPError"
  notFound:
    description: "not found"
    schema:
      $ref: "#/definitions/HTTPError"
  unauthorized:
    description: "unauthorized"
    schema:
      $ref: "#/definitions/HTTPError"
