// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RootCARegistration root c a registration
//
// swagger:model RootCARegistration
type RootCARegistration struct {

	// URL of the CRL from which the revocation of leaf certificates can be checked
	CRL string `json:"crl,omitempty"`

	// common name
	// Required: true
	CommonName *string `json:"commonName"`

	// country
	Country string `json:"country,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// List of domains for which certificate signing is allowed
	// Required: true
	Domains []string `json:"domains"`

	// email address
	EmailAddress string `json:"emailAddress,omitempty"`

	// locality
	Locality string `json:"locality,omitempty"`

	// Maximum TTL of a signed certificate issued from a given root CA (in hours)
	// Required: true
	MaxTTL *int64 `json:"maxTTL"`

	// organization
	Organization string `json:"organization,omitempty"`

	// organizational unit
	OrganizationalUnit string `json:"organizationalUnit,omitempty"`

	// The name of the secret containing the root CA certificate
	// Required: true
	RootCAPath *string `json:"rootCAPath"`

	// state
	State string `json:"state,omitempty"`

	// The name of the secret in which to store the generated certificate and private key
	StorePath string `json:"storePath,omitempty"`
}

// Validate validates this root c a registration
func (m *RootCARegistration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCAPath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RootCARegistration) validateCommonName(formats strfmt.Registry) error {

	if err := validate.Required("commonName", "body", m.CommonName); err != nil {
		return err
	}

	return nil
}

func (m *RootCARegistration) validateDomains(formats strfmt.Registry) error {

	if err := validate.Required("domains", "body", m.Domains); err != nil {
		return err
	}

	return nil
}

func (m *RootCARegistration) validateMaxTTL(formats strfmt.Registry) error {

	if err := validate.Required("maxTTL", "body", m.MaxTTL); err != nil {
		return err
	}

	return nil
}

func (m *RootCARegistration) validateRootCAPath(formats strfmt.Registry) error {

	if err := validate.Required("rootCAPath", "body", m.RootCAPath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this root c a registration based on context it is used
func (m *RootCARegistration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RootCARegistration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RootCARegistration) UnmarshalBinary(b []byte) error {
	var res RootCARegistration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
