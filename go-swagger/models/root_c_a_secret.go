// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RootCASecret root c a secret
//
// swagger:model RootCASecret
type RootCASecret struct {

	// URL of the CRL from which the revocation of leaf certificates can be checked
	CRL string `json:"crl,omitempty"`

	// Certificate of the root CA that contains information about it and public key
	// Required: true
	Certificate *string `json:"certificate"`

	// List of domains for which certificate signing is allowed
	// Required: true
	Domains []string `json:"domains"`

	// Maximum TTL of a signed certificate issued from a given root CA (in hours)
	// Required: true
	MaxTTL *int64 `json:"maxTTL"`

	// Private key of the root CA
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// RootCAPath to secret, which also serves as an identifier of the root CA
	// Required: true
	RootCAPath *string `json:"rootCAPath"`
}

// Validate validates this root c a secret
func (m *RootCASecret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCAPath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RootCASecret) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

func (m *RootCASecret) validateDomains(formats strfmt.Registry) error {

	if err := validate.Required("domains", "body", m.Domains); err != nil {
		return err
	}

	return nil
}

func (m *RootCASecret) validateMaxTTL(formats strfmt.Registry) error {

	if err := validate.Required("maxTTL", "body", m.MaxTTL); err != nil {
		return err
	}

	return nil
}

func (m *RootCASecret) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *RootCASecret) validateRootCAPath(formats strfmt.Registry) error {

	if err := validate.Required("rootCAPath", "body", m.RootCAPath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this root c a secret based on context it is used
func (m *RootCASecret) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RootCASecret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RootCASecret) UnmarshalBinary(b []byte) error {
	var res RootCASecret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
