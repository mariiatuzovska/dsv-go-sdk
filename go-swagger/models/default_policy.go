// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DefaultPolicy DefaultPolicy is the default implementation of the policy interface.
//
// swagger:model DefaultPolicy
type DefaultPolicy struct {

	// actions
	Actions []string `json:"actions"`

	// description
	Description string `json:"description,omitempty"`

	// effect
	Effect string `json:"effect,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// meta
	Meta []uint8 `json:"meta"`

	// resources
	Resources []string `json:"resources"`

	// subjects
	Subjects []string `json:"subjects"`

	// conditions
	Conditions Conditions `json:"conditions,omitempty"`
}

// Validate validates this default policy
func (m *DefaultPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefaultPolicy) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	if m.Conditions != nil {
		if err := m.Conditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this default policy based on the context it is used
func (m *DefaultPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefaultPolicy) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Conditions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("conditions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("conditions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefaultPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefaultPolicy) UnmarshalBinary(b []byte) error {
	var res DefaultPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
