// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Audit Audit model
//
// swagger:model Audit
type Audit struct {

	// Action performed
	Action string `json:"action,omitempty"`

	// Audit created date
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Audit id
	ID string `json:"id,omitempty"`

	// IP Address logged from client
	IPAddress string `json:"ipaddress,omitempty"`

	// Message additional details
	Message string `json:"message,omitempty"`

	// Resource path action performed on
	Path string `json:"path,omitempty"`

	// Security principal that performed action
	Principal string `json:"principal,omitempty"`

	// Principal item ID
	PrincipalItemID string `json:"principalItemId,omitempty"`

	// Http status code
	Status int64 `json:"status,omitempty"`

	// Tenant ID
	Tenant string `json:"tenant,omitempty"`

	// Tenant Name
	TenantName string `json:"tenantName,omitempty"`
}

// Validate validates this audit
func (m *Audit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Audit) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this audit based on context it is used
func (m *Audit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Audit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Audit) UnmarshalBinary(b []byte) error {
	var res Audit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
