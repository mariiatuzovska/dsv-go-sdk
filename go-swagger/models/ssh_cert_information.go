// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SSHCertInformation SSH cert information
//
// swagger:model SSHCertInformation
type SSHCertInformation struct {

	// Path to secret containing leaf certificate
	// Required: true
	LeafCAPath *string `json:"leafCAPath"`

	// A list of principals on a certificate (user or host names)
	// Required: true
	Principals []string `json:"principals"`

	// Path to secret containing root certificate
	// Required: true
	RootCAPath *string `json:"rootCAPath"`

	// TTL for a generated certificate (in hours)
	// Required: true
	TTL *int64 `json:"ttl"`
}

// Validate validates this SSH cert information
func (m *SSHCertInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLeafCAPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCAPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SSHCertInformation) validateLeafCAPath(formats strfmt.Registry) error {

	if err := validate.Required("leafCAPath", "body", m.LeafCAPath); err != nil {
		return err
	}

	return nil
}

func (m *SSHCertInformation) validatePrincipals(formats strfmt.Registry) error {

	if err := validate.Required("principals", "body", m.Principals); err != nil {
		return err
	}

	return nil
}

func (m *SSHCertInformation) validateRootCAPath(formats strfmt.Registry) error {

	if err := validate.Required("rootCAPath", "body", m.RootCAPath); err != nil {
		return err
	}

	return nil
}

func (m *SSHCertInformation) validateTTL(formats strfmt.Registry) error {

	if err := validate.Required("ttl", "body", m.TTL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this SSH cert information based on context it is used
func (m *SSHCertInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SSHCertInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SSHCertInformation) UnmarshalBinary(b []byte) error {
	var res SSHCertInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
