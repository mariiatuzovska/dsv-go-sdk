// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordChange PasswordChange model for submitting password change requests
//
// swagger:model PasswordChange
type PasswordChange struct {

	// The user's current password
	// Required: true
	CurrentPassword *string `json:"currentPassword"`

	// The new password to use
	// Required: true
	// Max Length: 100
	// Min Length: 8
	NewPassword *string `json:"newPassword"`
}

// Validate validates this password change
func (m *PasswordChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewPassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordChange) validateCurrentPassword(formats strfmt.Registry) error {

	if err := validate.Required("currentPassword", "body", m.CurrentPassword); err != nil {
		return err
	}

	return nil
}

func (m *PasswordChange) validateNewPassword(formats strfmt.Registry) error {

	if err := validate.Required("newPassword", "body", m.NewPassword); err != nil {
		return err
	}

	if err := validate.MinLength("newPassword", "body", *m.NewPassword, 8); err != nil {
		return err
	}

	if err := validate.MaxLength("newPassword", "body", *m.NewPassword, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this password change based on context it is used
func (m *PasswordChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PasswordChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordChange) UnmarshalBinary(b []byte) error {
	var res PasswordChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
