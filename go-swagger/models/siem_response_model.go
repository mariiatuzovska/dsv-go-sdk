// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SiemResponseModel siem response model
//
// swagger:model SiemResponseModel
type SiemResponseModel struct {

	// Denotes whether the endpoint can use self signed root certifcate for handshake (only for https protocol)
	AllowSelfSigned bool `json:"allowSelfSigned,omitempty"`

	// Authentication token
	Auth string `json:"auth,omitempty"`

	// Authentication method (token)
	AuthMethod string `json:"authMethod,omitempty"`

	// Endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// Failed is true if send has failed too many times, false otherwise
	Failed bool `json:"failed,omitempty"`

	// Number of failed send events
	FailedEvents int64 `json:"failedEvents,omitempty"`

	// Collect Server IP/FQDN
	Host string `json:"host,omitempty"`

	// The unique id for this item
	ID string `json:"id,omitempty"`

	// Logging format (e.g. "rfc5424" for syslog)
	LoggingFormat string `json:"loggingFormat,omitempty"`

	// Name of registered SIEM endpoint, similar to path
	Name string `json:"name,omitempty"`

	// Engine pool name, used when sending request to a DSV engine instance
	Pool string `json:"pool,omitempty"`

	// Collect Server Port
	Port int64 `json:"port,omitempty"`

	// Type of protocol ("tcp", "udp", "http", "https", "tls")
	Protocol string `json:"protocol,omitempty"`

	// Denotes whether the endpoint should be accessed through a DSV engine instance
	SendToEngine bool `json:"sendToEngine,omitempty"`

	// Type of endpoint ("syslog", "cef", "json", "splunk")
	SiemType string `json:"siemType,omitempty"`
}

// Validate validates this siem response model
func (m *SiemResponseModel) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this siem response model based on context it is used
func (m *SiemResponseModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SiemResponseModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiemResponseModel) UnmarshalBinary(b []byte) error {
	var res SiemResponseModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
