// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// CreateAuthSettingsReader is a Reader for the CreateAuthSettings structure.
type CreateAuthSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateAuthSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateAuthSettingsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateAuthSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateAuthSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateAuthSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateAuthSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateAuthSettingsCreated creates a CreateAuthSettingsCreated with default headers values
func NewCreateAuthSettingsCreated() *CreateAuthSettingsCreated {
	return &CreateAuthSettingsCreated{}
}

/* CreateAuthSettingsCreated describes a response with status code 201, with default header values.

no error
*/
type CreateAuthSettingsCreated struct {
	Payload *models.AuthenticationSettings
}

// IsSuccess returns true when this create auth settings created response has a 2xx status code
func (o *CreateAuthSettingsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create auth settings created response has a 3xx status code
func (o *CreateAuthSettingsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create auth settings created response has a 4xx status code
func (o *CreateAuthSettingsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create auth settings created response has a 5xx status code
func (o *CreateAuthSettingsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create auth settings created response a status code equal to that given
func (o *CreateAuthSettingsCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateAuthSettingsCreated) Error() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsCreated  %+v", 201, o.Payload)
}

func (o *CreateAuthSettingsCreated) String() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsCreated  %+v", 201, o.Payload)
}

func (o *CreateAuthSettingsCreated) GetPayload() *models.AuthenticationSettings {
	return o.Payload
}

func (o *CreateAuthSettingsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAuthSettingsBadRequest creates a CreateAuthSettingsBadRequest with default headers values
func NewCreateAuthSettingsBadRequest() *CreateAuthSettingsBadRequest {
	return &CreateAuthSettingsBadRequest{}
}

/* CreateAuthSettingsBadRequest describes a response with status code 400, with default header values.

bad request
*/
type CreateAuthSettingsBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this create auth settings bad request response has a 2xx status code
func (o *CreateAuthSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create auth settings bad request response has a 3xx status code
func (o *CreateAuthSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create auth settings bad request response has a 4xx status code
func (o *CreateAuthSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create auth settings bad request response has a 5xx status code
func (o *CreateAuthSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create auth settings bad request response a status code equal to that given
func (o *CreateAuthSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateAuthSettingsBadRequest) Error() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateAuthSettingsBadRequest) String() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateAuthSettingsBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *CreateAuthSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAuthSettingsUnauthorized creates a CreateAuthSettingsUnauthorized with default headers values
func NewCreateAuthSettingsUnauthorized() *CreateAuthSettingsUnauthorized {
	return &CreateAuthSettingsUnauthorized{}
}

/* CreateAuthSettingsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type CreateAuthSettingsUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this create auth settings unauthorized response has a 2xx status code
func (o *CreateAuthSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create auth settings unauthorized response has a 3xx status code
func (o *CreateAuthSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create auth settings unauthorized response has a 4xx status code
func (o *CreateAuthSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create auth settings unauthorized response has a 5xx status code
func (o *CreateAuthSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create auth settings unauthorized response a status code equal to that given
func (o *CreateAuthSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateAuthSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateAuthSettingsUnauthorized) String() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateAuthSettingsUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *CreateAuthSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAuthSettingsForbidden creates a CreateAuthSettingsForbidden with default headers values
func NewCreateAuthSettingsForbidden() *CreateAuthSettingsForbidden {
	return &CreateAuthSettingsForbidden{}
}

/* CreateAuthSettingsForbidden describes a response with status code 403, with default header values.

forbidden
*/
type CreateAuthSettingsForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this create auth settings forbidden response has a 2xx status code
func (o *CreateAuthSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create auth settings forbidden response has a 3xx status code
func (o *CreateAuthSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create auth settings forbidden response has a 4xx status code
func (o *CreateAuthSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create auth settings forbidden response has a 5xx status code
func (o *CreateAuthSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create auth settings forbidden response a status code equal to that given
func (o *CreateAuthSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateAuthSettingsForbidden) Error() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsForbidden  %+v", 403, o.Payload)
}

func (o *CreateAuthSettingsForbidden) String() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsForbidden  %+v", 403, o.Payload)
}

func (o *CreateAuthSettingsForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *CreateAuthSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAuthSettingsInternalServerError creates a CreateAuthSettingsInternalServerError with default headers values
func NewCreateAuthSettingsInternalServerError() *CreateAuthSettingsInternalServerError {
	return &CreateAuthSettingsInternalServerError{}
}

/* CreateAuthSettingsInternalServerError describes a response with status code 500, with default header values.

server error
*/
type CreateAuthSettingsInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this create auth settings internal server error response has a 2xx status code
func (o *CreateAuthSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create auth settings internal server error response has a 3xx status code
func (o *CreateAuthSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create auth settings internal server error response has a 4xx status code
func (o *CreateAuthSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create auth settings internal server error response has a 5xx status code
func (o *CreateAuthSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create auth settings internal server error response a status code equal to that given
func (o *CreateAuthSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateAuthSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateAuthSettingsInternalServerError) String() string {
	return fmt.Sprintf("[POST /config/auth/][%d] createAuthSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateAuthSettingsInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *CreateAuthSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
