// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// RollbackAuthSettingsReader is a Reader for the RollbackAuthSettings structure.
type RollbackAuthSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RollbackAuthSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRollbackAuthSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRollbackAuthSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRollbackAuthSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRollbackAuthSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRollbackAuthSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRollbackAuthSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRollbackAuthSettingsOK creates a RollbackAuthSettingsOK with default headers values
func NewRollbackAuthSettingsOK() *RollbackAuthSettingsOK {
	return &RollbackAuthSettingsOK{}
}

/* RollbackAuthSettingsOK describes a response with status code 200, with default header values.

no error
*/
type RollbackAuthSettingsOK struct {
	Payload *models.AuthenticationSettings
}

// IsSuccess returns true when this rollback auth settings o k response has a 2xx status code
func (o *RollbackAuthSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rollback auth settings o k response has a 3xx status code
func (o *RollbackAuthSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback auth settings o k response has a 4xx status code
func (o *RollbackAuthSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rollback auth settings o k response has a 5xx status code
func (o *RollbackAuthSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback auth settings o k response a status code equal to that given
func (o *RollbackAuthSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *RollbackAuthSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsOK  %+v", 200, o.Payload)
}

func (o *RollbackAuthSettingsOK) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsOK  %+v", 200, o.Payload)
}

func (o *RollbackAuthSettingsOK) GetPayload() *models.AuthenticationSettings {
	return o.Payload
}

func (o *RollbackAuthSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackAuthSettingsBadRequest creates a RollbackAuthSettingsBadRequest with default headers values
func NewRollbackAuthSettingsBadRequest() *RollbackAuthSettingsBadRequest {
	return &RollbackAuthSettingsBadRequest{}
}

/* RollbackAuthSettingsBadRequest describes a response with status code 400, with default header values.

bad request
*/
type RollbackAuthSettingsBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback auth settings bad request response has a 2xx status code
func (o *RollbackAuthSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback auth settings bad request response has a 3xx status code
func (o *RollbackAuthSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback auth settings bad request response has a 4xx status code
func (o *RollbackAuthSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback auth settings bad request response has a 5xx status code
func (o *RollbackAuthSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback auth settings bad request response a status code equal to that given
func (o *RollbackAuthSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RollbackAuthSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *RollbackAuthSettingsBadRequest) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *RollbackAuthSettingsBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackAuthSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackAuthSettingsUnauthorized creates a RollbackAuthSettingsUnauthorized with default headers values
func NewRollbackAuthSettingsUnauthorized() *RollbackAuthSettingsUnauthorized {
	return &RollbackAuthSettingsUnauthorized{}
}

/* RollbackAuthSettingsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RollbackAuthSettingsUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback auth settings unauthorized response has a 2xx status code
func (o *RollbackAuthSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback auth settings unauthorized response has a 3xx status code
func (o *RollbackAuthSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback auth settings unauthorized response has a 4xx status code
func (o *RollbackAuthSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback auth settings unauthorized response has a 5xx status code
func (o *RollbackAuthSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback auth settings unauthorized response a status code equal to that given
func (o *RollbackAuthSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RollbackAuthSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *RollbackAuthSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *RollbackAuthSettingsUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackAuthSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackAuthSettingsForbidden creates a RollbackAuthSettingsForbidden with default headers values
func NewRollbackAuthSettingsForbidden() *RollbackAuthSettingsForbidden {
	return &RollbackAuthSettingsForbidden{}
}

/* RollbackAuthSettingsForbidden describes a response with status code 403, with default header values.

forbidden
*/
type RollbackAuthSettingsForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback auth settings forbidden response has a 2xx status code
func (o *RollbackAuthSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback auth settings forbidden response has a 3xx status code
func (o *RollbackAuthSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback auth settings forbidden response has a 4xx status code
func (o *RollbackAuthSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback auth settings forbidden response has a 5xx status code
func (o *RollbackAuthSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback auth settings forbidden response a status code equal to that given
func (o *RollbackAuthSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RollbackAuthSettingsForbidden) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsForbidden  %+v", 403, o.Payload)
}

func (o *RollbackAuthSettingsForbidden) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsForbidden  %+v", 403, o.Payload)
}

func (o *RollbackAuthSettingsForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackAuthSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackAuthSettingsNotFound creates a RollbackAuthSettingsNotFound with default headers values
func NewRollbackAuthSettingsNotFound() *RollbackAuthSettingsNotFound {
	return &RollbackAuthSettingsNotFound{}
}

/* RollbackAuthSettingsNotFound describes a response with status code 404, with default header values.

not found
*/
type RollbackAuthSettingsNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback auth settings not found response has a 2xx status code
func (o *RollbackAuthSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback auth settings not found response has a 3xx status code
func (o *RollbackAuthSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback auth settings not found response has a 4xx status code
func (o *RollbackAuthSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback auth settings not found response has a 5xx status code
func (o *RollbackAuthSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback auth settings not found response a status code equal to that given
func (o *RollbackAuthSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RollbackAuthSettingsNotFound) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsNotFound  %+v", 404, o.Payload)
}

func (o *RollbackAuthSettingsNotFound) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsNotFound  %+v", 404, o.Payload)
}

func (o *RollbackAuthSettingsNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackAuthSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackAuthSettingsInternalServerError creates a RollbackAuthSettingsInternalServerError with default headers values
func NewRollbackAuthSettingsInternalServerError() *RollbackAuthSettingsInternalServerError {
	return &RollbackAuthSettingsInternalServerError{}
}

/* RollbackAuthSettingsInternalServerError describes a response with status code 500, with default header values.

server error
*/
type RollbackAuthSettingsInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback auth settings internal server error response has a 2xx status code
func (o *RollbackAuthSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback auth settings internal server error response has a 3xx status code
func (o *RollbackAuthSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback auth settings internal server error response has a 4xx status code
func (o *RollbackAuthSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this rollback auth settings internal server error response has a 5xx status code
func (o *RollbackAuthSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this rollback auth settings internal server error response a status code equal to that given
func (o *RollbackAuthSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RollbackAuthSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *RollbackAuthSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}/rollback/{version}][%d] rollbackAuthSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *RollbackAuthSettingsInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackAuthSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
