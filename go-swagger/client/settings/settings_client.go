// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAuthSettings(params *CreateAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuthSettingsCreated, error)

	DeleteAuthSettings(params *DeleteAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthSettingsOK, error)

	GetAuthSettings(params *GetAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthSettingsOK, error)

	GetAuthSettingsByVersion(params *GetAuthSettingsByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthSettingsByVersionOK, error)

	RestoreAuthSettings(params *RestoreAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreAuthSettingsOK, error)

	RollbackAuthSettings(params *RollbackAuthSettingsParams, opts ...ClientOption) (*RollbackAuthSettingsOK, error)

	SearchSettings(params *SearchSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSettingsOK, error)

	UpdateAuthSettings(params *UpdateAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAuthSettings creates authentication provider

  Creates new authentication provider settings.
*/
func (a *Client) CreateAuthSettings(params *CreateAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuthSettingsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAuthSettings",
		Method:             "POST",
		PathPattern:        "/config/auth/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAuthSettingsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAuthSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAuthSettings deletes authentication provider

  Remove authentication provider settings from the system.
*/
func (a *Client) DeleteAuthSettings(params *DeleteAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAuthSettings",
		Method:             "DELETE",
		PathPattern:        "/config/auth/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAuthSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAuthSettings gets authentication provider

  Retrieve authentication providers by name.
*/
func (a *Client) GetAuthSettings(params *GetAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuthSettings",
		Method:             "GET",
		PathPattern:        "/config/auth/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuthSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAuthSettingsByVersion gets a list of authentication settings by version

  Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
*/
func (a *Client) GetAuthSettingsByVersion(params *GetAuthSettingsByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthSettingsByVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSettingsByVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuthSettingsByVersion",
		Method:             "GET",
		PathPattern:        "/config/auth/{name}/version/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthSettingsByVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthSettingsByVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuthSettingsByVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestoreAuthSettings restores authentication provider

  Restore authentication provider settings if it had been marked for deletion.
*/
func (a *Client) RestoreAuthSettings(params *RestoreAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreAuthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreAuthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreAuthSettings",
		Method:             "GET",
		PathPattern:        "/config/auth/{name}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreAuthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreAuthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restoreAuthSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackAuthSettings rollbacks authentication provider

  Rollback authentication provider to a previous version.
*/
func (a *Client) RollbackAuthSettings(params *RollbackAuthSettingsParams, opts ...ClientOption) (*RollbackAuthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackAuthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rollbackAuthSettings",
		Method:             "PUT",
		PathPattern:        "/config/auth/{name}/rollback/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RollbackAuthSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackAuthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rollbackAuthSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchSettings searches authentication providers

  Search authentication providers by name.
*/
func (a *Client) SearchSettings(params *SearchSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSettings",
		Method:             "GET",
		PathPattern:        "/config/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAuthSettings updates authentication provider

  Updates all fields on an existing authentication provider.
*/
func (a *Client) UpdateAuthSettings(params *UpdateAuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAuthSettings",
		Method:             "PUT",
		PathPattern:        "/config/auth/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAuthSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
