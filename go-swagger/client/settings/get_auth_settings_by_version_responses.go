// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetAuthSettingsByVersionReader is a Reader for the GetAuthSettingsByVersion structure.
type GetAuthSettingsByVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthSettingsByVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthSettingsByVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthSettingsByVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthSettingsByVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthSettingsByVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthSettingsByVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthSettingsByVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthSettingsByVersionOK creates a GetAuthSettingsByVersionOK with default headers values
func NewGetAuthSettingsByVersionOK() *GetAuthSettingsByVersionOK {
	return &GetAuthSettingsByVersionOK{}
}

/* GetAuthSettingsByVersionOK describes a response with status code 200, with default header values.

no error
*/
type GetAuthSettingsByVersionOK struct {
	Payload *models.AuthenticationSettingsVersionResponse
}

// IsSuccess returns true when this get auth settings by version o k response has a 2xx status code
func (o *GetAuthSettingsByVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get auth settings by version o k response has a 3xx status code
func (o *GetAuthSettingsByVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth settings by version o k response has a 4xx status code
func (o *GetAuthSettingsByVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get auth settings by version o k response has a 5xx status code
func (o *GetAuthSettingsByVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth settings by version o k response a status code equal to that given
func (o *GetAuthSettingsByVersionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAuthSettingsByVersionOK) Error() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionOK  %+v", 200, o.Payload)
}

func (o *GetAuthSettingsByVersionOK) String() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionOK  %+v", 200, o.Payload)
}

func (o *GetAuthSettingsByVersionOK) GetPayload() *models.AuthenticationSettingsVersionResponse {
	return o.Payload
}

func (o *GetAuthSettingsByVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationSettingsVersionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthSettingsByVersionBadRequest creates a GetAuthSettingsByVersionBadRequest with default headers values
func NewGetAuthSettingsByVersionBadRequest() *GetAuthSettingsByVersionBadRequest {
	return &GetAuthSettingsByVersionBadRequest{}
}

/* GetAuthSettingsByVersionBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetAuthSettingsByVersionBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get auth settings by version bad request response has a 2xx status code
func (o *GetAuthSettingsByVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth settings by version bad request response has a 3xx status code
func (o *GetAuthSettingsByVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth settings by version bad request response has a 4xx status code
func (o *GetAuthSettingsByVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth settings by version bad request response has a 5xx status code
func (o *GetAuthSettingsByVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth settings by version bad request response a status code equal to that given
func (o *GetAuthSettingsByVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAuthSettingsByVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthSettingsByVersionBadRequest) String() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthSettingsByVersionBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetAuthSettingsByVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthSettingsByVersionUnauthorized creates a GetAuthSettingsByVersionUnauthorized with default headers values
func NewGetAuthSettingsByVersionUnauthorized() *GetAuthSettingsByVersionUnauthorized {
	return &GetAuthSettingsByVersionUnauthorized{}
}

/* GetAuthSettingsByVersionUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetAuthSettingsByVersionUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get auth settings by version unauthorized response has a 2xx status code
func (o *GetAuthSettingsByVersionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth settings by version unauthorized response has a 3xx status code
func (o *GetAuthSettingsByVersionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth settings by version unauthorized response has a 4xx status code
func (o *GetAuthSettingsByVersionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth settings by version unauthorized response has a 5xx status code
func (o *GetAuthSettingsByVersionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth settings by version unauthorized response a status code equal to that given
func (o *GetAuthSettingsByVersionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAuthSettingsByVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthSettingsByVersionUnauthorized) String() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthSettingsByVersionUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetAuthSettingsByVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthSettingsByVersionForbidden creates a GetAuthSettingsByVersionForbidden with default headers values
func NewGetAuthSettingsByVersionForbidden() *GetAuthSettingsByVersionForbidden {
	return &GetAuthSettingsByVersionForbidden{}
}

/* GetAuthSettingsByVersionForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetAuthSettingsByVersionForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get auth settings by version forbidden response has a 2xx status code
func (o *GetAuthSettingsByVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth settings by version forbidden response has a 3xx status code
func (o *GetAuthSettingsByVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth settings by version forbidden response has a 4xx status code
func (o *GetAuthSettingsByVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth settings by version forbidden response has a 5xx status code
func (o *GetAuthSettingsByVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth settings by version forbidden response a status code equal to that given
func (o *GetAuthSettingsByVersionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAuthSettingsByVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthSettingsByVersionForbidden) String() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthSettingsByVersionForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetAuthSettingsByVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthSettingsByVersionNotFound creates a GetAuthSettingsByVersionNotFound with default headers values
func NewGetAuthSettingsByVersionNotFound() *GetAuthSettingsByVersionNotFound {
	return &GetAuthSettingsByVersionNotFound{}
}

/* GetAuthSettingsByVersionNotFound describes a response with status code 404, with default header values.

not found
*/
type GetAuthSettingsByVersionNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get auth settings by version not found response has a 2xx status code
func (o *GetAuthSettingsByVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth settings by version not found response has a 3xx status code
func (o *GetAuthSettingsByVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth settings by version not found response has a 4xx status code
func (o *GetAuthSettingsByVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth settings by version not found response has a 5xx status code
func (o *GetAuthSettingsByVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth settings by version not found response a status code equal to that given
func (o *GetAuthSettingsByVersionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAuthSettingsByVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthSettingsByVersionNotFound) String() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthSettingsByVersionNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetAuthSettingsByVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthSettingsByVersionInternalServerError creates a GetAuthSettingsByVersionInternalServerError with default headers values
func NewGetAuthSettingsByVersionInternalServerError() *GetAuthSettingsByVersionInternalServerError {
	return &GetAuthSettingsByVersionInternalServerError{}
}

/* GetAuthSettingsByVersionInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetAuthSettingsByVersionInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get auth settings by version internal server error response has a 2xx status code
func (o *GetAuthSettingsByVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth settings by version internal server error response has a 3xx status code
func (o *GetAuthSettingsByVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth settings by version internal server error response has a 4xx status code
func (o *GetAuthSettingsByVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get auth settings by version internal server error response has a 5xx status code
func (o *GetAuthSettingsByVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get auth settings by version internal server error response a status code equal to that given
func (o *GetAuthSettingsByVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAuthSettingsByVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthSettingsByVersionInternalServerError) String() string {
	return fmt.Sprintf("[GET /config/auth/{name}/version/{version}][%d] getAuthSettingsByVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthSettingsByVersionInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetAuthSettingsByVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
