// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// UpdateAuthSettingsReader is a Reader for the UpdateAuthSettings structure.
type UpdateAuthSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAuthSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAuthSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAuthSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAuthSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAuthSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAuthSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateAuthSettingsOK creates a UpdateAuthSettingsOK with default headers values
func NewUpdateAuthSettingsOK() *UpdateAuthSettingsOK {
	return &UpdateAuthSettingsOK{}
}

/* UpdateAuthSettingsOK describes a response with status code 200, with default header values.

no error
*/
type UpdateAuthSettingsOK struct {
	Payload *models.AuthenticationSettings
}

// IsSuccess returns true when this update auth settings o k response has a 2xx status code
func (o *UpdateAuthSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update auth settings o k response has a 3xx status code
func (o *UpdateAuthSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth settings o k response has a 4xx status code
func (o *UpdateAuthSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update auth settings o k response has a 5xx status code
func (o *UpdateAuthSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth settings o k response a status code equal to that given
func (o *UpdateAuthSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateAuthSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsOK  %+v", 200, o.Payload)
}

func (o *UpdateAuthSettingsOK) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsOK  %+v", 200, o.Payload)
}

func (o *UpdateAuthSettingsOK) GetPayload() *models.AuthenticationSettings {
	return o.Payload
}

func (o *UpdateAuthSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthSettingsBadRequest creates a UpdateAuthSettingsBadRequest with default headers values
func NewUpdateAuthSettingsBadRequest() *UpdateAuthSettingsBadRequest {
	return &UpdateAuthSettingsBadRequest{}
}

/* UpdateAuthSettingsBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UpdateAuthSettingsBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update auth settings bad request response has a 2xx status code
func (o *UpdateAuthSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update auth settings bad request response has a 3xx status code
func (o *UpdateAuthSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth settings bad request response has a 4xx status code
func (o *UpdateAuthSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update auth settings bad request response has a 5xx status code
func (o *UpdateAuthSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth settings bad request response a status code equal to that given
func (o *UpdateAuthSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateAuthSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAuthSettingsBadRequest) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAuthSettingsBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateAuthSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthSettingsUnauthorized creates a UpdateAuthSettingsUnauthorized with default headers values
func NewUpdateAuthSettingsUnauthorized() *UpdateAuthSettingsUnauthorized {
	return &UpdateAuthSettingsUnauthorized{}
}

/* UpdateAuthSettingsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UpdateAuthSettingsUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update auth settings unauthorized response has a 2xx status code
func (o *UpdateAuthSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update auth settings unauthorized response has a 3xx status code
func (o *UpdateAuthSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth settings unauthorized response has a 4xx status code
func (o *UpdateAuthSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update auth settings unauthorized response has a 5xx status code
func (o *UpdateAuthSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth settings unauthorized response a status code equal to that given
func (o *UpdateAuthSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateAuthSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAuthSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAuthSettingsUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateAuthSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthSettingsForbidden creates a UpdateAuthSettingsForbidden with default headers values
func NewUpdateAuthSettingsForbidden() *UpdateAuthSettingsForbidden {
	return &UpdateAuthSettingsForbidden{}
}

/* UpdateAuthSettingsForbidden describes a response with status code 403, with default header values.

forbidden
*/
type UpdateAuthSettingsForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update auth settings forbidden response has a 2xx status code
func (o *UpdateAuthSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update auth settings forbidden response has a 3xx status code
func (o *UpdateAuthSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth settings forbidden response has a 4xx status code
func (o *UpdateAuthSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update auth settings forbidden response has a 5xx status code
func (o *UpdateAuthSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth settings forbidden response a status code equal to that given
func (o *UpdateAuthSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateAuthSettingsForbidden) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAuthSettingsForbidden) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAuthSettingsForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateAuthSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthSettingsInternalServerError creates a UpdateAuthSettingsInternalServerError with default headers values
func NewUpdateAuthSettingsInternalServerError() *UpdateAuthSettingsInternalServerError {
	return &UpdateAuthSettingsInternalServerError{}
}

/* UpdateAuthSettingsInternalServerError describes a response with status code 500, with default header values.

server error
*/
type UpdateAuthSettingsInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update auth settings internal server error response has a 2xx status code
func (o *UpdateAuthSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update auth settings internal server error response has a 3xx status code
func (o *UpdateAuthSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth settings internal server error response has a 4xx status code
func (o *UpdateAuthSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update auth settings internal server error response has a 5xx status code
func (o *UpdateAuthSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update auth settings internal server error response a status code equal to that given
func (o *UpdateAuthSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateAuthSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAuthSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /config/auth/{name}][%d] updateAuthSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAuthSettingsInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateAuthSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
