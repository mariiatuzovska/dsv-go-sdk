// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// AddMemberReader is a Reader for the AddMember structure.
type AddMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddMemberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddMemberBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddMemberUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddMemberForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddMemberInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddMemberOK creates a AddMemberOK with default headers values
func NewAddMemberOK() *AddMemberOK {
	return &AddMemberOK{}
}

/* AddMemberOK describes a response with status code 200, with default header values.

no error
*/
type AddMemberOK struct {
	Payload *models.AddMemberResponse
}

// IsSuccess returns true when this add member o k response has a 2xx status code
func (o *AddMemberOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add member o k response has a 3xx status code
func (o *AddMemberOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add member o k response has a 4xx status code
func (o *AddMemberOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add member o k response has a 5xx status code
func (o *AddMemberOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add member o k response a status code equal to that given
func (o *AddMemberOK) IsCode(code int) bool {
	return code == 200
}

func (o *AddMemberOK) Error() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberOK  %+v", 200, o.Payload)
}

func (o *AddMemberOK) String() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberOK  %+v", 200, o.Payload)
}

func (o *AddMemberOK) GetPayload() *models.AddMemberResponse {
	return o.Payload
}

func (o *AddMemberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AddMemberResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMemberBadRequest creates a AddMemberBadRequest with default headers values
func NewAddMemberBadRequest() *AddMemberBadRequest {
	return &AddMemberBadRequest{}
}

/* AddMemberBadRequest describes a response with status code 400, with default header values.

bad request
*/
type AddMemberBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add member bad request response has a 2xx status code
func (o *AddMemberBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add member bad request response has a 3xx status code
func (o *AddMemberBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add member bad request response has a 4xx status code
func (o *AddMemberBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add member bad request response has a 5xx status code
func (o *AddMemberBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add member bad request response a status code equal to that given
func (o *AddMemberBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AddMemberBadRequest) Error() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberBadRequest  %+v", 400, o.Payload)
}

func (o *AddMemberBadRequest) String() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberBadRequest  %+v", 400, o.Payload)
}

func (o *AddMemberBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddMemberBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMemberUnauthorized creates a AddMemberUnauthorized with default headers values
func NewAddMemberUnauthorized() *AddMemberUnauthorized {
	return &AddMemberUnauthorized{}
}

/* AddMemberUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type AddMemberUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add member unauthorized response has a 2xx status code
func (o *AddMemberUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add member unauthorized response has a 3xx status code
func (o *AddMemberUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add member unauthorized response has a 4xx status code
func (o *AddMemberUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add member unauthorized response has a 5xx status code
func (o *AddMemberUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add member unauthorized response a status code equal to that given
func (o *AddMemberUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AddMemberUnauthorized) Error() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberUnauthorized  %+v", 401, o.Payload)
}

func (o *AddMemberUnauthorized) String() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberUnauthorized  %+v", 401, o.Payload)
}

func (o *AddMemberUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddMemberUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMemberForbidden creates a AddMemberForbidden with default headers values
func NewAddMemberForbidden() *AddMemberForbidden {
	return &AddMemberForbidden{}
}

/* AddMemberForbidden describes a response with status code 403, with default header values.

forbidden
*/
type AddMemberForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add member forbidden response has a 2xx status code
func (o *AddMemberForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add member forbidden response has a 3xx status code
func (o *AddMemberForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add member forbidden response has a 4xx status code
func (o *AddMemberForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add member forbidden response has a 5xx status code
func (o *AddMemberForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add member forbidden response a status code equal to that given
func (o *AddMemberForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AddMemberForbidden) Error() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberForbidden  %+v", 403, o.Payload)
}

func (o *AddMemberForbidden) String() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberForbidden  %+v", 403, o.Payload)
}

func (o *AddMemberForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddMemberForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMemberInternalServerError creates a AddMemberInternalServerError with default headers values
func NewAddMemberInternalServerError() *AddMemberInternalServerError {
	return &AddMemberInternalServerError{}
}

/* AddMemberInternalServerError describes a response with status code 500, with default header values.

server error
*/
type AddMemberInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add member internal server error response has a 2xx status code
func (o *AddMemberInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add member internal server error response has a 3xx status code
func (o *AddMemberInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add member internal server error response has a 4xx status code
func (o *AddMemberInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add member internal server error response has a 5xx status code
func (o *AddMemberInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add member internal server error response a status code equal to that given
func (o *AddMemberInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AddMemberInternalServerError) Error() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberInternalServerError  %+v", 500, o.Payload)
}

func (o *AddMemberInternalServerError) String() string {
	return fmt.Sprintf("[POST /groups/{name}/members][%d] addMemberInternalServerError  %+v", 500, o.Payload)
}

func (o *AddMemberInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddMemberInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
