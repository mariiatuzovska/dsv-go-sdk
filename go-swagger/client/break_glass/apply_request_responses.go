// Code generated by go-swagger; DO NOT EDIT.

package break_glass

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// ApplyRequestReader is a Reader for the ApplyRequest structure.
type ApplyRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewApplyRequestCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApplyRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewApplyRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewApplyRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewApplyRequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewApplyRequestCreated creates a ApplyRequestCreated with default headers values
func NewApplyRequestCreated() *ApplyRequestCreated {
	return &ApplyRequestCreated{}
}

/* ApplyRequestCreated describes a response with status code 201, with default header values.

no error
*/
type ApplyRequestCreated struct {
	Payload *models.ApplyResponse
}

// IsSuccess returns true when this apply request created response has a 2xx status code
func (o *ApplyRequestCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this apply request created response has a 3xx status code
func (o *ApplyRequestCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply request created response has a 4xx status code
func (o *ApplyRequestCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply request created response has a 5xx status code
func (o *ApplyRequestCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this apply request created response a status code equal to that given
func (o *ApplyRequestCreated) IsCode(code int) bool {
	return code == 201
}

func (o *ApplyRequestCreated) Error() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestCreated  %+v", 201, o.Payload)
}

func (o *ApplyRequestCreated) String() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestCreated  %+v", 201, o.Payload)
}

func (o *ApplyRequestCreated) GetPayload() *models.ApplyResponse {
	return o.Payload
}

func (o *ApplyRequestCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRequestBadRequest creates a ApplyRequestBadRequest with default headers values
func NewApplyRequestBadRequest() *ApplyRequestBadRequest {
	return &ApplyRequestBadRequest{}
}

/* ApplyRequestBadRequest describes a response with status code 400, with default header values.

bad request
*/
type ApplyRequestBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this apply request bad request response has a 2xx status code
func (o *ApplyRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply request bad request response has a 3xx status code
func (o *ApplyRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply request bad request response has a 4xx status code
func (o *ApplyRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply request bad request response has a 5xx status code
func (o *ApplyRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this apply request bad request response a status code equal to that given
func (o *ApplyRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ApplyRequestBadRequest) Error() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestBadRequest  %+v", 400, o.Payload)
}

func (o *ApplyRequestBadRequest) String() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestBadRequest  %+v", 400, o.Payload)
}

func (o *ApplyRequestBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ApplyRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRequestUnauthorized creates a ApplyRequestUnauthorized with default headers values
func NewApplyRequestUnauthorized() *ApplyRequestUnauthorized {
	return &ApplyRequestUnauthorized{}
}

/* ApplyRequestUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type ApplyRequestUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this apply request unauthorized response has a 2xx status code
func (o *ApplyRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply request unauthorized response has a 3xx status code
func (o *ApplyRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply request unauthorized response has a 4xx status code
func (o *ApplyRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply request unauthorized response has a 5xx status code
func (o *ApplyRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this apply request unauthorized response a status code equal to that given
func (o *ApplyRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ApplyRequestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *ApplyRequestUnauthorized) String() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *ApplyRequestUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ApplyRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRequestForbidden creates a ApplyRequestForbidden with default headers values
func NewApplyRequestForbidden() *ApplyRequestForbidden {
	return &ApplyRequestForbidden{}
}

/* ApplyRequestForbidden describes a response with status code 403, with default header values.

forbidden
*/
type ApplyRequestForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this apply request forbidden response has a 2xx status code
func (o *ApplyRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply request forbidden response has a 3xx status code
func (o *ApplyRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply request forbidden response has a 4xx status code
func (o *ApplyRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply request forbidden response has a 5xx status code
func (o *ApplyRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this apply request forbidden response a status code equal to that given
func (o *ApplyRequestForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ApplyRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestForbidden  %+v", 403, o.Payload)
}

func (o *ApplyRequestForbidden) String() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestForbidden  %+v", 403, o.Payload)
}

func (o *ApplyRequestForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ApplyRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyRequestInternalServerError creates a ApplyRequestInternalServerError with default headers values
func NewApplyRequestInternalServerError() *ApplyRequestInternalServerError {
	return &ApplyRequestInternalServerError{}
}

/* ApplyRequestInternalServerError describes a response with status code 500, with default header values.

server error
*/
type ApplyRequestInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this apply request internal server error response has a 2xx status code
func (o *ApplyRequestInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply request internal server error response has a 3xx status code
func (o *ApplyRequestInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply request internal server error response has a 4xx status code
func (o *ApplyRequestInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply request internal server error response has a 5xx status code
func (o *ApplyRequestInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this apply request internal server error response a status code equal to that given
func (o *ApplyRequestInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ApplyRequestInternalServerError) Error() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *ApplyRequestInternalServerError) String() string {
	return fmt.Sprintf("[POST /breakglass/apply][%d] applyRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *ApplyRequestInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ApplyRequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
