// Code generated by go-swagger; DO NOT EDIT.

package break_glass

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewApplyRequestParams creates a new ApplyRequestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApplyRequestParams() *ApplyRequestParams {
	return &ApplyRequestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewApplyRequestParamsWithTimeout creates a new ApplyRequestParams object
// with the ability to set a timeout on a request.
func NewApplyRequestParamsWithTimeout(timeout time.Duration) *ApplyRequestParams {
	return &ApplyRequestParams{
		timeout: timeout,
	}
}

// NewApplyRequestParamsWithContext creates a new ApplyRequestParams object
// with the ability to set a context for a request.
func NewApplyRequestParamsWithContext(ctx context.Context) *ApplyRequestParams {
	return &ApplyRequestParams{
		Context: ctx,
	}
}

// NewApplyRequestParamsWithHTTPClient creates a new ApplyRequestParams object
// with the ability to set a custom HTTPClient for a request.
func NewApplyRequestParamsWithHTTPClient(client *http.Client) *ApplyRequestParams {
	return &ApplyRequestParams{
		HTTPClient: client,
	}
}

/* ApplyRequestParams contains all the parameters to send to the API endpoint
   for the apply request operation.

   Typically these are written to a http.Request.
*/
type ApplyRequestParams struct {

	// Shares.
	Shares []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the apply request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplyRequestParams) WithDefaults() *ApplyRequestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the apply request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplyRequestParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the apply request params
func (o *ApplyRequestParams) WithTimeout(timeout time.Duration) *ApplyRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the apply request params
func (o *ApplyRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the apply request params
func (o *ApplyRequestParams) WithContext(ctx context.Context) *ApplyRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the apply request params
func (o *ApplyRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the apply request params
func (o *ApplyRequestParams) WithHTTPClient(client *http.Client) *ApplyRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the apply request params
func (o *ApplyRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithShares adds the shares to the apply request params
func (o *ApplyRequestParams) WithShares(shares []string) *ApplyRequestParams {
	o.SetShares(shares)
	return o
}

// SetShares adds the shares to the apply request params
func (o *ApplyRequestParams) SetShares(shares []string) {
	o.Shares = shares
}

// WriteToRequest writes these params to a swagger request
func (o *ApplyRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Shares != nil {

		// binding items for shares
		joinedShares := o.bindParamShares(reg)

		// query array param shares
		if err := r.SetQueryParam("shares", joinedShares...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamApplyRequest binds the parameter shares
func (o *ApplyRequestParams) bindParamShares(formats strfmt.Registry) []string {
	sharesIR := o.Shares

	var sharesIC []string
	for _, sharesIIR := range sharesIR { // explode []string

		sharesIIV := sharesIIR // string as string
		sharesIC = append(sharesIC, sharesIIV)
	}

	// items.CollectionFormat: ""
	sharesIS := swag.JoinByFormat(sharesIC, "")

	return sharesIS
}
