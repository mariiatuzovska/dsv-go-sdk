// Code generated by go-swagger; DO NOT EDIT.

package break_glass

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetStatusReader is a Reader for the GetStatus structure.
type GetStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetStatusOK creates a GetStatusOK with default headers values
func NewGetStatusOK() *GetStatusOK {
	return &GetStatusOK{}
}

/* GetStatusOK describes a response with status code 200, with default header values.

no error
*/
type GetStatusOK struct {
	Payload *models.StatusResponse
}

// IsSuccess returns true when this get status o k response has a 2xx status code
func (o *GetStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get status o k response has a 3xx status code
func (o *GetStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get status o k response has a 4xx status code
func (o *GetStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get status o k response has a 5xx status code
func (o *GetStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get status o k response a status code equal to that given
func (o *GetStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetStatusOK) Error() string {
	return fmt.Sprintf("[GET /breakglass][%d] getStatusOK  %+v", 200, o.Payload)
}

func (o *GetStatusOK) String() string {
	return fmt.Sprintf("[GET /breakglass][%d] getStatusOK  %+v", 200, o.Payload)
}

func (o *GetStatusOK) GetPayload() *models.StatusResponse {
	return o.Payload
}

func (o *GetStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStatusBadRequest creates a GetStatusBadRequest with default headers values
func NewGetStatusBadRequest() *GetStatusBadRequest {
	return &GetStatusBadRequest{}
}

/* GetStatusBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetStatusBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get status bad request response has a 2xx status code
func (o *GetStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get status bad request response has a 3xx status code
func (o *GetStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get status bad request response has a 4xx status code
func (o *GetStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get status bad request response has a 5xx status code
func (o *GetStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get status bad request response a status code equal to that given
func (o *GetStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /breakglass][%d] getStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /breakglass][%d] getStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetStatusBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStatusUnauthorized creates a GetStatusUnauthorized with default headers values
func NewGetStatusUnauthorized() *GetStatusUnauthorized {
	return &GetStatusUnauthorized{}
}

/* GetStatusUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetStatusUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get status unauthorized response has a 2xx status code
func (o *GetStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get status unauthorized response has a 3xx status code
func (o *GetStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get status unauthorized response has a 4xx status code
func (o *GetStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get status unauthorized response has a 5xx status code
func (o *GetStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get status unauthorized response a status code equal to that given
func (o *GetStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /breakglass][%d] getStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /breakglass][%d] getStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetStatusUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStatusForbidden creates a GetStatusForbidden with default headers values
func NewGetStatusForbidden() *GetStatusForbidden {
	return &GetStatusForbidden{}
}

/* GetStatusForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetStatusForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get status forbidden response has a 2xx status code
func (o *GetStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get status forbidden response has a 3xx status code
func (o *GetStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get status forbidden response has a 4xx status code
func (o *GetStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get status forbidden response has a 5xx status code
func (o *GetStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get status forbidden response a status code equal to that given
func (o *GetStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /breakglass][%d] getStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetStatusForbidden) String() string {
	return fmt.Sprintf("[GET /breakglass][%d] getStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetStatusForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
