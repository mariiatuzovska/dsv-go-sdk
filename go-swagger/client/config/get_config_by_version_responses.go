// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetConfigByVersionReader is a Reader for the GetConfigByVersion structure.
type GetConfigByVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConfigByVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConfigByVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConfigByVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConfigByVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConfigByVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConfigByVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConfigByVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConfigByVersionOK creates a GetConfigByVersionOK with default headers values
func NewGetConfigByVersionOK() *GetConfigByVersionOK {
	return &GetConfigByVersionOK{}
}

/* GetConfigByVersionOK describes a response with status code 200, with default header values.

no error
*/
type GetConfigByVersionOK struct {
	Payload *models.DocumentVersion
}

// IsSuccess returns true when this get config by version o k response has a 2xx status code
func (o *GetConfigByVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get config by version o k response has a 3xx status code
func (o *GetConfigByVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get config by version o k response has a 4xx status code
func (o *GetConfigByVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get config by version o k response has a 5xx status code
func (o *GetConfigByVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get config by version o k response a status code equal to that given
func (o *GetConfigByVersionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetConfigByVersionOK) Error() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionOK  %+v", 200, o.Payload)
}

func (o *GetConfigByVersionOK) String() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionOK  %+v", 200, o.Payload)
}

func (o *GetConfigByVersionOK) GetPayload() *models.DocumentVersion {
	return o.Payload
}

func (o *GetConfigByVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DocumentVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigByVersionBadRequest creates a GetConfigByVersionBadRequest with default headers values
func NewGetConfigByVersionBadRequest() *GetConfigByVersionBadRequest {
	return &GetConfigByVersionBadRequest{}
}

/* GetConfigByVersionBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetConfigByVersionBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get config by version bad request response has a 2xx status code
func (o *GetConfigByVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get config by version bad request response has a 3xx status code
func (o *GetConfigByVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get config by version bad request response has a 4xx status code
func (o *GetConfigByVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get config by version bad request response has a 5xx status code
func (o *GetConfigByVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get config by version bad request response a status code equal to that given
func (o *GetConfigByVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetConfigByVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetConfigByVersionBadRequest) String() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetConfigByVersionBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetConfigByVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigByVersionUnauthorized creates a GetConfigByVersionUnauthorized with default headers values
func NewGetConfigByVersionUnauthorized() *GetConfigByVersionUnauthorized {
	return &GetConfigByVersionUnauthorized{}
}

/* GetConfigByVersionUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetConfigByVersionUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get config by version unauthorized response has a 2xx status code
func (o *GetConfigByVersionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get config by version unauthorized response has a 3xx status code
func (o *GetConfigByVersionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get config by version unauthorized response has a 4xx status code
func (o *GetConfigByVersionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get config by version unauthorized response has a 5xx status code
func (o *GetConfigByVersionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get config by version unauthorized response a status code equal to that given
func (o *GetConfigByVersionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetConfigByVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConfigByVersionUnauthorized) String() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConfigByVersionUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetConfigByVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigByVersionForbidden creates a GetConfigByVersionForbidden with default headers values
func NewGetConfigByVersionForbidden() *GetConfigByVersionForbidden {
	return &GetConfigByVersionForbidden{}
}

/* GetConfigByVersionForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetConfigByVersionForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get config by version forbidden response has a 2xx status code
func (o *GetConfigByVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get config by version forbidden response has a 3xx status code
func (o *GetConfigByVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get config by version forbidden response has a 4xx status code
func (o *GetConfigByVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get config by version forbidden response has a 5xx status code
func (o *GetConfigByVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get config by version forbidden response a status code equal to that given
func (o *GetConfigByVersionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetConfigByVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetConfigByVersionForbidden) String() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetConfigByVersionForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetConfigByVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigByVersionNotFound creates a GetConfigByVersionNotFound with default headers values
func NewGetConfigByVersionNotFound() *GetConfigByVersionNotFound {
	return &GetConfigByVersionNotFound{}
}

/* GetConfigByVersionNotFound describes a response with status code 404, with default header values.

not found
*/
type GetConfigByVersionNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get config by version not found response has a 2xx status code
func (o *GetConfigByVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get config by version not found response has a 3xx status code
func (o *GetConfigByVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get config by version not found response has a 4xx status code
func (o *GetConfigByVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get config by version not found response has a 5xx status code
func (o *GetConfigByVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get config by version not found response a status code equal to that given
func (o *GetConfigByVersionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetConfigByVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetConfigByVersionNotFound) String() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetConfigByVersionNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetConfigByVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigByVersionInternalServerError creates a GetConfigByVersionInternalServerError with default headers values
func NewGetConfigByVersionInternalServerError() *GetConfigByVersionInternalServerError {
	return &GetConfigByVersionInternalServerError{}
}

/* GetConfigByVersionInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetConfigByVersionInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get config by version internal server error response has a 2xx status code
func (o *GetConfigByVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get config by version internal server error response has a 3xx status code
func (o *GetConfigByVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get config by version internal server error response has a 4xx status code
func (o *GetConfigByVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get config by version internal server error response has a 5xx status code
func (o *GetConfigByVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get config by version internal server error response a status code equal to that given
func (o *GetConfigByVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetConfigByVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConfigByVersionInternalServerError) String() string {
	return fmt.Sprintf("[GET /config/version/{version}][%d] getConfigByVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConfigByVersionInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetConfigByVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
