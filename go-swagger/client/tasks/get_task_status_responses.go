// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetTaskStatusReader is a Reader for the GetTaskStatus structure.
type GetTaskStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTaskStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTaskStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTaskStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTaskStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTaskStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTaskStatusOK creates a GetTaskStatusOK with default headers values
func NewGetTaskStatusOK() *GetTaskStatusOK {
	return &GetTaskStatusOK{}
}

/* GetTaskStatusOK describes a response with status code 200, with default header values.

no error
*/
type GetTaskStatusOK struct {
	Payload *models.TaskState
}

// IsSuccess returns true when this get task status o k response has a 2xx status code
func (o *GetTaskStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get task status o k response has a 3xx status code
func (o *GetTaskStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task status o k response has a 4xx status code
func (o *GetTaskStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get task status o k response has a 5xx status code
func (o *GetTaskStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get task status o k response a status code equal to that given
func (o *GetTaskStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetTaskStatusOK) Error() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusOK  %+v", 200, o.Payload)
}

func (o *GetTaskStatusOK) String() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusOK  %+v", 200, o.Payload)
}

func (o *GetTaskStatusOK) GetPayload() *models.TaskState {
	return o.Payload
}

func (o *GetTaskStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskState)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskStatusBadRequest creates a GetTaskStatusBadRequest with default headers values
func NewGetTaskStatusBadRequest() *GetTaskStatusBadRequest {
	return &GetTaskStatusBadRequest{}
}

/* GetTaskStatusBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetTaskStatusBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get task status bad request response has a 2xx status code
func (o *GetTaskStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task status bad request response has a 3xx status code
func (o *GetTaskStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task status bad request response has a 4xx status code
func (o *GetTaskStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task status bad request response has a 5xx status code
func (o *GetTaskStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get task status bad request response a status code equal to that given
func (o *GetTaskStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetTaskStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetTaskStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetTaskStatusBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetTaskStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskStatusUnauthorized creates a GetTaskStatusUnauthorized with default headers values
func NewGetTaskStatusUnauthorized() *GetTaskStatusUnauthorized {
	return &GetTaskStatusUnauthorized{}
}

/* GetTaskStatusUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetTaskStatusUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get task status unauthorized response has a 2xx status code
func (o *GetTaskStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task status unauthorized response has a 3xx status code
func (o *GetTaskStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task status unauthorized response has a 4xx status code
func (o *GetTaskStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task status unauthorized response has a 5xx status code
func (o *GetTaskStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get task status unauthorized response a status code equal to that given
func (o *GetTaskStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetTaskStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTaskStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTaskStatusUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetTaskStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskStatusForbidden creates a GetTaskStatusForbidden with default headers values
func NewGetTaskStatusForbidden() *GetTaskStatusForbidden {
	return &GetTaskStatusForbidden{}
}

/* GetTaskStatusForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetTaskStatusForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get task status forbidden response has a 2xx status code
func (o *GetTaskStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task status forbidden response has a 3xx status code
func (o *GetTaskStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task status forbidden response has a 4xx status code
func (o *GetTaskStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task status forbidden response has a 5xx status code
func (o *GetTaskStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get task status forbidden response a status code equal to that given
func (o *GetTaskStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetTaskStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetTaskStatusForbidden) String() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetTaskStatusForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetTaskStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskStatusInternalServerError creates a GetTaskStatusInternalServerError with default headers values
func NewGetTaskStatusInternalServerError() *GetTaskStatusInternalServerError {
	return &GetTaskStatusInternalServerError{}
}

/* GetTaskStatusInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetTaskStatusInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get task status internal server error response has a 2xx status code
func (o *GetTaskStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task status internal server error response has a 3xx status code
func (o *GetTaskStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task status internal server error response has a 4xx status code
func (o *GetTaskStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get task status internal server error response has a 5xx status code
func (o *GetTaskStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get task status internal server error response a status code equal to that given
func (o *GetTaskStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetTaskStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTaskStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /task/status/{id}][%d] getTaskStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTaskStatusInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetTaskStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
