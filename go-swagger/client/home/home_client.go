// Code generated by go-swagger; DO NOT EDIT.

package home

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new home API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for home API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateHomeSecret(params *CreateHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateHomeSecretCreated, error)

	DeleteHomeSecret(params *DeleteHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteHomeSecretOK, *DeleteHomeSecretNoContent, error)

	GetHomeSecret(params *GetHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHomeSecretOK, error)

	GetHomeSecretByVersion(params *GetHomeSecretByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHomeSecretByVersionOK, error)

	GetHomeSecretDescription(params *GetHomeSecretDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHomeSecretDescriptionOK, error)

	RestoreHomeSecret(params *RestoreHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreHomeSecretOK, error)

	RollbackHomeSecret(params *RollbackHomeSecretParams, opts ...ClientOption) (*RollbackHomeSecretOK, error)

	SearchHomeSecrets(params *SearchHomeSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchHomeSecretsOK, error)

	UpdateHomeSecret(params *UpdateHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateHomeSecretOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateHomeSecret creates home secrets

  Creates a new home secret.
*/
func (a *Client) CreateHomeSecret(params *CreateHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateHomeSecretCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHomeSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createHomeSecret",
		Method:             "POST",
		PathPattern:        "/home/{principalName}/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHomeSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHomeSecretCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createHomeSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteHomeSecret deletes home secret

  Deletes a home secret by path or by id in the query.
*/
func (a *Client) DeleteHomeSecret(params *DeleteHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteHomeSecretOK, *DeleteHomeSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHomeSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteHomeSecret",
		Method:             "DELETE",
		PathPattern:        "/home/{principalName}/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHomeSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteHomeSecretOK:
		return value, nil, nil
	case *DeleteHomeSecretNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for home: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHomeSecret gets home

  Gets a full home secret by path or by id in the query.
*/
func (a *Client) GetHomeSecret(params *GetHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHomeSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHomeSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHomeSecret",
		Method:             "GET",
		PathPattern:        "/home/{principalName}/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHomeSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHomeSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHomeSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHomeSecretByVersion gets home secret by version

  Gets a full home secret by path and version in the query.
*/
func (a *Client) GetHomeSecretByVersion(params *GetHomeSecretByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHomeSecretByVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHomeSecretByVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHomeSecretByVersion",
		Method:             "GET",
		PathPattern:        "/home/{principalName}/{path}/version/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHomeSecretByVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHomeSecretByVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHomeSecretByVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHomeSecretDescription gets home secret description

  Gets a home secret's metadata without returning the sensitive data.
*/
func (a *Client) GetHomeSecretDescription(params *GetHomeSecretDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHomeSecretDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHomeSecretDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHomeSecretDescription",
		Method:             "GET",
		PathPattern:        "/home/{principalName}/{path}::description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHomeSecretDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHomeSecretDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHomeSecretDescription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestoreHomeSecret restores home secret

  Restores a home secret by path or by id in the query.
*/
func (a *Client) RestoreHomeSecret(params *RestoreHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreHomeSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreHomeSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreHomeSecret",
		Method:             "GET",
		PathPattern:        "/home/{principalName}/{path}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreHomeSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreHomeSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restoreHomeSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackHomeSecret rollbacks a home secret

  Rollbacks a Home Secret to a previous version.
*/
func (a *Client) RollbackHomeSecret(params *RollbackHomeSecretParams, opts ...ClientOption) (*RollbackHomeSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackHomeSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rollbackHomeSecret",
		Method:             "PUT",
		PathPattern:        "/home/{principalName}/{path}/rollback/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RollbackHomeSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackHomeSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rollbackHomeSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchHomeSecrets searches for home secrets

  Lists home secret paths that start with the path parameter.
*/
func (a *Client) SearchHomeSecrets(params *SearchHomeSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchHomeSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchHomeSecretsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchHomeSecrets",
		Method:             "GET",
		PathPattern:        "/home/{principalName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchHomeSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchHomeSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchHomeSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateHomeSecret updates home secret

  Updates an existing home secret.
*/
func (a *Client) UpdateHomeSecret(params *UpdateHomeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateHomeSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHomeSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateHomeSecret",
		Method:             "PUT",
		PathPattern:        "/home/{principalName}/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHomeSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHomeSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateHomeSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
