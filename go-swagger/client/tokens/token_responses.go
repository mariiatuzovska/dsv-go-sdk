// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// TokenReader is a Reader for the Token structure.
type TokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTokenOK creates a TokenOK with default headers values
func NewTokenOK() *TokenOK {
	return &TokenOK{}
}

/* TokenOK describes a response with status code 200, with default header values.

Successful authentication response
*/
type TokenOK struct {
	Payload *models.AccessTokenResponse
}

// IsSuccess returns true when this token o k response has a 2xx status code
func (o *TokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this token o k response has a 3xx status code
func (o *TokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token o k response has a 4xx status code
func (o *TokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this token o k response has a 5xx status code
func (o *TokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this token o k response a status code equal to that given
func (o *TokenOK) IsCode(code int) bool {
	return code == 200
}

func (o *TokenOK) Error() string {
	return fmt.Sprintf("[POST /token][%d] tokenOK  %+v", 200, o.Payload)
}

func (o *TokenOK) String() string {
	return fmt.Sprintf("[POST /token][%d] tokenOK  %+v", 200, o.Payload)
}

func (o *TokenOK) GetPayload() *models.AccessTokenResponse {
	return o.Payload
}

func (o *TokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccessTokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenBadRequest creates a TokenBadRequest with default headers values
func NewTokenBadRequest() *TokenBadRequest {
	return &TokenBadRequest{}
}

/* TokenBadRequest describes a response with status code 400, with default header values.

bad request
*/
type TokenBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this token bad request response has a 2xx status code
func (o *TokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token bad request response has a 3xx status code
func (o *TokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token bad request response has a 4xx status code
func (o *TokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this token bad request response has a 5xx status code
func (o *TokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this token bad request response a status code equal to that given
func (o *TokenBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *TokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /token][%d] tokenBadRequest  %+v", 400, o.Payload)
}

func (o *TokenBadRequest) String() string {
	return fmt.Sprintf("[POST /token][%d] tokenBadRequest  %+v", 400, o.Payload)
}

func (o *TokenBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *TokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenUnauthorized creates a TokenUnauthorized with default headers values
func NewTokenUnauthorized() *TokenUnauthorized {
	return &TokenUnauthorized{}
}

/* TokenUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type TokenUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this token unauthorized response has a 2xx status code
func (o *TokenUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token unauthorized response has a 3xx status code
func (o *TokenUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token unauthorized response has a 4xx status code
func (o *TokenUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this token unauthorized response has a 5xx status code
func (o *TokenUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this token unauthorized response a status code equal to that given
func (o *TokenUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *TokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /token][%d] tokenUnauthorized  %+v", 401, o.Payload)
}

func (o *TokenUnauthorized) String() string {
	return fmt.Sprintf("[POST /token][%d] tokenUnauthorized  %+v", 401, o.Payload)
}

func (o *TokenUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *TokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenInternalServerError creates a TokenInternalServerError with default headers values
func NewTokenInternalServerError() *TokenInternalServerError {
	return &TokenInternalServerError{}
}

/* TokenInternalServerError describes a response with status code 500, with default header values.

server error
*/
type TokenInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this token internal server error response has a 2xx status code
func (o *TokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token internal server error response has a 3xx status code
func (o *TokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token internal server error response has a 4xx status code
func (o *TokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this token internal server error response has a 5xx status code
func (o *TokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this token internal server error response a status code equal to that given
func (o *TokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *TokenInternalServerError) Error() string {
	return fmt.Sprintf("[POST /token][%d] tokenInternalServerError  %+v", 500, o.Payload)
}

func (o *TokenInternalServerError) String() string {
	return fmt.Sprintf("[POST /token][%d] tokenInternalServerError  %+v", 500, o.Payload)
}

func (o *TokenInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *TokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
