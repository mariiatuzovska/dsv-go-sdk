// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// RevokeReader is a Reader for the Revoke structure.
type RevokeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRevokeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRevokeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRevokeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRevokeNoContent creates a RevokeNoContent with default headers values
func NewRevokeNoContent() *RevokeNoContent {
	return &RevokeNoContent{}
}

/* RevokeNoContent describes a response with status code 204, with default header values.

no error
*/
type RevokeNoContent struct {
}

// IsSuccess returns true when this revoke no content response has a 2xx status code
func (o *RevokeNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this revoke no content response has a 3xx status code
func (o *RevokeNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke no content response has a 4xx status code
func (o *RevokeNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke no content response has a 5xx status code
func (o *RevokeNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke no content response a status code equal to that given
func (o *RevokeNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *RevokeNoContent) Error() string {
	return fmt.Sprintf("[POST /revoke/{refreshtoken}][%d] revokeNoContent ", 204)
}

func (o *RevokeNoContent) String() string {
	return fmt.Sprintf("[POST /revoke/{refreshtoken}][%d] revokeNoContent ", 204)
}

func (o *RevokeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevokeBadRequest creates a RevokeBadRequest with default headers values
func NewRevokeBadRequest() *RevokeBadRequest {
	return &RevokeBadRequest{}
}

/* RevokeBadRequest describes a response with status code 400, with default header values.

bad request
*/
type RevokeBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this revoke bad request response has a 2xx status code
func (o *RevokeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke bad request response has a 3xx status code
func (o *RevokeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke bad request response has a 4xx status code
func (o *RevokeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke bad request response has a 5xx status code
func (o *RevokeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke bad request response a status code equal to that given
func (o *RevokeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RevokeBadRequest) Error() string {
	return fmt.Sprintf("[POST /revoke/{refreshtoken}][%d] revokeBadRequest  %+v", 400, o.Payload)
}

func (o *RevokeBadRequest) String() string {
	return fmt.Sprintf("[POST /revoke/{refreshtoken}][%d] revokeBadRequest  %+v", 400, o.Payload)
}

func (o *RevokeBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RevokeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeInternalServerError creates a RevokeInternalServerError with default headers values
func NewRevokeInternalServerError() *RevokeInternalServerError {
	return &RevokeInternalServerError{}
}

/* RevokeInternalServerError describes a response with status code 500, with default header values.

server error
*/
type RevokeInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this revoke internal server error response has a 2xx status code
func (o *RevokeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke internal server error response has a 3xx status code
func (o *RevokeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke internal server error response has a 4xx status code
func (o *RevokeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke internal server error response has a 5xx status code
func (o *RevokeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this revoke internal server error response a status code equal to that given
func (o *RevokeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RevokeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /revoke/{refreshtoken}][%d] revokeInternalServerError  %+v", 500, o.Payload)
}

func (o *RevokeInternalServerError) String() string {
	return fmt.Sprintf("[POST /revoke/{refreshtoken}][%d] revokeInternalServerError  %+v", 500, o.Payload)
}

func (o *RevokeInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RevokeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
