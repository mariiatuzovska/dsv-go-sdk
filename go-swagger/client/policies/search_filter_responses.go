// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// SearchFilterReader is a Reader for the SearchFilter structure.
type SearchFilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchFilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchFilterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchFilterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchFilterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchFilterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchFilterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchFilterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchFilterOK creates a SearchFilterOK with default headers values
func NewSearchFilterOK() *SearchFilterOK {
	return &SearchFilterOK{}
}

/* SearchFilterOK describes a response with status code 200, with default header values.

no error
*/
type SearchFilterOK struct {
	Payload *models.PolicySearchResponse
}

// IsSuccess returns true when this search filter o k response has a 2xx status code
func (o *SearchFilterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search filter o k response has a 3xx status code
func (o *SearchFilterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search filter o k response has a 4xx status code
func (o *SearchFilterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search filter o k response has a 5xx status code
func (o *SearchFilterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search filter o k response a status code equal to that given
func (o *SearchFilterOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchFilterOK) Error() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterOK  %+v", 200, o.Payload)
}

func (o *SearchFilterOK) String() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterOK  %+v", 200, o.Payload)
}

func (o *SearchFilterOK) GetPayload() *models.PolicySearchResponse {
	return o.Payload
}

func (o *SearchFilterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PolicySearchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchFilterBadRequest creates a SearchFilterBadRequest with default headers values
func NewSearchFilterBadRequest() *SearchFilterBadRequest {
	return &SearchFilterBadRequest{}
}

/* SearchFilterBadRequest describes a response with status code 400, with default header values.

bad request
*/
type SearchFilterBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this search filter bad request response has a 2xx status code
func (o *SearchFilterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search filter bad request response has a 3xx status code
func (o *SearchFilterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search filter bad request response has a 4xx status code
func (o *SearchFilterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search filter bad request response has a 5xx status code
func (o *SearchFilterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search filter bad request response a status code equal to that given
func (o *SearchFilterBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchFilterBadRequest) Error() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterBadRequest  %+v", 400, o.Payload)
}

func (o *SearchFilterBadRequest) String() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterBadRequest  %+v", 400, o.Payload)
}

func (o *SearchFilterBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SearchFilterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchFilterUnauthorized creates a SearchFilterUnauthorized with default headers values
func NewSearchFilterUnauthorized() *SearchFilterUnauthorized {
	return &SearchFilterUnauthorized{}
}

/* SearchFilterUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type SearchFilterUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this search filter unauthorized response has a 2xx status code
func (o *SearchFilterUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search filter unauthorized response has a 3xx status code
func (o *SearchFilterUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search filter unauthorized response has a 4xx status code
func (o *SearchFilterUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search filter unauthorized response has a 5xx status code
func (o *SearchFilterUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search filter unauthorized response a status code equal to that given
func (o *SearchFilterUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchFilterUnauthorized) Error() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchFilterUnauthorized) String() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchFilterUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SearchFilterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchFilterForbidden creates a SearchFilterForbidden with default headers values
func NewSearchFilterForbidden() *SearchFilterForbidden {
	return &SearchFilterForbidden{}
}

/* SearchFilterForbidden describes a response with status code 403, with default header values.

forbidden
*/
type SearchFilterForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this search filter forbidden response has a 2xx status code
func (o *SearchFilterForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search filter forbidden response has a 3xx status code
func (o *SearchFilterForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search filter forbidden response has a 4xx status code
func (o *SearchFilterForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search filter forbidden response has a 5xx status code
func (o *SearchFilterForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search filter forbidden response a status code equal to that given
func (o *SearchFilterForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchFilterForbidden) Error() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterForbidden  %+v", 403, o.Payload)
}

func (o *SearchFilterForbidden) String() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterForbidden  %+v", 403, o.Payload)
}

func (o *SearchFilterForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SearchFilterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchFilterNotFound creates a SearchFilterNotFound with default headers values
func NewSearchFilterNotFound() *SearchFilterNotFound {
	return &SearchFilterNotFound{}
}

/* SearchFilterNotFound describes a response with status code 404, with default header values.

not found
*/
type SearchFilterNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this search filter not found response has a 2xx status code
func (o *SearchFilterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search filter not found response has a 3xx status code
func (o *SearchFilterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search filter not found response has a 4xx status code
func (o *SearchFilterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search filter not found response has a 5xx status code
func (o *SearchFilterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search filter not found response a status code equal to that given
func (o *SearchFilterNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchFilterNotFound) Error() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterNotFound  %+v", 404, o.Payload)
}

func (o *SearchFilterNotFound) String() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterNotFound  %+v", 404, o.Payload)
}

func (o *SearchFilterNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SearchFilterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchFilterInternalServerError creates a SearchFilterInternalServerError with default headers values
func NewSearchFilterInternalServerError() *SearchFilterInternalServerError {
	return &SearchFilterInternalServerError{}
}

/* SearchFilterInternalServerError describes a response with status code 500, with default header values.

server error
*/
type SearchFilterInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this search filter internal server error response has a 2xx status code
func (o *SearchFilterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search filter internal server error response has a 3xx status code
func (o *SearchFilterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search filter internal server error response has a 4xx status code
func (o *SearchFilterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search filter internal server error response has a 5xx status code
func (o *SearchFilterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search filter internal server error response a status code equal to that given
func (o *SearchFilterInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchFilterInternalServerError) Error() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchFilterInternalServerError) String() string {
	return fmt.Sprintf("[GET /config/policies][%d] searchFilterInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchFilterInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SearchFilterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
