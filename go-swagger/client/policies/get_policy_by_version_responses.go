// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetPolicyByVersionReader is a Reader for the GetPolicyByVersion structure.
type GetPolicyByVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPolicyByVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPolicyByVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPolicyByVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPolicyByVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPolicyByVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPolicyByVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPolicyByVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPolicyByVersionOK creates a GetPolicyByVersionOK with default headers values
func NewGetPolicyByVersionOK() *GetPolicyByVersionOK {
	return &GetPolicyByVersionOK{}
}

/* GetPolicyByVersionOK describes a response with status code 200, with default header values.

no error
*/
type GetPolicyByVersionOK struct {
	Payload *models.PolicyVersionResponse
}

// IsSuccess returns true when this get policy by version o k response has a 2xx status code
func (o *GetPolicyByVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get policy by version o k response has a 3xx status code
func (o *GetPolicyByVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy by version o k response has a 4xx status code
func (o *GetPolicyByVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get policy by version o k response has a 5xx status code
func (o *GetPolicyByVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy by version o k response a status code equal to that given
func (o *GetPolicyByVersionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetPolicyByVersionOK) Error() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionOK  %+v", 200, o.Payload)
}

func (o *GetPolicyByVersionOK) String() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionOK  %+v", 200, o.Payload)
}

func (o *GetPolicyByVersionOK) GetPayload() *models.PolicyVersionResponse {
	return o.Payload
}

func (o *GetPolicyByVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PolicyVersionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyByVersionBadRequest creates a GetPolicyByVersionBadRequest with default headers values
func NewGetPolicyByVersionBadRequest() *GetPolicyByVersionBadRequest {
	return &GetPolicyByVersionBadRequest{}
}

/* GetPolicyByVersionBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetPolicyByVersionBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get policy by version bad request response has a 2xx status code
func (o *GetPolicyByVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy by version bad request response has a 3xx status code
func (o *GetPolicyByVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy by version bad request response has a 4xx status code
func (o *GetPolicyByVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy by version bad request response has a 5xx status code
func (o *GetPolicyByVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy by version bad request response a status code equal to that given
func (o *GetPolicyByVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetPolicyByVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetPolicyByVersionBadRequest) String() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetPolicyByVersionBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetPolicyByVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyByVersionUnauthorized creates a GetPolicyByVersionUnauthorized with default headers values
func NewGetPolicyByVersionUnauthorized() *GetPolicyByVersionUnauthorized {
	return &GetPolicyByVersionUnauthorized{}
}

/* GetPolicyByVersionUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetPolicyByVersionUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get policy by version unauthorized response has a 2xx status code
func (o *GetPolicyByVersionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy by version unauthorized response has a 3xx status code
func (o *GetPolicyByVersionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy by version unauthorized response has a 4xx status code
func (o *GetPolicyByVersionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy by version unauthorized response has a 5xx status code
func (o *GetPolicyByVersionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy by version unauthorized response a status code equal to that given
func (o *GetPolicyByVersionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetPolicyByVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPolicyByVersionUnauthorized) String() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPolicyByVersionUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetPolicyByVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyByVersionForbidden creates a GetPolicyByVersionForbidden with default headers values
func NewGetPolicyByVersionForbidden() *GetPolicyByVersionForbidden {
	return &GetPolicyByVersionForbidden{}
}

/* GetPolicyByVersionForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetPolicyByVersionForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get policy by version forbidden response has a 2xx status code
func (o *GetPolicyByVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy by version forbidden response has a 3xx status code
func (o *GetPolicyByVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy by version forbidden response has a 4xx status code
func (o *GetPolicyByVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy by version forbidden response has a 5xx status code
func (o *GetPolicyByVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy by version forbidden response a status code equal to that given
func (o *GetPolicyByVersionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetPolicyByVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetPolicyByVersionForbidden) String() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetPolicyByVersionForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetPolicyByVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyByVersionNotFound creates a GetPolicyByVersionNotFound with default headers values
func NewGetPolicyByVersionNotFound() *GetPolicyByVersionNotFound {
	return &GetPolicyByVersionNotFound{}
}

/* GetPolicyByVersionNotFound describes a response with status code 404, with default header values.

not found
*/
type GetPolicyByVersionNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get policy by version not found response has a 2xx status code
func (o *GetPolicyByVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy by version not found response has a 3xx status code
func (o *GetPolicyByVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy by version not found response has a 4xx status code
func (o *GetPolicyByVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy by version not found response has a 5xx status code
func (o *GetPolicyByVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy by version not found response a status code equal to that given
func (o *GetPolicyByVersionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetPolicyByVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetPolicyByVersionNotFound) String() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetPolicyByVersionNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetPolicyByVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyByVersionInternalServerError creates a GetPolicyByVersionInternalServerError with default headers values
func NewGetPolicyByVersionInternalServerError() *GetPolicyByVersionInternalServerError {
	return &GetPolicyByVersionInternalServerError{}
}

/* GetPolicyByVersionInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetPolicyByVersionInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get policy by version internal server error response has a 2xx status code
func (o *GetPolicyByVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy by version internal server error response has a 3xx status code
func (o *GetPolicyByVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy by version internal server error response has a 4xx status code
func (o *GetPolicyByVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get policy by version internal server error response has a 5xx status code
func (o *GetPolicyByVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get policy by version internal server error response a status code equal to that given
func (o *GetPolicyByVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetPolicyByVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPolicyByVersionInternalServerError) String() string {
	return fmt.Sprintf("[GET /config/policies/{path}/version/{version}][%d] getPolicyByVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPolicyByVersionInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetPolicyByVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
