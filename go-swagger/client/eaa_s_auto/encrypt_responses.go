// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_auto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// EncryptReader is a Reader for the Encrypt structure.
type EncryptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EncryptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewEncryptCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEncryptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEncryptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEncryptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEncryptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEncryptCreated creates a EncryptCreated with default headers values
func NewEncryptCreated() *EncryptCreated {
	return &EncryptCreated{}
}

/* EncryptCreated describes a response with status code 201, with default header values.

no error
*/
type EncryptCreated struct {
	Payload *models.EncryptionResponse
}

// IsSuccess returns true when this encrypt created response has a 2xx status code
func (o *EncryptCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this encrypt created response has a 3xx status code
func (o *EncryptCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt created response has a 4xx status code
func (o *EncryptCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this encrypt created response has a 5xx status code
func (o *EncryptCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this encrypt created response a status code equal to that given
func (o *EncryptCreated) IsCode(code int) bool {
	return code == 201
}

func (o *EncryptCreated) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptCreated  %+v", 201, o.Payload)
}

func (o *EncryptCreated) String() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptCreated  %+v", 201, o.Payload)
}

func (o *EncryptCreated) GetPayload() *models.EncryptionResponse {
	return o.Payload
}

func (o *EncryptCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptBadRequest creates a EncryptBadRequest with default headers values
func NewEncryptBadRequest() *EncryptBadRequest {
	return &EncryptBadRequest{}
}

/* EncryptBadRequest describes a response with status code 400, with default header values.

bad request
*/
type EncryptBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this encrypt bad request response has a 2xx status code
func (o *EncryptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this encrypt bad request response has a 3xx status code
func (o *EncryptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt bad request response has a 4xx status code
func (o *EncryptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this encrypt bad request response has a 5xx status code
func (o *EncryptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this encrypt bad request response a status code equal to that given
func (o *EncryptBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *EncryptBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptBadRequest  %+v", 400, o.Payload)
}

func (o *EncryptBadRequest) String() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptBadRequest  %+v", 400, o.Payload)
}

func (o *EncryptBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *EncryptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptUnauthorized creates a EncryptUnauthorized with default headers values
func NewEncryptUnauthorized() *EncryptUnauthorized {
	return &EncryptUnauthorized{}
}

/* EncryptUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type EncryptUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this encrypt unauthorized response has a 2xx status code
func (o *EncryptUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this encrypt unauthorized response has a 3xx status code
func (o *EncryptUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt unauthorized response has a 4xx status code
func (o *EncryptUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this encrypt unauthorized response has a 5xx status code
func (o *EncryptUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this encrypt unauthorized response a status code equal to that given
func (o *EncryptUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *EncryptUnauthorized) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptUnauthorized  %+v", 401, o.Payload)
}

func (o *EncryptUnauthorized) String() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptUnauthorized  %+v", 401, o.Payload)
}

func (o *EncryptUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *EncryptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptForbidden creates a EncryptForbidden with default headers values
func NewEncryptForbidden() *EncryptForbidden {
	return &EncryptForbidden{}
}

/* EncryptForbidden describes a response with status code 403, with default header values.

forbidden
*/
type EncryptForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this encrypt forbidden response has a 2xx status code
func (o *EncryptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this encrypt forbidden response has a 3xx status code
func (o *EncryptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt forbidden response has a 4xx status code
func (o *EncryptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this encrypt forbidden response has a 5xx status code
func (o *EncryptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this encrypt forbidden response a status code equal to that given
func (o *EncryptForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *EncryptForbidden) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptForbidden  %+v", 403, o.Payload)
}

func (o *EncryptForbidden) String() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptForbidden  %+v", 403, o.Payload)
}

func (o *EncryptForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *EncryptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptInternalServerError creates a EncryptInternalServerError with default headers values
func NewEncryptInternalServerError() *EncryptInternalServerError {
	return &EncryptInternalServerError{}
}

/* EncryptInternalServerError describes a response with status code 500, with default header values.

server error
*/
type EncryptInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this encrypt internal server error response has a 2xx status code
func (o *EncryptInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this encrypt internal server error response has a 3xx status code
func (o *EncryptInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt internal server error response has a 4xx status code
func (o *EncryptInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this encrypt internal server error response has a 5xx status code
func (o *EncryptInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this encrypt internal server error response a status code equal to that given
func (o *EncryptInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *EncryptInternalServerError) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptInternalServerError  %+v", 500, o.Payload)
}

func (o *EncryptInternalServerError) String() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptInternalServerError  %+v", 500, o.Payload)
}

func (o *EncryptInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *EncryptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
