// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_auto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// DeleteKeyReader is a Reader for the DeleteKey structure.
type DeleteKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteKeyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteKeyOK creates a DeleteKeyOK with default headers values
func NewDeleteKeyOK() *DeleteKeyOK {
	return &DeleteKeyOK{}
}

/* DeleteKeyOK describes a response with status code 200, with default header values.

no error
*/
type DeleteKeyOK struct {
	Payload *models.MessageResponse
}

// IsSuccess returns true when this delete key o k response has a 2xx status code
func (o *DeleteKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete key o k response has a 3xx status code
func (o *DeleteKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key o k response has a 4xx status code
func (o *DeleteKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete key o k response has a 5xx status code
func (o *DeleteKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key o k response a status code equal to that given
func (o *DeleteKeyOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteKeyOK) Error() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyOK  %+v", 200, o.Payload)
}

func (o *DeleteKeyOK) String() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyOK  %+v", 200, o.Payload)
}

func (o *DeleteKeyOK) GetPayload() *models.MessageResponse {
	return o.Payload
}

func (o *DeleteKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKeyNoContent creates a DeleteKeyNoContent with default headers values
func NewDeleteKeyNoContent() *DeleteKeyNoContent {
	return &DeleteKeyNoContent{}
}

/* DeleteKeyNoContent describes a response with status code 204, with default header values.

no error
*/
type DeleteKeyNoContent struct {
}

// IsSuccess returns true when this delete key no content response has a 2xx status code
func (o *DeleteKeyNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete key no content response has a 3xx status code
func (o *DeleteKeyNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key no content response has a 4xx status code
func (o *DeleteKeyNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete key no content response has a 5xx status code
func (o *DeleteKeyNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key no content response a status code equal to that given
func (o *DeleteKeyNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteKeyNoContent) Error() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyNoContent ", 204)
}

func (o *DeleteKeyNoContent) String() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyNoContent ", 204)
}

func (o *DeleteKeyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteKeyBadRequest creates a DeleteKeyBadRequest with default headers values
func NewDeleteKeyBadRequest() *DeleteKeyBadRequest {
	return &DeleteKeyBadRequest{}
}

/* DeleteKeyBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DeleteKeyBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete key bad request response has a 2xx status code
func (o *DeleteKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete key bad request response has a 3xx status code
func (o *DeleteKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key bad request response has a 4xx status code
func (o *DeleteKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete key bad request response has a 5xx status code
func (o *DeleteKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key bad request response a status code equal to that given
func (o *DeleteKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteKeyBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteKeyBadRequest) String() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteKeyBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKeyUnauthorized creates a DeleteKeyUnauthorized with default headers values
func NewDeleteKeyUnauthorized() *DeleteKeyUnauthorized {
	return &DeleteKeyUnauthorized{}
}

/* DeleteKeyUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DeleteKeyUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete key unauthorized response has a 2xx status code
func (o *DeleteKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete key unauthorized response has a 3xx status code
func (o *DeleteKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key unauthorized response has a 4xx status code
func (o *DeleteKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete key unauthorized response has a 5xx status code
func (o *DeleteKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key unauthorized response a status code equal to that given
func (o *DeleteKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteKeyUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteKeyUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteKeyUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKeyForbidden creates a DeleteKeyForbidden with default headers values
func NewDeleteKeyForbidden() *DeleteKeyForbidden {
	return &DeleteKeyForbidden{}
}

/* DeleteKeyForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DeleteKeyForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete key forbidden response has a 2xx status code
func (o *DeleteKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete key forbidden response has a 3xx status code
func (o *DeleteKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key forbidden response has a 4xx status code
func (o *DeleteKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete key forbidden response has a 5xx status code
func (o *DeleteKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key forbidden response a status code equal to that given
func (o *DeleteKeyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteKeyForbidden) Error() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyForbidden  %+v", 403, o.Payload)
}

func (o *DeleteKeyForbidden) String() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyForbidden  %+v", 403, o.Payload)
}

func (o *DeleteKeyForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKeyInternalServerError creates a DeleteKeyInternalServerError with default headers values
func NewDeleteKeyInternalServerError() *DeleteKeyInternalServerError {
	return &DeleteKeyInternalServerError{}
}

/* DeleteKeyInternalServerError describes a response with status code 500, with default header values.

server error
*/
type DeleteKeyInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete key internal server error response has a 2xx status code
func (o *DeleteKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete key internal server error response has a 3xx status code
func (o *DeleteKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key internal server error response has a 4xx status code
func (o *DeleteKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete key internal server error response has a 5xx status code
func (o *DeleteKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete key internal server error response a status code equal to that given
func (o *DeleteKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteKeyInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteKeyInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /crypto/key/{path}][%d] deleteKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteKeyInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
