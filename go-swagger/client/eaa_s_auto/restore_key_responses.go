// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_auto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// RestoreKeyReader is a Reader for the RestoreKey structure.
type RestoreKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestoreKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRestoreKeyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRestoreKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRestoreKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRestoreKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRestoreKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRestoreKeyNoContent creates a RestoreKeyNoContent with default headers values
func NewRestoreKeyNoContent() *RestoreKeyNoContent {
	return &RestoreKeyNoContent{}
}

/* RestoreKeyNoContent describes a response with status code 204, with default header values.

no error
*/
type RestoreKeyNoContent struct {
}

// IsSuccess returns true when this restore key no content response has a 2xx status code
func (o *RestoreKeyNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this restore key no content response has a 3xx status code
func (o *RestoreKeyNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore key no content response has a 4xx status code
func (o *RestoreKeyNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this restore key no content response has a 5xx status code
func (o *RestoreKeyNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this restore key no content response a status code equal to that given
func (o *RestoreKeyNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *RestoreKeyNoContent) Error() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyNoContent ", 204)
}

func (o *RestoreKeyNoContent) String() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyNoContent ", 204)
}

func (o *RestoreKeyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRestoreKeyBadRequest creates a RestoreKeyBadRequest with default headers values
func NewRestoreKeyBadRequest() *RestoreKeyBadRequest {
	return &RestoreKeyBadRequest{}
}

/* RestoreKeyBadRequest describes a response with status code 400, with default header values.

bad request
*/
type RestoreKeyBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore key bad request response has a 2xx status code
func (o *RestoreKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore key bad request response has a 3xx status code
func (o *RestoreKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore key bad request response has a 4xx status code
func (o *RestoreKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore key bad request response has a 5xx status code
func (o *RestoreKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this restore key bad request response a status code equal to that given
func (o *RestoreKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RestoreKeyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyBadRequest  %+v", 400, o.Payload)
}

func (o *RestoreKeyBadRequest) String() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyBadRequest  %+v", 400, o.Payload)
}

func (o *RestoreKeyBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreKeyUnauthorized creates a RestoreKeyUnauthorized with default headers values
func NewRestoreKeyUnauthorized() *RestoreKeyUnauthorized {
	return &RestoreKeyUnauthorized{}
}

/* RestoreKeyUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RestoreKeyUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore key unauthorized response has a 2xx status code
func (o *RestoreKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore key unauthorized response has a 3xx status code
func (o *RestoreKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore key unauthorized response has a 4xx status code
func (o *RestoreKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore key unauthorized response has a 5xx status code
func (o *RestoreKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this restore key unauthorized response a status code equal to that given
func (o *RestoreKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RestoreKeyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *RestoreKeyUnauthorized) String() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *RestoreKeyUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreKeyForbidden creates a RestoreKeyForbidden with default headers values
func NewRestoreKeyForbidden() *RestoreKeyForbidden {
	return &RestoreKeyForbidden{}
}

/* RestoreKeyForbidden describes a response with status code 403, with default header values.

forbidden
*/
type RestoreKeyForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore key forbidden response has a 2xx status code
func (o *RestoreKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore key forbidden response has a 3xx status code
func (o *RestoreKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore key forbidden response has a 4xx status code
func (o *RestoreKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore key forbidden response has a 5xx status code
func (o *RestoreKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this restore key forbidden response a status code equal to that given
func (o *RestoreKeyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RestoreKeyForbidden) Error() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyForbidden  %+v", 403, o.Payload)
}

func (o *RestoreKeyForbidden) String() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyForbidden  %+v", 403, o.Payload)
}

func (o *RestoreKeyForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreKeyInternalServerError creates a RestoreKeyInternalServerError with default headers values
func NewRestoreKeyInternalServerError() *RestoreKeyInternalServerError {
	return &RestoreKeyInternalServerError{}
}

/* RestoreKeyInternalServerError describes a response with status code 500, with default header values.

server error
*/
type RestoreKeyInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore key internal server error response has a 2xx status code
func (o *RestoreKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore key internal server error response has a 3xx status code
func (o *RestoreKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore key internal server error response has a 4xx status code
func (o *RestoreKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this restore key internal server error response has a 5xx status code
func (o *RestoreKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this restore key internal server error response a status code equal to that given
func (o *RestoreKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RestoreKeyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *RestoreKeyInternalServerError) String() string {
	return fmt.Sprintf("[PUT /crypto/key/{path}/restore][%d] restoreKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *RestoreKeyInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
