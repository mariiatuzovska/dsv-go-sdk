// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_auto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// DecryptReader is a Reader for the Decrypt structure.
type DecryptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DecryptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDecryptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDecryptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDecryptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDecryptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDecryptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDecryptOK creates a DecryptOK with default headers values
func NewDecryptOK() *DecryptOK {
	return &DecryptOK{}
}

/* DecryptOK describes a response with status code 200, with default header values.

no error
*/
type DecryptOK struct {
	Payload *models.DecryptionResponse
}

// IsSuccess returns true when this decrypt o k response has a 2xx status code
func (o *DecryptOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this decrypt o k response has a 3xx status code
func (o *DecryptOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt o k response has a 4xx status code
func (o *DecryptOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this decrypt o k response has a 5xx status code
func (o *DecryptOK) IsServerError() bool {
	return false
}

// IsCode returns true when this decrypt o k response a status code equal to that given
func (o *DecryptOK) IsCode(code int) bool {
	return code == 200
}

func (o *DecryptOK) Error() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptOK  %+v", 200, o.Payload)
}

func (o *DecryptOK) String() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptOK  %+v", 200, o.Payload)
}

func (o *DecryptOK) GetPayload() *models.DecryptionResponse {
	return o.Payload
}

func (o *DecryptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DecryptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecryptBadRequest creates a DecryptBadRequest with default headers values
func NewDecryptBadRequest() *DecryptBadRequest {
	return &DecryptBadRequest{}
}

/* DecryptBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DecryptBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this decrypt bad request response has a 2xx status code
func (o *DecryptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this decrypt bad request response has a 3xx status code
func (o *DecryptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt bad request response has a 4xx status code
func (o *DecryptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this decrypt bad request response has a 5xx status code
func (o *DecryptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this decrypt bad request response a status code equal to that given
func (o *DecryptBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DecryptBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptBadRequest  %+v", 400, o.Payload)
}

func (o *DecryptBadRequest) String() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptBadRequest  %+v", 400, o.Payload)
}

func (o *DecryptBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DecryptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecryptUnauthorized creates a DecryptUnauthorized with default headers values
func NewDecryptUnauthorized() *DecryptUnauthorized {
	return &DecryptUnauthorized{}
}

/* DecryptUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DecryptUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this decrypt unauthorized response has a 2xx status code
func (o *DecryptUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this decrypt unauthorized response has a 3xx status code
func (o *DecryptUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt unauthorized response has a 4xx status code
func (o *DecryptUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this decrypt unauthorized response has a 5xx status code
func (o *DecryptUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this decrypt unauthorized response a status code equal to that given
func (o *DecryptUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DecryptUnauthorized) Error() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptUnauthorized  %+v", 401, o.Payload)
}

func (o *DecryptUnauthorized) String() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptUnauthorized  %+v", 401, o.Payload)
}

func (o *DecryptUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DecryptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecryptForbidden creates a DecryptForbidden with default headers values
func NewDecryptForbidden() *DecryptForbidden {
	return &DecryptForbidden{}
}

/* DecryptForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DecryptForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this decrypt forbidden response has a 2xx status code
func (o *DecryptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this decrypt forbidden response has a 3xx status code
func (o *DecryptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt forbidden response has a 4xx status code
func (o *DecryptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this decrypt forbidden response has a 5xx status code
func (o *DecryptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this decrypt forbidden response a status code equal to that given
func (o *DecryptForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DecryptForbidden) Error() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptForbidden  %+v", 403, o.Payload)
}

func (o *DecryptForbidden) String() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptForbidden  %+v", 403, o.Payload)
}

func (o *DecryptForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DecryptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecryptInternalServerError creates a DecryptInternalServerError with default headers values
func NewDecryptInternalServerError() *DecryptInternalServerError {
	return &DecryptInternalServerError{}
}

/* DecryptInternalServerError describes a response with status code 500, with default header values.

server error
*/
type DecryptInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this decrypt internal server error response has a 2xx status code
func (o *DecryptInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this decrypt internal server error response has a 3xx status code
func (o *DecryptInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt internal server error response has a 4xx status code
func (o *DecryptInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this decrypt internal server error response has a 5xx status code
func (o *DecryptInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this decrypt internal server error response a status code equal to that given
func (o *DecryptInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DecryptInternalServerError) Error() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptInternalServerError  %+v", 500, o.Payload)
}

func (o *DecryptInternalServerError) String() string {
	return fmt.Sprintf("[POST /crypto/decrypt][%d] decryptInternalServerError  %+v", 500, o.Payload)
}

func (o *DecryptInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DecryptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
