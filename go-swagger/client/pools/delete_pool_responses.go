// Code generated by go-swagger; DO NOT EDIT.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// DeletePoolReader is a Reader for the DeletePool structure.
type DeletePoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeletePoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeletePoolNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeletePoolBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeletePoolUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeletePoolForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeletePoolInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeletePoolOK creates a DeletePoolOK with default headers values
func NewDeletePoolOK() *DeletePoolOK {
	return &DeletePoolOK{}
}

/* DeletePoolOK describes a response with status code 200, with default header values.

no error
*/
type DeletePoolOK struct {
	Payload *models.MessageResponse
}

// IsSuccess returns true when this delete pool o k response has a 2xx status code
func (o *DeletePoolOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete pool o k response has a 3xx status code
func (o *DeletePoolOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool o k response has a 4xx status code
func (o *DeletePoolOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete pool o k response has a 5xx status code
func (o *DeletePoolOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool o k response a status code equal to that given
func (o *DeletePoolOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeletePoolOK) Error() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolOK  %+v", 200, o.Payload)
}

func (o *DeletePoolOK) String() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolOK  %+v", 200, o.Payload)
}

func (o *DeletePoolOK) GetPayload() *models.MessageResponse {
	return o.Payload
}

func (o *DeletePoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePoolNoContent creates a DeletePoolNoContent with default headers values
func NewDeletePoolNoContent() *DeletePoolNoContent {
	return &DeletePoolNoContent{}
}

/* DeletePoolNoContent describes a response with status code 204, with default header values.

no error
*/
type DeletePoolNoContent struct {
}

// IsSuccess returns true when this delete pool no content response has a 2xx status code
func (o *DeletePoolNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete pool no content response has a 3xx status code
func (o *DeletePoolNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool no content response has a 4xx status code
func (o *DeletePoolNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete pool no content response has a 5xx status code
func (o *DeletePoolNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool no content response a status code equal to that given
func (o *DeletePoolNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeletePoolNoContent) Error() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolNoContent ", 204)
}

func (o *DeletePoolNoContent) String() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolNoContent ", 204)
}

func (o *DeletePoolNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePoolBadRequest creates a DeletePoolBadRequest with default headers values
func NewDeletePoolBadRequest() *DeletePoolBadRequest {
	return &DeletePoolBadRequest{}
}

/* DeletePoolBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DeletePoolBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete pool bad request response has a 2xx status code
func (o *DeletePoolBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pool bad request response has a 3xx status code
func (o *DeletePoolBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool bad request response has a 4xx status code
func (o *DeletePoolBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pool bad request response has a 5xx status code
func (o *DeletePoolBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool bad request response a status code equal to that given
func (o *DeletePoolBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeletePoolBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolBadRequest  %+v", 400, o.Payload)
}

func (o *DeletePoolBadRequest) String() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolBadRequest  %+v", 400, o.Payload)
}

func (o *DeletePoolBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeletePoolBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePoolUnauthorized creates a DeletePoolUnauthorized with default headers values
func NewDeletePoolUnauthorized() *DeletePoolUnauthorized {
	return &DeletePoolUnauthorized{}
}

/* DeletePoolUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DeletePoolUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete pool unauthorized response has a 2xx status code
func (o *DeletePoolUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pool unauthorized response has a 3xx status code
func (o *DeletePoolUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool unauthorized response has a 4xx status code
func (o *DeletePoolUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pool unauthorized response has a 5xx status code
func (o *DeletePoolUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool unauthorized response a status code equal to that given
func (o *DeletePoolUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeletePoolUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolUnauthorized  %+v", 401, o.Payload)
}

func (o *DeletePoolUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolUnauthorized  %+v", 401, o.Payload)
}

func (o *DeletePoolUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeletePoolUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePoolForbidden creates a DeletePoolForbidden with default headers values
func NewDeletePoolForbidden() *DeletePoolForbidden {
	return &DeletePoolForbidden{}
}

/* DeletePoolForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DeletePoolForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete pool forbidden response has a 2xx status code
func (o *DeletePoolForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pool forbidden response has a 3xx status code
func (o *DeletePoolForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool forbidden response has a 4xx status code
func (o *DeletePoolForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pool forbidden response has a 5xx status code
func (o *DeletePoolForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool forbidden response a status code equal to that given
func (o *DeletePoolForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeletePoolForbidden) Error() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolForbidden  %+v", 403, o.Payload)
}

func (o *DeletePoolForbidden) String() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolForbidden  %+v", 403, o.Payload)
}

func (o *DeletePoolForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeletePoolForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePoolNotFound creates a DeletePoolNotFound with default headers values
func NewDeletePoolNotFound() *DeletePoolNotFound {
	return &DeletePoolNotFound{}
}

/* DeletePoolNotFound describes a response with status code 404, with default header values.

not found
*/
type DeletePoolNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete pool not found response has a 2xx status code
func (o *DeletePoolNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pool not found response has a 3xx status code
func (o *DeletePoolNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool not found response has a 4xx status code
func (o *DeletePoolNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pool not found response has a 5xx status code
func (o *DeletePoolNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool not found response a status code equal to that given
func (o *DeletePoolNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeletePoolNotFound) Error() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolNotFound  %+v", 404, o.Payload)
}

func (o *DeletePoolNotFound) String() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolNotFound  %+v", 404, o.Payload)
}

func (o *DeletePoolNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeletePoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePoolInternalServerError creates a DeletePoolInternalServerError with default headers values
func NewDeletePoolInternalServerError() *DeletePoolInternalServerError {
	return &DeletePoolInternalServerError{}
}

/* DeletePoolInternalServerError describes a response with status code 500, with default header values.

server error
*/
type DeletePoolInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete pool internal server error response has a 2xx status code
func (o *DeletePoolInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pool internal server error response has a 3xx status code
func (o *DeletePoolInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool internal server error response has a 4xx status code
func (o *DeletePoolInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete pool internal server error response has a 5xx status code
func (o *DeletePoolInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete pool internal server error response a status code equal to that given
func (o *DeletePoolInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeletePoolInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePoolInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /pools/{name}][%d] deletePoolInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePoolInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeletePoolInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
