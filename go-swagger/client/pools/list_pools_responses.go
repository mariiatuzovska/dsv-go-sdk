// Code generated by go-swagger; DO NOT EDIT.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// ListPoolsReader is a Reader for the ListPools structure.
type ListPoolsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPoolsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPoolsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListPoolsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListPoolsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPoolsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPoolsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPoolsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListPoolsOK creates a ListPoolsOK with default headers values
func NewListPoolsOK() *ListPoolsOK {
	return &ListPoolsOK{}
}

/* ListPoolsOK describes a response with status code 200, with default header values.

no error
*/
type ListPoolsOK struct {
	Payload *models.PoolListResult
}

// IsSuccess returns true when this list pools o k response has a 2xx status code
func (o *ListPoolsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list pools o k response has a 3xx status code
func (o *ListPoolsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list pools o k response has a 4xx status code
func (o *ListPoolsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list pools o k response has a 5xx status code
func (o *ListPoolsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list pools o k response a status code equal to that given
func (o *ListPoolsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListPoolsOK) Error() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsOK  %+v", 200, o.Payload)
}

func (o *ListPoolsOK) String() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsOK  %+v", 200, o.Payload)
}

func (o *ListPoolsOK) GetPayload() *models.PoolListResult {
	return o.Payload
}

func (o *ListPoolsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PoolListResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPoolsBadRequest creates a ListPoolsBadRequest with default headers values
func NewListPoolsBadRequest() *ListPoolsBadRequest {
	return &ListPoolsBadRequest{}
}

/* ListPoolsBadRequest describes a response with status code 400, with default header values.

bad request
*/
type ListPoolsBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list pools bad request response has a 2xx status code
func (o *ListPoolsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list pools bad request response has a 3xx status code
func (o *ListPoolsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list pools bad request response has a 4xx status code
func (o *ListPoolsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list pools bad request response has a 5xx status code
func (o *ListPoolsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list pools bad request response a status code equal to that given
func (o *ListPoolsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListPoolsBadRequest) Error() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPoolsBadRequest) String() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPoolsBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListPoolsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPoolsUnauthorized creates a ListPoolsUnauthorized with default headers values
func NewListPoolsUnauthorized() *ListPoolsUnauthorized {
	return &ListPoolsUnauthorized{}
}

/* ListPoolsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type ListPoolsUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list pools unauthorized response has a 2xx status code
func (o *ListPoolsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list pools unauthorized response has a 3xx status code
func (o *ListPoolsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list pools unauthorized response has a 4xx status code
func (o *ListPoolsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list pools unauthorized response has a 5xx status code
func (o *ListPoolsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list pools unauthorized response a status code equal to that given
func (o *ListPoolsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListPoolsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPoolsUnauthorized) String() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPoolsUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListPoolsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPoolsForbidden creates a ListPoolsForbidden with default headers values
func NewListPoolsForbidden() *ListPoolsForbidden {
	return &ListPoolsForbidden{}
}

/* ListPoolsForbidden describes a response with status code 403, with default header values.

forbidden
*/
type ListPoolsForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list pools forbidden response has a 2xx status code
func (o *ListPoolsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list pools forbidden response has a 3xx status code
func (o *ListPoolsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list pools forbidden response has a 4xx status code
func (o *ListPoolsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list pools forbidden response has a 5xx status code
func (o *ListPoolsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list pools forbidden response a status code equal to that given
func (o *ListPoolsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListPoolsForbidden) Error() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsForbidden  %+v", 403, o.Payload)
}

func (o *ListPoolsForbidden) String() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsForbidden  %+v", 403, o.Payload)
}

func (o *ListPoolsForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListPoolsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPoolsNotFound creates a ListPoolsNotFound with default headers values
func NewListPoolsNotFound() *ListPoolsNotFound {
	return &ListPoolsNotFound{}
}

/* ListPoolsNotFound describes a response with status code 404, with default header values.

not found
*/
type ListPoolsNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list pools not found response has a 2xx status code
func (o *ListPoolsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list pools not found response has a 3xx status code
func (o *ListPoolsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list pools not found response has a 4xx status code
func (o *ListPoolsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list pools not found response has a 5xx status code
func (o *ListPoolsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list pools not found response a status code equal to that given
func (o *ListPoolsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListPoolsNotFound) Error() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsNotFound  %+v", 404, o.Payload)
}

func (o *ListPoolsNotFound) String() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsNotFound  %+v", 404, o.Payload)
}

func (o *ListPoolsNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListPoolsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPoolsInternalServerError creates a ListPoolsInternalServerError with default headers values
func NewListPoolsInternalServerError() *ListPoolsInternalServerError {
	return &ListPoolsInternalServerError{}
}

/* ListPoolsInternalServerError describes a response with status code 500, with default header values.

server error
*/
type ListPoolsInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list pools internal server error response has a 2xx status code
func (o *ListPoolsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list pools internal server error response has a 3xx status code
func (o *ListPoolsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list pools internal server error response has a 4xx status code
func (o *ListPoolsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list pools internal server error response has a 5xx status code
func (o *ListPoolsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list pools internal server error response a status code equal to that given
func (o *ListPoolsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListPoolsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPoolsInternalServerError) String() string {
	return fmt.Sprintf("[GET /pools][%d] listPoolsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPoolsInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListPoolsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
