// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_manual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// UploadKeyReader is a Reader for the UploadKey structure.
type UploadKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUploadKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadKeyCreated creates a UploadKeyCreated with default headers values
func NewUploadKeyCreated() *UploadKeyCreated {
	return &UploadKeyCreated{}
}

/* UploadKeyCreated describes a response with status code 201, with default header values.

no error
*/
type UploadKeyCreated struct {
	Payload *models.ResponseModelFull
}

// IsSuccess returns true when this upload key created response has a 2xx status code
func (o *UploadKeyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload key created response has a 3xx status code
func (o *UploadKeyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload key created response has a 4xx status code
func (o *UploadKeyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload key created response has a 5xx status code
func (o *UploadKeyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this upload key created response a status code equal to that given
func (o *UploadKeyCreated) IsCode(code int) bool {
	return code == 201
}

func (o *UploadKeyCreated) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyCreated  %+v", 201, o.Payload)
}

func (o *UploadKeyCreated) String() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyCreated  %+v", 201, o.Payload)
}

func (o *UploadKeyCreated) GetPayload() *models.ResponseModelFull {
	return o.Payload
}

func (o *UploadKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseModelFull)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadKeyBadRequest creates a UploadKeyBadRequest with default headers values
func NewUploadKeyBadRequest() *UploadKeyBadRequest {
	return &UploadKeyBadRequest{}
}

/* UploadKeyBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UploadKeyBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this upload key bad request response has a 2xx status code
func (o *UploadKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload key bad request response has a 3xx status code
func (o *UploadKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload key bad request response has a 4xx status code
func (o *UploadKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload key bad request response has a 5xx status code
func (o *UploadKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload key bad request response a status code equal to that given
func (o *UploadKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UploadKeyBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyBadRequest  %+v", 400, o.Payload)
}

func (o *UploadKeyBadRequest) String() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyBadRequest  %+v", 400, o.Payload)
}

func (o *UploadKeyBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UploadKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadKeyUnauthorized creates a UploadKeyUnauthorized with default headers values
func NewUploadKeyUnauthorized() *UploadKeyUnauthorized {
	return &UploadKeyUnauthorized{}
}

/* UploadKeyUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UploadKeyUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this upload key unauthorized response has a 2xx status code
func (o *UploadKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload key unauthorized response has a 3xx status code
func (o *UploadKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload key unauthorized response has a 4xx status code
func (o *UploadKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload key unauthorized response has a 5xx status code
func (o *UploadKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this upload key unauthorized response a status code equal to that given
func (o *UploadKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UploadKeyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadKeyUnauthorized) String() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadKeyUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UploadKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadKeyForbidden creates a UploadKeyForbidden with default headers values
func NewUploadKeyForbidden() *UploadKeyForbidden {
	return &UploadKeyForbidden{}
}

/* UploadKeyForbidden describes a response with status code 403, with default header values.

forbidden
*/
type UploadKeyForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this upload key forbidden response has a 2xx status code
func (o *UploadKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload key forbidden response has a 3xx status code
func (o *UploadKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload key forbidden response has a 4xx status code
func (o *UploadKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload key forbidden response has a 5xx status code
func (o *UploadKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upload key forbidden response a status code equal to that given
func (o *UploadKeyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UploadKeyForbidden) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyForbidden  %+v", 403, o.Payload)
}

func (o *UploadKeyForbidden) String() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyForbidden  %+v", 403, o.Payload)
}

func (o *UploadKeyForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UploadKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadKeyInternalServerError creates a UploadKeyInternalServerError with default headers values
func NewUploadKeyInternalServerError() *UploadKeyInternalServerError {
	return &UploadKeyInternalServerError{}
}

/* UploadKeyInternalServerError describes a response with status code 500, with default header values.

server error
*/
type UploadKeyInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this upload key internal server error response has a 2xx status code
func (o *UploadKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload key internal server error response has a 3xx status code
func (o *UploadKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload key internal server error response has a 4xx status code
func (o *UploadKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload key internal server error response has a 5xx status code
func (o *UploadKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload key internal server error response a status code equal to that given
func (o *UploadKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UploadKeyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadKeyInternalServerError) String() string {
	return fmt.Sprintf("[POST /crypto/manual/key/{path}][%d] uploadKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadKeyInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UploadKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
