// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_manual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// UpdateKeyReader is a Reader for the UpdateKey structure.
type UpdateKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateKeyOK creates a UpdateKeyOK with default headers values
func NewUpdateKeyOK() *UpdateKeyOK {
	return &UpdateKeyOK{}
}

/* UpdateKeyOK describes a response with status code 200, with default header values.

no error
*/
type UpdateKeyOK struct {
	Payload *models.ResponseModelFull
}

// IsSuccess returns true when this update key o k response has a 2xx status code
func (o *UpdateKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update key o k response has a 3xx status code
func (o *UpdateKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update key o k response has a 4xx status code
func (o *UpdateKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update key o k response has a 5xx status code
func (o *UpdateKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update key o k response a status code equal to that given
func (o *UpdateKeyOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateKeyOK) Error() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyOK  %+v", 200, o.Payload)
}

func (o *UpdateKeyOK) String() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyOK  %+v", 200, o.Payload)
}

func (o *UpdateKeyOK) GetPayload() *models.ResponseModelFull {
	return o.Payload
}

func (o *UpdateKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseModelFull)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKeyBadRequest creates a UpdateKeyBadRequest with default headers values
func NewUpdateKeyBadRequest() *UpdateKeyBadRequest {
	return &UpdateKeyBadRequest{}
}

/* UpdateKeyBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UpdateKeyBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update key bad request response has a 2xx status code
func (o *UpdateKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update key bad request response has a 3xx status code
func (o *UpdateKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update key bad request response has a 4xx status code
func (o *UpdateKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update key bad request response has a 5xx status code
func (o *UpdateKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update key bad request response a status code equal to that given
func (o *UpdateKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateKeyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateKeyBadRequest) String() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateKeyBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKeyUnauthorized creates a UpdateKeyUnauthorized with default headers values
func NewUpdateKeyUnauthorized() *UpdateKeyUnauthorized {
	return &UpdateKeyUnauthorized{}
}

/* UpdateKeyUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UpdateKeyUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update key unauthorized response has a 2xx status code
func (o *UpdateKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update key unauthorized response has a 3xx status code
func (o *UpdateKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update key unauthorized response has a 4xx status code
func (o *UpdateKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update key unauthorized response has a 5xx status code
func (o *UpdateKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update key unauthorized response a status code equal to that given
func (o *UpdateKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateKeyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateKeyUnauthorized) String() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateKeyUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKeyForbidden creates a UpdateKeyForbidden with default headers values
func NewUpdateKeyForbidden() *UpdateKeyForbidden {
	return &UpdateKeyForbidden{}
}

/* UpdateKeyForbidden describes a response with status code 403, with default header values.

forbidden
*/
type UpdateKeyForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update key forbidden response has a 2xx status code
func (o *UpdateKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update key forbidden response has a 3xx status code
func (o *UpdateKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update key forbidden response has a 4xx status code
func (o *UpdateKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update key forbidden response has a 5xx status code
func (o *UpdateKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update key forbidden response a status code equal to that given
func (o *UpdateKeyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateKeyForbidden) Error() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyForbidden  %+v", 403, o.Payload)
}

func (o *UpdateKeyForbidden) String() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyForbidden  %+v", 403, o.Payload)
}

func (o *UpdateKeyForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKeyInternalServerError creates a UpdateKeyInternalServerError with default headers values
func NewUpdateKeyInternalServerError() *UpdateKeyInternalServerError {
	return &UpdateKeyInternalServerError{}
}

/* UpdateKeyInternalServerError describes a response with status code 500, with default header values.

server error
*/
type UpdateKeyInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update key internal server error response has a 2xx status code
func (o *UpdateKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update key internal server error response has a 3xx status code
func (o *UpdateKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update key internal server error response has a 4xx status code
func (o *UpdateKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update key internal server error response has a 5xx status code
func (o *UpdateKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update key internal server error response a status code equal to that given
func (o *UpdateKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateKeyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateKeyInternalServerError) String() string {
	return fmt.Sprintf("[PUT /crypto/manual/key/{path}][%d] updateKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateKeyInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
