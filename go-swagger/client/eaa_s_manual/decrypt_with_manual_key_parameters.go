// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_manual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDecryptWithManualKeyParams creates a new DecryptWithManualKeyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDecryptWithManualKeyParams() *DecryptWithManualKeyParams {
	return &DecryptWithManualKeyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDecryptWithManualKeyParamsWithTimeout creates a new DecryptWithManualKeyParams object
// with the ability to set a timeout on a request.
func NewDecryptWithManualKeyParamsWithTimeout(timeout time.Duration) *DecryptWithManualKeyParams {
	return &DecryptWithManualKeyParams{
		timeout: timeout,
	}
}

// NewDecryptWithManualKeyParamsWithContext creates a new DecryptWithManualKeyParams object
// with the ability to set a context for a request.
func NewDecryptWithManualKeyParamsWithContext(ctx context.Context) *DecryptWithManualKeyParams {
	return &DecryptWithManualKeyParams{
		Context: ctx,
	}
}

// NewDecryptWithManualKeyParamsWithHTTPClient creates a new DecryptWithManualKeyParams object
// with the ability to set a custom HTTPClient for a request.
func NewDecryptWithManualKeyParamsWithHTTPClient(client *http.Client) *DecryptWithManualKeyParams {
	return &DecryptWithManualKeyParams{
		HTTPClient: client,
	}
}

/* DecryptWithManualKeyParams contains all the parameters to send to the API endpoint
   for the decrypt with manual key operation.

   Typically these are written to a http.Request.
*/
type DecryptWithManualKeyParams struct {

	/* Ciphertext.

	   A value to be decrypted
	*/
	Ciphertext []uint8

	/* Path.

	   The path to data key
	*/
	Path string

	/* Version.

	   The version of the key with which to decrypt data
	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the decrypt with manual key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DecryptWithManualKeyParams) WithDefaults() *DecryptWithManualKeyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the decrypt with manual key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DecryptWithManualKeyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) WithTimeout(timeout time.Duration) *DecryptWithManualKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) WithContext(ctx context.Context) *DecryptWithManualKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) WithHTTPClient(client *http.Client) *DecryptWithManualKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCiphertext adds the ciphertext to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) WithCiphertext(ciphertext []uint8) *DecryptWithManualKeyParams {
	o.SetCiphertext(ciphertext)
	return o
}

// SetCiphertext adds the ciphertext to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) SetCiphertext(ciphertext []uint8) {
	o.Ciphertext = ciphertext
}

// WithPath adds the path to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) WithPath(path string) *DecryptWithManualKeyParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) SetPath(path string) {
	o.Path = path
}

// WithVersion adds the version to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) WithVersion(version *string) *DecryptWithManualKeyParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the decrypt with manual key params
func (o *DecryptWithManualKeyParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DecryptWithManualKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ciphertext != nil {

		// binding items for ciphertext
		joinedCiphertext := o.bindParamCiphertext(reg)

		// query array param ciphertext
		if err := r.SetQueryParam("ciphertext", joinedCiphertext...); err != nil {
			return err
		}
	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {

		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion string

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDecryptWithManualKey binds the parameter ciphertext
func (o *DecryptWithManualKeyParams) bindParamCiphertext(formats strfmt.Registry) []string {
	ciphertextIR := o.Ciphertext

	var ciphertextIC []string
	for _, ciphertextIIR := range ciphertextIR { // explode []uint8

		ciphertextIIV := swag.FormatUint8(ciphertextIIR) // uint8 as string
		ciphertextIC = append(ciphertextIC, ciphertextIIV)
	}

	// items.CollectionFormat: ""
	ciphertextIS := swag.JoinByFormat(ciphertextIC, "")

	return ciphertextIS
}
