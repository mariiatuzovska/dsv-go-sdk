// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_manual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// DecryptWithManualKeyReader is a Reader for the DecryptWithManualKey structure.
type DecryptWithManualKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DecryptWithManualKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDecryptWithManualKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDecryptWithManualKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDecryptWithManualKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDecryptWithManualKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDecryptWithManualKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDecryptWithManualKeyOK creates a DecryptWithManualKeyOK with default headers values
func NewDecryptWithManualKeyOK() *DecryptWithManualKeyOK {
	return &DecryptWithManualKeyOK{}
}

/* DecryptWithManualKeyOK describes a response with status code 200, with default header values.

no error
*/
type DecryptWithManualKeyOK struct {
	Payload *models.DecryptionResponse
}

// IsSuccess returns true when this decrypt with manual key o k response has a 2xx status code
func (o *DecryptWithManualKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this decrypt with manual key o k response has a 3xx status code
func (o *DecryptWithManualKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt with manual key o k response has a 4xx status code
func (o *DecryptWithManualKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this decrypt with manual key o k response has a 5xx status code
func (o *DecryptWithManualKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this decrypt with manual key o k response a status code equal to that given
func (o *DecryptWithManualKeyOK) IsCode(code int) bool {
	return code == 200
}

func (o *DecryptWithManualKeyOK) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyOK  %+v", 200, o.Payload)
}

func (o *DecryptWithManualKeyOK) String() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyOK  %+v", 200, o.Payload)
}

func (o *DecryptWithManualKeyOK) GetPayload() *models.DecryptionResponse {
	return o.Payload
}

func (o *DecryptWithManualKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DecryptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecryptWithManualKeyBadRequest creates a DecryptWithManualKeyBadRequest with default headers values
func NewDecryptWithManualKeyBadRequest() *DecryptWithManualKeyBadRequest {
	return &DecryptWithManualKeyBadRequest{}
}

/* DecryptWithManualKeyBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DecryptWithManualKeyBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this decrypt with manual key bad request response has a 2xx status code
func (o *DecryptWithManualKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this decrypt with manual key bad request response has a 3xx status code
func (o *DecryptWithManualKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt with manual key bad request response has a 4xx status code
func (o *DecryptWithManualKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this decrypt with manual key bad request response has a 5xx status code
func (o *DecryptWithManualKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this decrypt with manual key bad request response a status code equal to that given
func (o *DecryptWithManualKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DecryptWithManualKeyBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyBadRequest  %+v", 400, o.Payload)
}

func (o *DecryptWithManualKeyBadRequest) String() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyBadRequest  %+v", 400, o.Payload)
}

func (o *DecryptWithManualKeyBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DecryptWithManualKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecryptWithManualKeyUnauthorized creates a DecryptWithManualKeyUnauthorized with default headers values
func NewDecryptWithManualKeyUnauthorized() *DecryptWithManualKeyUnauthorized {
	return &DecryptWithManualKeyUnauthorized{}
}

/* DecryptWithManualKeyUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DecryptWithManualKeyUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this decrypt with manual key unauthorized response has a 2xx status code
func (o *DecryptWithManualKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this decrypt with manual key unauthorized response has a 3xx status code
func (o *DecryptWithManualKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt with manual key unauthorized response has a 4xx status code
func (o *DecryptWithManualKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this decrypt with manual key unauthorized response has a 5xx status code
func (o *DecryptWithManualKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this decrypt with manual key unauthorized response a status code equal to that given
func (o *DecryptWithManualKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DecryptWithManualKeyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *DecryptWithManualKeyUnauthorized) String() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *DecryptWithManualKeyUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DecryptWithManualKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecryptWithManualKeyForbidden creates a DecryptWithManualKeyForbidden with default headers values
func NewDecryptWithManualKeyForbidden() *DecryptWithManualKeyForbidden {
	return &DecryptWithManualKeyForbidden{}
}

/* DecryptWithManualKeyForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DecryptWithManualKeyForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this decrypt with manual key forbidden response has a 2xx status code
func (o *DecryptWithManualKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this decrypt with manual key forbidden response has a 3xx status code
func (o *DecryptWithManualKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt with manual key forbidden response has a 4xx status code
func (o *DecryptWithManualKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this decrypt with manual key forbidden response has a 5xx status code
func (o *DecryptWithManualKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this decrypt with manual key forbidden response a status code equal to that given
func (o *DecryptWithManualKeyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DecryptWithManualKeyForbidden) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyForbidden  %+v", 403, o.Payload)
}

func (o *DecryptWithManualKeyForbidden) String() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyForbidden  %+v", 403, o.Payload)
}

func (o *DecryptWithManualKeyForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DecryptWithManualKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecryptWithManualKeyInternalServerError creates a DecryptWithManualKeyInternalServerError with default headers values
func NewDecryptWithManualKeyInternalServerError() *DecryptWithManualKeyInternalServerError {
	return &DecryptWithManualKeyInternalServerError{}
}

/* DecryptWithManualKeyInternalServerError describes a response with status code 500, with default header values.

server error
*/
type DecryptWithManualKeyInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this decrypt with manual key internal server error response has a 2xx status code
func (o *DecryptWithManualKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this decrypt with manual key internal server error response has a 3xx status code
func (o *DecryptWithManualKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this decrypt with manual key internal server error response has a 4xx status code
func (o *DecryptWithManualKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this decrypt with manual key internal server error response has a 5xx status code
func (o *DecryptWithManualKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this decrypt with manual key internal server error response a status code equal to that given
func (o *DecryptWithManualKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DecryptWithManualKeyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DecryptWithManualKeyInternalServerError) String() string {
	return fmt.Sprintf("[POST /crypto/manual/decrypt][%d] decryptWithManualKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DecryptWithManualKeyInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DecryptWithManualKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
