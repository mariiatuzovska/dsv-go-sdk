// Code generated by go-swagger; DO NOT EDIT.

package eaa_s_manual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// EncryptWithManualKeyReader is a Reader for the EncryptWithManualKey structure.
type EncryptWithManualKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EncryptWithManualKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewEncryptWithManualKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEncryptWithManualKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEncryptWithManualKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEncryptWithManualKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEncryptWithManualKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEncryptWithManualKeyCreated creates a EncryptWithManualKeyCreated with default headers values
func NewEncryptWithManualKeyCreated() *EncryptWithManualKeyCreated {
	return &EncryptWithManualKeyCreated{}
}

/* EncryptWithManualKeyCreated describes a response with status code 201, with default header values.

no error
*/
type EncryptWithManualKeyCreated struct {
	Payload *models.EncryptionResponse
}

// IsSuccess returns true when this encrypt with manual key created response has a 2xx status code
func (o *EncryptWithManualKeyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this encrypt with manual key created response has a 3xx status code
func (o *EncryptWithManualKeyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt with manual key created response has a 4xx status code
func (o *EncryptWithManualKeyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this encrypt with manual key created response has a 5xx status code
func (o *EncryptWithManualKeyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this encrypt with manual key created response a status code equal to that given
func (o *EncryptWithManualKeyCreated) IsCode(code int) bool {
	return code == 201
}

func (o *EncryptWithManualKeyCreated) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyCreated  %+v", 201, o.Payload)
}

func (o *EncryptWithManualKeyCreated) String() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyCreated  %+v", 201, o.Payload)
}

func (o *EncryptWithManualKeyCreated) GetPayload() *models.EncryptionResponse {
	return o.Payload
}

func (o *EncryptWithManualKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptWithManualKeyBadRequest creates a EncryptWithManualKeyBadRequest with default headers values
func NewEncryptWithManualKeyBadRequest() *EncryptWithManualKeyBadRequest {
	return &EncryptWithManualKeyBadRequest{}
}

/* EncryptWithManualKeyBadRequest describes a response with status code 400, with default header values.

bad request
*/
type EncryptWithManualKeyBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this encrypt with manual key bad request response has a 2xx status code
func (o *EncryptWithManualKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this encrypt with manual key bad request response has a 3xx status code
func (o *EncryptWithManualKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt with manual key bad request response has a 4xx status code
func (o *EncryptWithManualKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this encrypt with manual key bad request response has a 5xx status code
func (o *EncryptWithManualKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this encrypt with manual key bad request response a status code equal to that given
func (o *EncryptWithManualKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *EncryptWithManualKeyBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyBadRequest  %+v", 400, o.Payload)
}

func (o *EncryptWithManualKeyBadRequest) String() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyBadRequest  %+v", 400, o.Payload)
}

func (o *EncryptWithManualKeyBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *EncryptWithManualKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptWithManualKeyUnauthorized creates a EncryptWithManualKeyUnauthorized with default headers values
func NewEncryptWithManualKeyUnauthorized() *EncryptWithManualKeyUnauthorized {
	return &EncryptWithManualKeyUnauthorized{}
}

/* EncryptWithManualKeyUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type EncryptWithManualKeyUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this encrypt with manual key unauthorized response has a 2xx status code
func (o *EncryptWithManualKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this encrypt with manual key unauthorized response has a 3xx status code
func (o *EncryptWithManualKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt with manual key unauthorized response has a 4xx status code
func (o *EncryptWithManualKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this encrypt with manual key unauthorized response has a 5xx status code
func (o *EncryptWithManualKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this encrypt with manual key unauthorized response a status code equal to that given
func (o *EncryptWithManualKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *EncryptWithManualKeyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *EncryptWithManualKeyUnauthorized) String() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *EncryptWithManualKeyUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *EncryptWithManualKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptWithManualKeyForbidden creates a EncryptWithManualKeyForbidden with default headers values
func NewEncryptWithManualKeyForbidden() *EncryptWithManualKeyForbidden {
	return &EncryptWithManualKeyForbidden{}
}

/* EncryptWithManualKeyForbidden describes a response with status code 403, with default header values.

forbidden
*/
type EncryptWithManualKeyForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this encrypt with manual key forbidden response has a 2xx status code
func (o *EncryptWithManualKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this encrypt with manual key forbidden response has a 3xx status code
func (o *EncryptWithManualKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt with manual key forbidden response has a 4xx status code
func (o *EncryptWithManualKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this encrypt with manual key forbidden response has a 5xx status code
func (o *EncryptWithManualKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this encrypt with manual key forbidden response a status code equal to that given
func (o *EncryptWithManualKeyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *EncryptWithManualKeyForbidden) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyForbidden  %+v", 403, o.Payload)
}

func (o *EncryptWithManualKeyForbidden) String() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyForbidden  %+v", 403, o.Payload)
}

func (o *EncryptWithManualKeyForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *EncryptWithManualKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptWithManualKeyInternalServerError creates a EncryptWithManualKeyInternalServerError with default headers values
func NewEncryptWithManualKeyInternalServerError() *EncryptWithManualKeyInternalServerError {
	return &EncryptWithManualKeyInternalServerError{}
}

/* EncryptWithManualKeyInternalServerError describes a response with status code 500, with default header values.

server error
*/
type EncryptWithManualKeyInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this encrypt with manual key internal server error response has a 2xx status code
func (o *EncryptWithManualKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this encrypt with manual key internal server error response has a 3xx status code
func (o *EncryptWithManualKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this encrypt with manual key internal server error response has a 4xx status code
func (o *EncryptWithManualKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this encrypt with manual key internal server error response has a 5xx status code
func (o *EncryptWithManualKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this encrypt with manual key internal server error response a status code equal to that given
func (o *EncryptWithManualKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *EncryptWithManualKeyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *EncryptWithManualKeyInternalServerError) String() string {
	return fmt.Sprintf("[POST /crypto/manual/encrypt][%d] encryptWithManualKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *EncryptWithManualKeyInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *EncryptWithManualKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
