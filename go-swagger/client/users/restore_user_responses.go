// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// RestoreUserReader is a Reader for the RestoreUser structure.
type RestoreUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestoreUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRestoreUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRestoreUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRestoreUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRestoreUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRestoreUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRestoreUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRestoreUserOK creates a RestoreUserOK with default headers values
func NewRestoreUserOK() *RestoreUserOK {
	return &RestoreUserOK{}
}

/* RestoreUserOK describes a response with status code 200, with default header values.

no error
*/
type RestoreUserOK struct {
}

// IsSuccess returns true when this restore user o k response has a 2xx status code
func (o *RestoreUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this restore user o k response has a 3xx status code
func (o *RestoreUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore user o k response has a 4xx status code
func (o *RestoreUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this restore user o k response has a 5xx status code
func (o *RestoreUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this restore user o k response a status code equal to that given
func (o *RestoreUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *RestoreUserOK) Error() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserOK ", 200)
}

func (o *RestoreUserOK) String() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserOK ", 200)
}

func (o *RestoreUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRestoreUserBadRequest creates a RestoreUserBadRequest with default headers values
func NewRestoreUserBadRequest() *RestoreUserBadRequest {
	return &RestoreUserBadRequest{}
}

/* RestoreUserBadRequest describes a response with status code 400, with default header values.

bad request
*/
type RestoreUserBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore user bad request response has a 2xx status code
func (o *RestoreUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore user bad request response has a 3xx status code
func (o *RestoreUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore user bad request response has a 4xx status code
func (o *RestoreUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore user bad request response has a 5xx status code
func (o *RestoreUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this restore user bad request response a status code equal to that given
func (o *RestoreUserBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RestoreUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserBadRequest  %+v", 400, o.Payload)
}

func (o *RestoreUserBadRequest) String() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserBadRequest  %+v", 400, o.Payload)
}

func (o *RestoreUserBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreUserUnauthorized creates a RestoreUserUnauthorized with default headers values
func NewRestoreUserUnauthorized() *RestoreUserUnauthorized {
	return &RestoreUserUnauthorized{}
}

/* RestoreUserUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RestoreUserUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore user unauthorized response has a 2xx status code
func (o *RestoreUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore user unauthorized response has a 3xx status code
func (o *RestoreUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore user unauthorized response has a 4xx status code
func (o *RestoreUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore user unauthorized response has a 5xx status code
func (o *RestoreUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this restore user unauthorized response a status code equal to that given
func (o *RestoreUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RestoreUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserUnauthorized  %+v", 401, o.Payload)
}

func (o *RestoreUserUnauthorized) String() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserUnauthorized  %+v", 401, o.Payload)
}

func (o *RestoreUserUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreUserForbidden creates a RestoreUserForbidden with default headers values
func NewRestoreUserForbidden() *RestoreUserForbidden {
	return &RestoreUserForbidden{}
}

/* RestoreUserForbidden describes a response with status code 403, with default header values.

forbidden
*/
type RestoreUserForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore user forbidden response has a 2xx status code
func (o *RestoreUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore user forbidden response has a 3xx status code
func (o *RestoreUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore user forbidden response has a 4xx status code
func (o *RestoreUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore user forbidden response has a 5xx status code
func (o *RestoreUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this restore user forbidden response a status code equal to that given
func (o *RestoreUserForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RestoreUserForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserForbidden  %+v", 403, o.Payload)
}

func (o *RestoreUserForbidden) String() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserForbidden  %+v", 403, o.Payload)
}

func (o *RestoreUserForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreUserNotFound creates a RestoreUserNotFound with default headers values
func NewRestoreUserNotFound() *RestoreUserNotFound {
	return &RestoreUserNotFound{}
}

/* RestoreUserNotFound describes a response with status code 404, with default header values.

not found
*/
type RestoreUserNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore user not found response has a 2xx status code
func (o *RestoreUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore user not found response has a 3xx status code
func (o *RestoreUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore user not found response has a 4xx status code
func (o *RestoreUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore user not found response has a 5xx status code
func (o *RestoreUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this restore user not found response a status code equal to that given
func (o *RestoreUserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RestoreUserNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserNotFound  %+v", 404, o.Payload)
}

func (o *RestoreUserNotFound) String() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserNotFound  %+v", 404, o.Payload)
}

func (o *RestoreUserNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreUserInternalServerError creates a RestoreUserInternalServerError with default headers values
func NewRestoreUserInternalServerError() *RestoreUserInternalServerError {
	return &RestoreUserInternalServerError{}
}

/* RestoreUserInternalServerError describes a response with status code 500, with default header values.

server error
*/
type RestoreUserInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this restore user internal server error response has a 2xx status code
func (o *RestoreUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore user internal server error response has a 3xx status code
func (o *RestoreUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore user internal server error response has a 4xx status code
func (o *RestoreUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this restore user internal server error response has a 5xx status code
func (o *RestoreUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this restore user internal server error response a status code equal to that given
func (o *RestoreUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RestoreUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserInternalServerError  %+v", 500, o.Payload)
}

func (o *RestoreUserInternalServerError) String() string {
	return fmt.Sprintf("[GET /users/{name}/restore][%d] restoreUserInternalServerError  %+v", 500, o.Payload)
}

func (o *RestoreUserInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RestoreUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
