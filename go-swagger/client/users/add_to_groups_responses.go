// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// AddToGroupsReader is a Reader for the AddToGroups structure.
type AddToGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddToGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddToGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddToGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddToGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddToGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddToGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddToGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddToGroupsOK creates a AddToGroupsOK with default headers values
func NewAddToGroupsOK() *AddToGroupsOK {
	return &AddToGroupsOK{}
}

/* AddToGroupsOK describes a response with status code 200, with default header values.

no error
*/
type AddToGroupsOK struct {
	Payload *models.AddToGroupsResponse
}

// IsSuccess returns true when this add to groups o k response has a 2xx status code
func (o *AddToGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add to groups o k response has a 3xx status code
func (o *AddToGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add to groups o k response has a 4xx status code
func (o *AddToGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add to groups o k response has a 5xx status code
func (o *AddToGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add to groups o k response a status code equal to that given
func (o *AddToGroupsOK) IsCode(code int) bool {
	return code == 200
}

func (o *AddToGroupsOK) Error() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsOK  %+v", 200, o.Payload)
}

func (o *AddToGroupsOK) String() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsOK  %+v", 200, o.Payload)
}

func (o *AddToGroupsOK) GetPayload() *models.AddToGroupsResponse {
	return o.Payload
}

func (o *AddToGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AddToGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToGroupsBadRequest creates a AddToGroupsBadRequest with default headers values
func NewAddToGroupsBadRequest() *AddToGroupsBadRequest {
	return &AddToGroupsBadRequest{}
}

/* AddToGroupsBadRequest describes a response with status code 400, with default header values.

bad request
*/
type AddToGroupsBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add to groups bad request response has a 2xx status code
func (o *AddToGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add to groups bad request response has a 3xx status code
func (o *AddToGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add to groups bad request response has a 4xx status code
func (o *AddToGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add to groups bad request response has a 5xx status code
func (o *AddToGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add to groups bad request response a status code equal to that given
func (o *AddToGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AddToGroupsBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *AddToGroupsBadRequest) String() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *AddToGroupsBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddToGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToGroupsUnauthorized creates a AddToGroupsUnauthorized with default headers values
func NewAddToGroupsUnauthorized() *AddToGroupsUnauthorized {
	return &AddToGroupsUnauthorized{}
}

/* AddToGroupsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type AddToGroupsUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add to groups unauthorized response has a 2xx status code
func (o *AddToGroupsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add to groups unauthorized response has a 3xx status code
func (o *AddToGroupsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add to groups unauthorized response has a 4xx status code
func (o *AddToGroupsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add to groups unauthorized response has a 5xx status code
func (o *AddToGroupsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add to groups unauthorized response a status code equal to that given
func (o *AddToGroupsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AddToGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *AddToGroupsUnauthorized) String() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *AddToGroupsUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddToGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToGroupsForbidden creates a AddToGroupsForbidden with default headers values
func NewAddToGroupsForbidden() *AddToGroupsForbidden {
	return &AddToGroupsForbidden{}
}

/* AddToGroupsForbidden describes a response with status code 403, with default header values.

forbidden
*/
type AddToGroupsForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add to groups forbidden response has a 2xx status code
func (o *AddToGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add to groups forbidden response has a 3xx status code
func (o *AddToGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add to groups forbidden response has a 4xx status code
func (o *AddToGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add to groups forbidden response has a 5xx status code
func (o *AddToGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add to groups forbidden response a status code equal to that given
func (o *AddToGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AddToGroupsForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsForbidden  %+v", 403, o.Payload)
}

func (o *AddToGroupsForbidden) String() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsForbidden  %+v", 403, o.Payload)
}

func (o *AddToGroupsForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddToGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToGroupsNotFound creates a AddToGroupsNotFound with default headers values
func NewAddToGroupsNotFound() *AddToGroupsNotFound {
	return &AddToGroupsNotFound{}
}

/* AddToGroupsNotFound describes a response with status code 404, with default header values.

not found
*/
type AddToGroupsNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add to groups not found response has a 2xx status code
func (o *AddToGroupsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add to groups not found response has a 3xx status code
func (o *AddToGroupsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add to groups not found response has a 4xx status code
func (o *AddToGroupsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add to groups not found response has a 5xx status code
func (o *AddToGroupsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add to groups not found response a status code equal to that given
func (o *AddToGroupsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AddToGroupsNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsNotFound  %+v", 404, o.Payload)
}

func (o *AddToGroupsNotFound) String() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsNotFound  %+v", 404, o.Payload)
}

func (o *AddToGroupsNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddToGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToGroupsInternalServerError creates a AddToGroupsInternalServerError with default headers values
func NewAddToGroupsInternalServerError() *AddToGroupsInternalServerError {
	return &AddToGroupsInternalServerError{}
}

/* AddToGroupsInternalServerError describes a response with status code 500, with default header values.

server error
*/
type AddToGroupsInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this add to groups internal server error response has a 2xx status code
func (o *AddToGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add to groups internal server error response has a 3xx status code
func (o *AddToGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add to groups internal server error response has a 4xx status code
func (o *AddToGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add to groups internal server error response has a 5xx status code
func (o *AddToGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add to groups internal server error response a status code equal to that given
func (o *AddToGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AddToGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *AddToGroupsInternalServerError) String() string {
	return fmt.Sprintf("[POST /users/{name}/groups][%d] addToGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *AddToGroupsInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *AddToGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
