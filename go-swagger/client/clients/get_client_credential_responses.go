// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetClientCredentialReader is a Reader for the GetClientCredential structure.
type GetClientCredentialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetClientCredentialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetClientCredentialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetClientCredentialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetClientCredentialUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetClientCredentialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetClientCredentialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetClientCredentialInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetClientCredentialOK creates a GetClientCredentialOK with default headers values
func NewGetClientCredentialOK() *GetClientCredentialOK {
	return &GetClientCredentialOK{}
}

/* GetClientCredentialOK describes a response with status code 200, with default header values.

no error
*/
type GetClientCredentialOK struct {
	Payload *models.ClientCredentials
}

// IsSuccess returns true when this get client credential o k response has a 2xx status code
func (o *GetClientCredentialOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get client credential o k response has a 3xx status code
func (o *GetClientCredentialOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get client credential o k response has a 4xx status code
func (o *GetClientCredentialOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get client credential o k response has a 5xx status code
func (o *GetClientCredentialOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get client credential o k response a status code equal to that given
func (o *GetClientCredentialOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetClientCredentialOK) Error() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialOK  %+v", 200, o.Payload)
}

func (o *GetClientCredentialOK) String() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialOK  %+v", 200, o.Payload)
}

func (o *GetClientCredentialOK) GetPayload() *models.ClientCredentials {
	return o.Payload
}

func (o *GetClientCredentialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClientCredentials)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClientCredentialBadRequest creates a GetClientCredentialBadRequest with default headers values
func NewGetClientCredentialBadRequest() *GetClientCredentialBadRequest {
	return &GetClientCredentialBadRequest{}
}

/* GetClientCredentialBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetClientCredentialBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get client credential bad request response has a 2xx status code
func (o *GetClientCredentialBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get client credential bad request response has a 3xx status code
func (o *GetClientCredentialBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get client credential bad request response has a 4xx status code
func (o *GetClientCredentialBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get client credential bad request response has a 5xx status code
func (o *GetClientCredentialBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get client credential bad request response a status code equal to that given
func (o *GetClientCredentialBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetClientCredentialBadRequest) Error() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialBadRequest  %+v", 400, o.Payload)
}

func (o *GetClientCredentialBadRequest) String() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialBadRequest  %+v", 400, o.Payload)
}

func (o *GetClientCredentialBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetClientCredentialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClientCredentialUnauthorized creates a GetClientCredentialUnauthorized with default headers values
func NewGetClientCredentialUnauthorized() *GetClientCredentialUnauthorized {
	return &GetClientCredentialUnauthorized{}
}

/* GetClientCredentialUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetClientCredentialUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get client credential unauthorized response has a 2xx status code
func (o *GetClientCredentialUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get client credential unauthorized response has a 3xx status code
func (o *GetClientCredentialUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get client credential unauthorized response has a 4xx status code
func (o *GetClientCredentialUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get client credential unauthorized response has a 5xx status code
func (o *GetClientCredentialUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get client credential unauthorized response a status code equal to that given
func (o *GetClientCredentialUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetClientCredentialUnauthorized) Error() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialUnauthorized  %+v", 401, o.Payload)
}

func (o *GetClientCredentialUnauthorized) String() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialUnauthorized  %+v", 401, o.Payload)
}

func (o *GetClientCredentialUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetClientCredentialUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClientCredentialForbidden creates a GetClientCredentialForbidden with default headers values
func NewGetClientCredentialForbidden() *GetClientCredentialForbidden {
	return &GetClientCredentialForbidden{}
}

/* GetClientCredentialForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetClientCredentialForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get client credential forbidden response has a 2xx status code
func (o *GetClientCredentialForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get client credential forbidden response has a 3xx status code
func (o *GetClientCredentialForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get client credential forbidden response has a 4xx status code
func (o *GetClientCredentialForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get client credential forbidden response has a 5xx status code
func (o *GetClientCredentialForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get client credential forbidden response a status code equal to that given
func (o *GetClientCredentialForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetClientCredentialForbidden) Error() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialForbidden  %+v", 403, o.Payload)
}

func (o *GetClientCredentialForbidden) String() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialForbidden  %+v", 403, o.Payload)
}

func (o *GetClientCredentialForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetClientCredentialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClientCredentialNotFound creates a GetClientCredentialNotFound with default headers values
func NewGetClientCredentialNotFound() *GetClientCredentialNotFound {
	return &GetClientCredentialNotFound{}
}

/* GetClientCredentialNotFound describes a response with status code 404, with default header values.

not found
*/
type GetClientCredentialNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get client credential not found response has a 2xx status code
func (o *GetClientCredentialNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get client credential not found response has a 3xx status code
func (o *GetClientCredentialNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get client credential not found response has a 4xx status code
func (o *GetClientCredentialNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get client credential not found response has a 5xx status code
func (o *GetClientCredentialNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get client credential not found response a status code equal to that given
func (o *GetClientCredentialNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetClientCredentialNotFound) Error() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialNotFound  %+v", 404, o.Payload)
}

func (o *GetClientCredentialNotFound) String() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialNotFound  %+v", 404, o.Payload)
}

func (o *GetClientCredentialNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetClientCredentialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClientCredentialInternalServerError creates a GetClientCredentialInternalServerError with default headers values
func NewGetClientCredentialInternalServerError() *GetClientCredentialInternalServerError {
	return &GetClientCredentialInternalServerError{}
}

/* GetClientCredentialInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetClientCredentialInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get client credential internal server error response has a 2xx status code
func (o *GetClientCredentialInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get client credential internal server error response has a 3xx status code
func (o *GetClientCredentialInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get client credential internal server error response has a 4xx status code
func (o *GetClientCredentialInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get client credential internal server error response has a 5xx status code
func (o *GetClientCredentialInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get client credential internal server error response a status code equal to that given
func (o *GetClientCredentialInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetClientCredentialInternalServerError) Error() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialInternalServerError  %+v", 500, o.Payload)
}

func (o *GetClientCredentialInternalServerError) String() string {
	return fmt.Sprintf("[GET /clients/{clientId}][%d] getClientCredentialInternalServerError  %+v", 500, o.Payload)
}

func (o *GetClientCredentialInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetClientCredentialInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
