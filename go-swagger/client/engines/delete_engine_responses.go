// Code generated by go-swagger; DO NOT EDIT.

package engines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// DeleteEngineReader is a Reader for the DeleteEngine structure.
type DeleteEngineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteEngineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteEngineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteEngineNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteEngineBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteEngineUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteEngineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteEngineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteEngineInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteEngineOK creates a DeleteEngineOK with default headers values
func NewDeleteEngineOK() *DeleteEngineOK {
	return &DeleteEngineOK{}
}

/* DeleteEngineOK describes a response with status code 200, with default header values.

no error
*/
type DeleteEngineOK struct {
	Payload *models.MessageResponse
}

// IsSuccess returns true when this delete engine o k response has a 2xx status code
func (o *DeleteEngineOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete engine o k response has a 3xx status code
func (o *DeleteEngineOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete engine o k response has a 4xx status code
func (o *DeleteEngineOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete engine o k response has a 5xx status code
func (o *DeleteEngineOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete engine o k response a status code equal to that given
func (o *DeleteEngineOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteEngineOK) Error() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineOK  %+v", 200, o.Payload)
}

func (o *DeleteEngineOK) String() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineOK  %+v", 200, o.Payload)
}

func (o *DeleteEngineOK) GetPayload() *models.MessageResponse {
	return o.Payload
}

func (o *DeleteEngineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEngineNoContent creates a DeleteEngineNoContent with default headers values
func NewDeleteEngineNoContent() *DeleteEngineNoContent {
	return &DeleteEngineNoContent{}
}

/* DeleteEngineNoContent describes a response with status code 204, with default header values.

no error
*/
type DeleteEngineNoContent struct {
}

// IsSuccess returns true when this delete engine no content response has a 2xx status code
func (o *DeleteEngineNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete engine no content response has a 3xx status code
func (o *DeleteEngineNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete engine no content response has a 4xx status code
func (o *DeleteEngineNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete engine no content response has a 5xx status code
func (o *DeleteEngineNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete engine no content response a status code equal to that given
func (o *DeleteEngineNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteEngineNoContent) Error() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineNoContent ", 204)
}

func (o *DeleteEngineNoContent) String() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineNoContent ", 204)
}

func (o *DeleteEngineNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteEngineBadRequest creates a DeleteEngineBadRequest with default headers values
func NewDeleteEngineBadRequest() *DeleteEngineBadRequest {
	return &DeleteEngineBadRequest{}
}

/* DeleteEngineBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DeleteEngineBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete engine bad request response has a 2xx status code
func (o *DeleteEngineBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete engine bad request response has a 3xx status code
func (o *DeleteEngineBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete engine bad request response has a 4xx status code
func (o *DeleteEngineBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete engine bad request response has a 5xx status code
func (o *DeleteEngineBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete engine bad request response a status code equal to that given
func (o *DeleteEngineBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteEngineBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteEngineBadRequest) String() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteEngineBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteEngineBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEngineUnauthorized creates a DeleteEngineUnauthorized with default headers values
func NewDeleteEngineUnauthorized() *DeleteEngineUnauthorized {
	return &DeleteEngineUnauthorized{}
}

/* DeleteEngineUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DeleteEngineUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete engine unauthorized response has a 2xx status code
func (o *DeleteEngineUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete engine unauthorized response has a 3xx status code
func (o *DeleteEngineUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete engine unauthorized response has a 4xx status code
func (o *DeleteEngineUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete engine unauthorized response has a 5xx status code
func (o *DeleteEngineUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete engine unauthorized response a status code equal to that given
func (o *DeleteEngineUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteEngineUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteEngineUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteEngineUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteEngineUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEngineForbidden creates a DeleteEngineForbidden with default headers values
func NewDeleteEngineForbidden() *DeleteEngineForbidden {
	return &DeleteEngineForbidden{}
}

/* DeleteEngineForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DeleteEngineForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete engine forbidden response has a 2xx status code
func (o *DeleteEngineForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete engine forbidden response has a 3xx status code
func (o *DeleteEngineForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete engine forbidden response has a 4xx status code
func (o *DeleteEngineForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete engine forbidden response has a 5xx status code
func (o *DeleteEngineForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete engine forbidden response a status code equal to that given
func (o *DeleteEngineForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteEngineForbidden) Error() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineForbidden  %+v", 403, o.Payload)
}

func (o *DeleteEngineForbidden) String() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineForbidden  %+v", 403, o.Payload)
}

func (o *DeleteEngineForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteEngineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEngineNotFound creates a DeleteEngineNotFound with default headers values
func NewDeleteEngineNotFound() *DeleteEngineNotFound {
	return &DeleteEngineNotFound{}
}

/* DeleteEngineNotFound describes a response with status code 404, with default header values.

not found
*/
type DeleteEngineNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete engine not found response has a 2xx status code
func (o *DeleteEngineNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete engine not found response has a 3xx status code
func (o *DeleteEngineNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete engine not found response has a 4xx status code
func (o *DeleteEngineNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete engine not found response has a 5xx status code
func (o *DeleteEngineNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete engine not found response a status code equal to that given
func (o *DeleteEngineNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteEngineNotFound) Error() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineNotFound  %+v", 404, o.Payload)
}

func (o *DeleteEngineNotFound) String() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineNotFound  %+v", 404, o.Payload)
}

func (o *DeleteEngineNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteEngineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEngineInternalServerError creates a DeleteEngineInternalServerError with default headers values
func NewDeleteEngineInternalServerError() *DeleteEngineInternalServerError {
	return &DeleteEngineInternalServerError{}
}

/* DeleteEngineInternalServerError describes a response with status code 500, with default header values.

server error
*/
type DeleteEngineInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this delete engine internal server error response has a 2xx status code
func (o *DeleteEngineInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete engine internal server error response has a 3xx status code
func (o *DeleteEngineInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete engine internal server error response has a 4xx status code
func (o *DeleteEngineInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete engine internal server error response has a 5xx status code
func (o *DeleteEngineInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete engine internal server error response a status code equal to that given
func (o *DeleteEngineInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteEngineInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteEngineInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /engines/{name}][%d] deleteEngineInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteEngineInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DeleteEngineInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
