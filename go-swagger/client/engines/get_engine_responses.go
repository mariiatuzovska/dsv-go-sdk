// Code generated by go-swagger; DO NOT EDIT.

package engines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetEngineReader is a Reader for the GetEngine structure.
type GetEngineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEngineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEngineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEngineBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetEngineUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEngineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEngineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEngineInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEngineOK creates a GetEngineOK with default headers values
func NewGetEngineOK() *GetEngineOK {
	return &GetEngineOK{}
}

/* GetEngineOK describes a response with status code 200, with default header values.

no error
*/
type GetEngineOK struct {
	Payload *models.Engine
}

// IsSuccess returns true when this get engine o k response has a 2xx status code
func (o *GetEngineOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get engine o k response has a 3xx status code
func (o *GetEngineOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get engine o k response has a 4xx status code
func (o *GetEngineOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get engine o k response has a 5xx status code
func (o *GetEngineOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get engine o k response a status code equal to that given
func (o *GetEngineOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetEngineOK) Error() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineOK  %+v", 200, o.Payload)
}

func (o *GetEngineOK) String() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineOK  %+v", 200, o.Payload)
}

func (o *GetEngineOK) GetPayload() *models.Engine {
	return o.Payload
}

func (o *GetEngineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Engine)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEngineBadRequest creates a GetEngineBadRequest with default headers values
func NewGetEngineBadRequest() *GetEngineBadRequest {
	return &GetEngineBadRequest{}
}

/* GetEngineBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetEngineBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get engine bad request response has a 2xx status code
func (o *GetEngineBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get engine bad request response has a 3xx status code
func (o *GetEngineBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get engine bad request response has a 4xx status code
func (o *GetEngineBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get engine bad request response has a 5xx status code
func (o *GetEngineBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get engine bad request response a status code equal to that given
func (o *GetEngineBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetEngineBadRequest) Error() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineBadRequest  %+v", 400, o.Payload)
}

func (o *GetEngineBadRequest) String() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineBadRequest  %+v", 400, o.Payload)
}

func (o *GetEngineBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetEngineBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEngineUnauthorized creates a GetEngineUnauthorized with default headers values
func NewGetEngineUnauthorized() *GetEngineUnauthorized {
	return &GetEngineUnauthorized{}
}

/* GetEngineUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetEngineUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get engine unauthorized response has a 2xx status code
func (o *GetEngineUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get engine unauthorized response has a 3xx status code
func (o *GetEngineUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get engine unauthorized response has a 4xx status code
func (o *GetEngineUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get engine unauthorized response has a 5xx status code
func (o *GetEngineUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get engine unauthorized response a status code equal to that given
func (o *GetEngineUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetEngineUnauthorized) Error() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEngineUnauthorized) String() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEngineUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetEngineUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEngineForbidden creates a GetEngineForbidden with default headers values
func NewGetEngineForbidden() *GetEngineForbidden {
	return &GetEngineForbidden{}
}

/* GetEngineForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetEngineForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get engine forbidden response has a 2xx status code
func (o *GetEngineForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get engine forbidden response has a 3xx status code
func (o *GetEngineForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get engine forbidden response has a 4xx status code
func (o *GetEngineForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get engine forbidden response has a 5xx status code
func (o *GetEngineForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get engine forbidden response a status code equal to that given
func (o *GetEngineForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetEngineForbidden) Error() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineForbidden  %+v", 403, o.Payload)
}

func (o *GetEngineForbidden) String() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineForbidden  %+v", 403, o.Payload)
}

func (o *GetEngineForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetEngineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEngineNotFound creates a GetEngineNotFound with default headers values
func NewGetEngineNotFound() *GetEngineNotFound {
	return &GetEngineNotFound{}
}

/* GetEngineNotFound describes a response with status code 404, with default header values.

not found
*/
type GetEngineNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get engine not found response has a 2xx status code
func (o *GetEngineNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get engine not found response has a 3xx status code
func (o *GetEngineNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get engine not found response has a 4xx status code
func (o *GetEngineNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get engine not found response has a 5xx status code
func (o *GetEngineNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get engine not found response a status code equal to that given
func (o *GetEngineNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetEngineNotFound) Error() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineNotFound  %+v", 404, o.Payload)
}

func (o *GetEngineNotFound) String() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineNotFound  %+v", 404, o.Payload)
}

func (o *GetEngineNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetEngineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEngineInternalServerError creates a GetEngineInternalServerError with default headers values
func NewGetEngineInternalServerError() *GetEngineInternalServerError {
	return &GetEngineInternalServerError{}
}

/* GetEngineInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetEngineInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get engine internal server error response has a 2xx status code
func (o *GetEngineInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get engine internal server error response has a 3xx status code
func (o *GetEngineInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get engine internal server error response has a 4xx status code
func (o *GetEngineInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get engine internal server error response has a 5xx status code
func (o *GetEngineInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get engine internal server error response a status code equal to that given
func (o *GetEngineInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetEngineInternalServerError) Error() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEngineInternalServerError) String() string {
	return fmt.Sprintf("[GET /engines/{name}][%d] getEngineInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEngineInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetEngineInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
