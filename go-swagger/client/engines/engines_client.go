// Code generated by go-swagger; DO NOT EDIT.

package engines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new engines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for engines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEngine(params *CreateEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEngineCreated, error)

	DeleteEngine(params *DeleteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEngineOK, *DeleteEngineNoContent, error)

	GetEngine(params *GetEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEngineOK, error)

	ListEngines(params *ListEnginesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEnginesOK, error)

	PingEngine(params *PingEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PingEngineOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEngine creates engine

  Registers a new engine and returns its key pair.
*/
func (a *Client) CreateEngine(params *CreateEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEngineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEngine",
		Method:             "POST",
		PathPattern:        "/engines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEngineCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEngine deletes engine

  Delete an engine  by name.
*/
func (a *Client) DeleteEngine(params *DeleteEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEngineOK, *DeleteEngineNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEngine",
		Method:             "DELETE",
		PathPattern:        "/engines/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteEngineOK:
		return value, nil, nil
	case *DeleteEngineNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEngine gets engine

  Retrieve engine by name.
*/
func (a *Client) GetEngine(params *GetEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEngineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEngine",
		Method:             "GET",
		PathPattern:        "/engines/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEngineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEngines lists engines

  List all existing engines.
*/
func (a *Client) ListEngines(params *ListEnginesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEnginesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEnginesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEngines",
		Method:             "GET",
		PathPattern:        "/engines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEnginesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEnginesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEngines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PingEngine pings engine

  Sends a message to the engine to validate connectivity.
*/
func (a *Client) PingEngine(params *PingEngineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PingEngineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingEngineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pingEngine",
		Method:             "POST",
		PathPattern:        "/engines/{name}/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PingEngineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingEngineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pingEngine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
