// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFindAuditParams creates a new FindAuditParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindAuditParams() *FindAuditParams {
	return &FindAuditParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindAuditParamsWithTimeout creates a new FindAuditParams object
// with the ability to set a timeout on a request.
func NewFindAuditParamsWithTimeout(timeout time.Duration) *FindAuditParams {
	return &FindAuditParams{
		timeout: timeout,
	}
}

// NewFindAuditParamsWithContext creates a new FindAuditParams object
// with the ability to set a context for a request.
func NewFindAuditParamsWithContext(ctx context.Context) *FindAuditParams {
	return &FindAuditParams{
		Context: ctx,
	}
}

// NewFindAuditParamsWithHTTPClient creates a new FindAuditParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindAuditParamsWithHTTPClient(client *http.Client) *FindAuditParams {
	return &FindAuditParams{
		HTTPClient: client,
	}
}

/* FindAuditParams contains all the parameters to send to the API endpoint
   for the find audit operation.

   Typically these are written to a http.Request.
*/
type FindAuditParams struct {

	/* Action.

	   The audit action
	*/
	Action *string

	/* Cursor.

	   The cursor for pagination
	*/
	Cursor *string

	/* EndDate.

	   The end date to find audits to

	   Format: date-time
	*/
	EndDate *strfmt.DateTime

	/* Limit.

	   The number of results to return

	   Format: int64
	*/
	Limit *int64

	/* Path.

	   The secret path
	*/
	Path *string

	/* Principal.

	   Security principal name
	*/
	Principal *string

	/* Sort.

	   Sort results ascending (asc) or descending (desc) order. Default is desc
	*/
	Sort *string

	/* StartDate.

	   The start date to find audits from

	   Format: date-time
	*/
	StartDate *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find audit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindAuditParams) WithDefaults() *FindAuditParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find audit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindAuditParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find audit params
func (o *FindAuditParams) WithTimeout(timeout time.Duration) *FindAuditParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find audit params
func (o *FindAuditParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find audit params
func (o *FindAuditParams) WithContext(ctx context.Context) *FindAuditParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find audit params
func (o *FindAuditParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find audit params
func (o *FindAuditParams) WithHTTPClient(client *http.Client) *FindAuditParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find audit params
func (o *FindAuditParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the find audit params
func (o *FindAuditParams) WithAction(action *string) *FindAuditParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the find audit params
func (o *FindAuditParams) SetAction(action *string) {
	o.Action = action
}

// WithCursor adds the cursor to the find audit params
func (o *FindAuditParams) WithCursor(cursor *string) *FindAuditParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the find audit params
func (o *FindAuditParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithEndDate adds the endDate to the find audit params
func (o *FindAuditParams) WithEndDate(endDate *strfmt.DateTime) *FindAuditParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the find audit params
func (o *FindAuditParams) SetEndDate(endDate *strfmt.DateTime) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the find audit params
func (o *FindAuditParams) WithLimit(limit *int64) *FindAuditParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the find audit params
func (o *FindAuditParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPath adds the path to the find audit params
func (o *FindAuditParams) WithPath(path *string) *FindAuditParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the find audit params
func (o *FindAuditParams) SetPath(path *string) {
	o.Path = path
}

// WithPrincipal adds the principal to the find audit params
func (o *FindAuditParams) WithPrincipal(principal *string) *FindAuditParams {
	o.SetPrincipal(principal)
	return o
}

// SetPrincipal adds the principal to the find audit params
func (o *FindAuditParams) SetPrincipal(principal *string) {
	o.Principal = principal
}

// WithSort adds the sort to the find audit params
func (o *FindAuditParams) WithSort(sort *string) *FindAuditParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the find audit params
func (o *FindAuditParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStartDate adds the startDate to the find audit params
func (o *FindAuditParams) WithStartDate(startDate *strfmt.DateTime) *FindAuditParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the find audit params
func (o *FindAuditParams) SetStartDate(startDate *strfmt.DateTime) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *FindAuditParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// query param action
		var qrAction string

		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := qrAction
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate strfmt.DateTime

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {

			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Path != nil {

		// query param path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if o.Principal != nil {

		// query param principal
		var qrPrincipal string

		if o.Principal != nil {
			qrPrincipal = *o.Principal
		}
		qPrincipal := qrPrincipal
		if qPrincipal != "" {

			if err := r.SetQueryParam("principal", qPrincipal); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate strfmt.DateTime

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {

			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
