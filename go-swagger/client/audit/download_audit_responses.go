// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// DownloadAuditReader is a Reader for the DownloadAudit structure.
type DownloadAuditReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *DownloadAuditReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadAuditOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadAuditBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDownloadAuditUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadAuditForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadAuditInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDownloadAuditOK creates a DownloadAuditOK with default headers values
func NewDownloadAuditOK(writer io.Writer) *DownloadAuditOK {
	return &DownloadAuditOK{

		Payload: writer,
	}
}

/* DownloadAuditOK describes a response with status code 200, with default header values.

audit file response
*/
type DownloadAuditOK struct {

	/* attachment; filename="attachment.zip"
	 */
	ContentDisposition string

	Payload io.Writer
}

// IsSuccess returns true when this download audit o k response has a 2xx status code
func (o *DownloadAuditOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download audit o k response has a 3xx status code
func (o *DownloadAuditOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download audit o k response has a 4xx status code
func (o *DownloadAuditOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download audit o k response has a 5xx status code
func (o *DownloadAuditOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download audit o k response a status code equal to that given
func (o *DownloadAuditOK) IsCode(code int) bool {
	return code == 200
}

func (o *DownloadAuditOK) Error() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditOK  %+v", 200, o.Payload)
}

func (o *DownloadAuditOK) String() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditOK  %+v", 200, o.Payload)
}

func (o *DownloadAuditOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *DownloadAuditOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Disposition
	hdrContentDisposition := response.GetHeader("Content-Disposition")

	if hdrContentDisposition != "" {
		o.ContentDisposition = hdrContentDisposition
	}

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadAuditBadRequest creates a DownloadAuditBadRequest with default headers values
func NewDownloadAuditBadRequest() *DownloadAuditBadRequest {
	return &DownloadAuditBadRequest{}
}

/* DownloadAuditBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DownloadAuditBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this download audit bad request response has a 2xx status code
func (o *DownloadAuditBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download audit bad request response has a 3xx status code
func (o *DownloadAuditBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download audit bad request response has a 4xx status code
func (o *DownloadAuditBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download audit bad request response has a 5xx status code
func (o *DownloadAuditBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download audit bad request response a status code equal to that given
func (o *DownloadAuditBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DownloadAuditBadRequest) Error() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditBadRequest  %+v", 400, o.Payload)
}

func (o *DownloadAuditBadRequest) String() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditBadRequest  %+v", 400, o.Payload)
}

func (o *DownloadAuditBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DownloadAuditBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadAuditUnauthorized creates a DownloadAuditUnauthorized with default headers values
func NewDownloadAuditUnauthorized() *DownloadAuditUnauthorized {
	return &DownloadAuditUnauthorized{}
}

/* DownloadAuditUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DownloadAuditUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this download audit unauthorized response has a 2xx status code
func (o *DownloadAuditUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download audit unauthorized response has a 3xx status code
func (o *DownloadAuditUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download audit unauthorized response has a 4xx status code
func (o *DownloadAuditUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download audit unauthorized response has a 5xx status code
func (o *DownloadAuditUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download audit unauthorized response a status code equal to that given
func (o *DownloadAuditUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DownloadAuditUnauthorized) Error() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditUnauthorized  %+v", 401, o.Payload)
}

func (o *DownloadAuditUnauthorized) String() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditUnauthorized  %+v", 401, o.Payload)
}

func (o *DownloadAuditUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DownloadAuditUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadAuditForbidden creates a DownloadAuditForbidden with default headers values
func NewDownloadAuditForbidden() *DownloadAuditForbidden {
	return &DownloadAuditForbidden{}
}

/* DownloadAuditForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DownloadAuditForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this download audit forbidden response has a 2xx status code
func (o *DownloadAuditForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download audit forbidden response has a 3xx status code
func (o *DownloadAuditForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download audit forbidden response has a 4xx status code
func (o *DownloadAuditForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download audit forbidden response has a 5xx status code
func (o *DownloadAuditForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download audit forbidden response a status code equal to that given
func (o *DownloadAuditForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DownloadAuditForbidden) Error() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditForbidden  %+v", 403, o.Payload)
}

func (o *DownloadAuditForbidden) String() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditForbidden  %+v", 403, o.Payload)
}

func (o *DownloadAuditForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DownloadAuditForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadAuditInternalServerError creates a DownloadAuditInternalServerError with default headers values
func NewDownloadAuditInternalServerError() *DownloadAuditInternalServerError {
	return &DownloadAuditInternalServerError{}
}

/* DownloadAuditInternalServerError describes a response with status code 500, with default header values.

server error
*/
type DownloadAuditInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this download audit internal server error response has a 2xx status code
func (o *DownloadAuditInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download audit internal server error response has a 3xx status code
func (o *DownloadAuditInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download audit internal server error response has a 4xx status code
func (o *DownloadAuditInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download audit internal server error response has a 5xx status code
func (o *DownloadAuditInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download audit internal server error response a status code equal to that given
func (o *DownloadAuditInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DownloadAuditInternalServerError) Error() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadAuditInternalServerError) String() string {
	return fmt.Sprintf("[GET /download/audit][%d] downloadAuditInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadAuditInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *DownloadAuditInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
