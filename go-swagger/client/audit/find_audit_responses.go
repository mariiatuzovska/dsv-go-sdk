// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// FindAuditReader is a Reader for the FindAudit structure.
type FindAuditReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindAuditReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindAuditOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFindAuditBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFindAuditUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindAuditForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFindAuditInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindAuditOK creates a FindAuditOK with default headers values
func NewFindAuditOK() *FindAuditOK {
	return &FindAuditOK{}
}

/* FindAuditOK describes a response with status code 200, with default header values.

Successful audit log search response
*/
type FindAuditOK struct {
	Payload *models.ResponseAuditSearch
}

// IsSuccess returns true when this find audit o k response has a 2xx status code
func (o *FindAuditOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this find audit o k response has a 3xx status code
func (o *FindAuditOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find audit o k response has a 4xx status code
func (o *FindAuditOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this find audit o k response has a 5xx status code
func (o *FindAuditOK) IsServerError() bool {
	return false
}

// IsCode returns true when this find audit o k response a status code equal to that given
func (o *FindAuditOK) IsCode(code int) bool {
	return code == 200
}

func (o *FindAuditOK) Error() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditOK  %+v", 200, o.Payload)
}

func (o *FindAuditOK) String() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditOK  %+v", 200, o.Payload)
}

func (o *FindAuditOK) GetPayload() *models.ResponseAuditSearch {
	return o.Payload
}

func (o *FindAuditOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseAuditSearch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindAuditBadRequest creates a FindAuditBadRequest with default headers values
func NewFindAuditBadRequest() *FindAuditBadRequest {
	return &FindAuditBadRequest{}
}

/* FindAuditBadRequest describes a response with status code 400, with default header values.

bad request
*/
type FindAuditBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this find audit bad request response has a 2xx status code
func (o *FindAuditBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find audit bad request response has a 3xx status code
func (o *FindAuditBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find audit bad request response has a 4xx status code
func (o *FindAuditBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this find audit bad request response has a 5xx status code
func (o *FindAuditBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this find audit bad request response a status code equal to that given
func (o *FindAuditBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *FindAuditBadRequest) Error() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditBadRequest  %+v", 400, o.Payload)
}

func (o *FindAuditBadRequest) String() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditBadRequest  %+v", 400, o.Payload)
}

func (o *FindAuditBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *FindAuditBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindAuditUnauthorized creates a FindAuditUnauthorized with default headers values
func NewFindAuditUnauthorized() *FindAuditUnauthorized {
	return &FindAuditUnauthorized{}
}

/* FindAuditUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindAuditUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this find audit unauthorized response has a 2xx status code
func (o *FindAuditUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find audit unauthorized response has a 3xx status code
func (o *FindAuditUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find audit unauthorized response has a 4xx status code
func (o *FindAuditUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this find audit unauthorized response has a 5xx status code
func (o *FindAuditUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this find audit unauthorized response a status code equal to that given
func (o *FindAuditUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *FindAuditUnauthorized) Error() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditUnauthorized  %+v", 401, o.Payload)
}

func (o *FindAuditUnauthorized) String() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditUnauthorized  %+v", 401, o.Payload)
}

func (o *FindAuditUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *FindAuditUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindAuditForbidden creates a FindAuditForbidden with default headers values
func NewFindAuditForbidden() *FindAuditForbidden {
	return &FindAuditForbidden{}
}

/* FindAuditForbidden describes a response with status code 403, with default header values.

forbidden
*/
type FindAuditForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this find audit forbidden response has a 2xx status code
func (o *FindAuditForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find audit forbidden response has a 3xx status code
func (o *FindAuditForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find audit forbidden response has a 4xx status code
func (o *FindAuditForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this find audit forbidden response has a 5xx status code
func (o *FindAuditForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this find audit forbidden response a status code equal to that given
func (o *FindAuditForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *FindAuditForbidden) Error() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditForbidden  %+v", 403, o.Payload)
}

func (o *FindAuditForbidden) String() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditForbidden  %+v", 403, o.Payload)
}

func (o *FindAuditForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *FindAuditForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindAuditInternalServerError creates a FindAuditInternalServerError with default headers values
func NewFindAuditInternalServerError() *FindAuditInternalServerError {
	return &FindAuditInternalServerError{}
}

/* FindAuditInternalServerError describes a response with status code 500, with default header values.

server error
*/
type FindAuditInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this find audit internal server error response has a 2xx status code
func (o *FindAuditInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find audit internal server error response has a 3xx status code
func (o *FindAuditInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find audit internal server error response has a 4xx status code
func (o *FindAuditInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this find audit internal server error response has a 5xx status code
func (o *FindAuditInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this find audit internal server error response a status code equal to that given
func (o *FindAuditInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *FindAuditInternalServerError) Error() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditInternalServerError  %+v", 500, o.Payload)
}

func (o *FindAuditInternalServerError) String() string {
	return fmt.Sprintf("[GET /audit][%d] findAuditInternalServerError  %+v", 500, o.Payload)
}

func (o *FindAuditInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *FindAuditInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
