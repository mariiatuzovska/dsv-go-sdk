// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetSecretDescriptionReader is a Reader for the GetSecretDescription structure.
type GetSecretDescriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSecretDescriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSecretDescriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSecretDescriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSecretDescriptionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSecretDescriptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSecretDescriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSecretDescriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSecretDescriptionOK creates a GetSecretDescriptionOK with default headers values
func NewGetSecretDescriptionOK() *GetSecretDescriptionOK {
	return &GetSecretDescriptionOK{}
}

/* GetSecretDescriptionOK describes a response with status code 200, with default header values.

no error
*/
type GetSecretDescriptionOK struct {
	Payload *models.ResponseModelDescription
}

// IsSuccess returns true when this get secret description o k response has a 2xx status code
func (o *GetSecretDescriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get secret description o k response has a 3xx status code
func (o *GetSecretDescriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret description o k response has a 4xx status code
func (o *GetSecretDescriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get secret description o k response has a 5xx status code
func (o *GetSecretDescriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret description o k response a status code equal to that given
func (o *GetSecretDescriptionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSecretDescriptionOK) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionOK  %+v", 200, o.Payload)
}

func (o *GetSecretDescriptionOK) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionOK  %+v", 200, o.Payload)
}

func (o *GetSecretDescriptionOK) GetPayload() *models.ResponseModelDescription {
	return o.Payload
}

func (o *GetSecretDescriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseModelDescription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretDescriptionBadRequest creates a GetSecretDescriptionBadRequest with default headers values
func NewGetSecretDescriptionBadRequest() *GetSecretDescriptionBadRequest {
	return &GetSecretDescriptionBadRequest{}
}

/* GetSecretDescriptionBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetSecretDescriptionBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret description bad request response has a 2xx status code
func (o *GetSecretDescriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret description bad request response has a 3xx status code
func (o *GetSecretDescriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret description bad request response has a 4xx status code
func (o *GetSecretDescriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get secret description bad request response has a 5xx status code
func (o *GetSecretDescriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret description bad request response a status code equal to that given
func (o *GetSecretDescriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSecretDescriptionBadRequest) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionBadRequest  %+v", 400, o.Payload)
}

func (o *GetSecretDescriptionBadRequest) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionBadRequest  %+v", 400, o.Payload)
}

func (o *GetSecretDescriptionBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretDescriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretDescriptionUnauthorized creates a GetSecretDescriptionUnauthorized with default headers values
func NewGetSecretDescriptionUnauthorized() *GetSecretDescriptionUnauthorized {
	return &GetSecretDescriptionUnauthorized{}
}

/* GetSecretDescriptionUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetSecretDescriptionUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret description unauthorized response has a 2xx status code
func (o *GetSecretDescriptionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret description unauthorized response has a 3xx status code
func (o *GetSecretDescriptionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret description unauthorized response has a 4xx status code
func (o *GetSecretDescriptionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get secret description unauthorized response has a 5xx status code
func (o *GetSecretDescriptionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret description unauthorized response a status code equal to that given
func (o *GetSecretDescriptionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSecretDescriptionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSecretDescriptionUnauthorized) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSecretDescriptionUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretDescriptionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretDescriptionForbidden creates a GetSecretDescriptionForbidden with default headers values
func NewGetSecretDescriptionForbidden() *GetSecretDescriptionForbidden {
	return &GetSecretDescriptionForbidden{}
}

/* GetSecretDescriptionForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetSecretDescriptionForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret description forbidden response has a 2xx status code
func (o *GetSecretDescriptionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret description forbidden response has a 3xx status code
func (o *GetSecretDescriptionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret description forbidden response has a 4xx status code
func (o *GetSecretDescriptionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get secret description forbidden response has a 5xx status code
func (o *GetSecretDescriptionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret description forbidden response a status code equal to that given
func (o *GetSecretDescriptionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSecretDescriptionForbidden) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionForbidden  %+v", 403, o.Payload)
}

func (o *GetSecretDescriptionForbidden) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionForbidden  %+v", 403, o.Payload)
}

func (o *GetSecretDescriptionForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretDescriptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretDescriptionNotFound creates a GetSecretDescriptionNotFound with default headers values
func NewGetSecretDescriptionNotFound() *GetSecretDescriptionNotFound {
	return &GetSecretDescriptionNotFound{}
}

/* GetSecretDescriptionNotFound describes a response with status code 404, with default header values.

not found
*/
type GetSecretDescriptionNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret description not found response has a 2xx status code
func (o *GetSecretDescriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret description not found response has a 3xx status code
func (o *GetSecretDescriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret description not found response has a 4xx status code
func (o *GetSecretDescriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get secret description not found response has a 5xx status code
func (o *GetSecretDescriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret description not found response a status code equal to that given
func (o *GetSecretDescriptionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSecretDescriptionNotFound) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionNotFound  %+v", 404, o.Payload)
}

func (o *GetSecretDescriptionNotFound) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionNotFound  %+v", 404, o.Payload)
}

func (o *GetSecretDescriptionNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretDescriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretDescriptionInternalServerError creates a GetSecretDescriptionInternalServerError with default headers values
func NewGetSecretDescriptionInternalServerError() *GetSecretDescriptionInternalServerError {
	return &GetSecretDescriptionInternalServerError{}
}

/* GetSecretDescriptionInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetSecretDescriptionInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret description internal server error response has a 2xx status code
func (o *GetSecretDescriptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret description internal server error response has a 3xx status code
func (o *GetSecretDescriptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret description internal server error response has a 4xx status code
func (o *GetSecretDescriptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get secret description internal server error response has a 5xx status code
func (o *GetSecretDescriptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get secret description internal server error response a status code equal to that given
func (o *GetSecretDescriptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSecretDescriptionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSecretDescriptionInternalServerError) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::description][%d] getSecretDescriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSecretDescriptionInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretDescriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
