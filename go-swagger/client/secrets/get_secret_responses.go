// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetSecretReader is a Reader for the GetSecret structure.
type GetSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSecretOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSecretUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSecretInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSecretOK creates a GetSecretOK with default headers values
func NewGetSecretOK() *GetSecretOK {
	return &GetSecretOK{}
}

/* GetSecretOK describes a response with status code 200, with default header values.

no error
*/
type GetSecretOK struct {
	Payload *models.ResponseModelFull
}

// IsSuccess returns true when this get secret o k response has a 2xx status code
func (o *GetSecretOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get secret o k response has a 3xx status code
func (o *GetSecretOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret o k response has a 4xx status code
func (o *GetSecretOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get secret o k response has a 5xx status code
func (o *GetSecretOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret o k response a status code equal to that given
func (o *GetSecretOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSecretOK) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretOK  %+v", 200, o.Payload)
}

func (o *GetSecretOK) String() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretOK  %+v", 200, o.Payload)
}

func (o *GetSecretOK) GetPayload() *models.ResponseModelFull {
	return o.Payload
}

func (o *GetSecretOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseModelFull)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretBadRequest creates a GetSecretBadRequest with default headers values
func NewGetSecretBadRequest() *GetSecretBadRequest {
	return &GetSecretBadRequest{}
}

/* GetSecretBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetSecretBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret bad request response has a 2xx status code
func (o *GetSecretBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret bad request response has a 3xx status code
func (o *GetSecretBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret bad request response has a 4xx status code
func (o *GetSecretBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get secret bad request response has a 5xx status code
func (o *GetSecretBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret bad request response a status code equal to that given
func (o *GetSecretBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSecretBadRequest) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretBadRequest  %+v", 400, o.Payload)
}

func (o *GetSecretBadRequest) String() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretBadRequest  %+v", 400, o.Payload)
}

func (o *GetSecretBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretUnauthorized creates a GetSecretUnauthorized with default headers values
func NewGetSecretUnauthorized() *GetSecretUnauthorized {
	return &GetSecretUnauthorized{}
}

/* GetSecretUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetSecretUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret unauthorized response has a 2xx status code
func (o *GetSecretUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret unauthorized response has a 3xx status code
func (o *GetSecretUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret unauthorized response has a 4xx status code
func (o *GetSecretUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get secret unauthorized response has a 5xx status code
func (o *GetSecretUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret unauthorized response a status code equal to that given
func (o *GetSecretUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSecretUnauthorized) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSecretUnauthorized) String() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSecretUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretForbidden creates a GetSecretForbidden with default headers values
func NewGetSecretForbidden() *GetSecretForbidden {
	return &GetSecretForbidden{}
}

/* GetSecretForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetSecretForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret forbidden response has a 2xx status code
func (o *GetSecretForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret forbidden response has a 3xx status code
func (o *GetSecretForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret forbidden response has a 4xx status code
func (o *GetSecretForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get secret forbidden response has a 5xx status code
func (o *GetSecretForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret forbidden response a status code equal to that given
func (o *GetSecretForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSecretForbidden) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretForbidden  %+v", 403, o.Payload)
}

func (o *GetSecretForbidden) String() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretForbidden  %+v", 403, o.Payload)
}

func (o *GetSecretForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretNotFound creates a GetSecretNotFound with default headers values
func NewGetSecretNotFound() *GetSecretNotFound {
	return &GetSecretNotFound{}
}

/* GetSecretNotFound describes a response with status code 404, with default header values.

not found
*/
type GetSecretNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret not found response has a 2xx status code
func (o *GetSecretNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret not found response has a 3xx status code
func (o *GetSecretNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret not found response has a 4xx status code
func (o *GetSecretNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get secret not found response has a 5xx status code
func (o *GetSecretNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get secret not found response a status code equal to that given
func (o *GetSecretNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSecretNotFound) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretNotFound  %+v", 404, o.Payload)
}

func (o *GetSecretNotFound) String() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretNotFound  %+v", 404, o.Payload)
}

func (o *GetSecretNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretInternalServerError creates a GetSecretInternalServerError with default headers values
func NewGetSecretInternalServerError() *GetSecretInternalServerError {
	return &GetSecretInternalServerError{}
}

/* GetSecretInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetSecretInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get secret internal server error response has a 2xx status code
func (o *GetSecretInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get secret internal server error response has a 3xx status code
func (o *GetSecretInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get secret internal server error response has a 4xx status code
func (o *GetSecretInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get secret internal server error response has a 5xx status code
func (o *GetSecretInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get secret internal server error response a status code equal to that given
func (o *GetSecretInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSecretInternalServerError) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSecretInternalServerError) String() string {
	return fmt.Sprintf("[GET /secrets/{path}][%d] getSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSecretInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetSecretInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
