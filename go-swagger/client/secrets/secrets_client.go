// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSecret(params *CreateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSecretCreated, error)

	DeleteSecret(params *DeleteSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSecretOK, *DeleteSecretNoContent, error)

	GetSecret(params *GetSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretOK, error)

	GetSecretByVersion(params *GetSecretByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretByVersionOK, error)

	GetSecretDescription(params *GetSecretDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretDescriptionOK, error)

	ListSecretPaths(params *ListSecretPathsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSecretPathsOK, error)

	RollbackSecret(params *RollbackSecretParams, opts ...ClientOption) (*RollbackSecretOK, error)

	SearchSecrets(params *SearchSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSecretsOK, error)

	UpdateSecret(params *UpdateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSecretOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSecret creates secret

  Creates a new secret.
*/
func (a *Client) CreateSecret(params *CreateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSecretCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSecret",
		Method:             "POST",
		PathPattern:        "/secrets/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSecretCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSecret deletes secret

  Deletes a secret by path or by id in the query.
*/
func (a *Client) DeleteSecret(params *DeleteSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSecretOK, *DeleteSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSecret",
		Method:             "DELETE",
		PathPattern:        "/secrets/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSecretOK:
		return value, nil, nil
	case *DeleteSecretNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for secrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecret gets secret

  Gets a full secret by path or by id in the query.
*/
func (a *Client) GetSecret(params *GetSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecret",
		Method:             "GET",
		PathPattern:        "/secrets/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecretByVersion gets secret by version

  Gets a full secret by path and version in the query.
*/
func (a *Client) GetSecretByVersion(params *GetSecretByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretByVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecretByVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecretByVersion",
		Method:             "GET",
		PathPattern:        "/secrets/{path}/version/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecretByVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecretByVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecretByVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecretDescription gets secret description

  Gets a secret's metadata without returning the sensitive data.
*/
func (a *Client) GetSecretDescription(params *GetSecretDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecretDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecretDescription",
		Method:             "GET",
		PathPattern:        "/secrets/{path}::description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecretDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecretDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecretDescription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSecretPaths lists secret paths

  Lists secret paths that start with the path parameter.
*/
func (a *Client) ListSecretPaths(params *ListSecretPathsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSecretPathsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecretPathsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSecretPaths",
		Method:             "GET",
		PathPattern:        "/secrets/{path}::listpaths",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSecretPathsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecretPathsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSecretPaths: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackSecret rollbacks a secret

  Rollbacks a Secret to a previous version.
*/
func (a *Client) RollbackSecret(params *RollbackSecretParams, opts ...ClientOption) (*RollbackSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rollbackSecret",
		Method:             "PUT",
		PathPattern:        "/secrets/{path}/rollback/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RollbackSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rollbackSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchSecrets searches for secrets

  Lists secret paths that start with the path parameter.
*/
func (a *Client) SearchSecrets(params *SearchSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSecretsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSecrets",
		Method:             "GET",
		PathPattern:        "/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSecret updates secret

  Updates an existing secret.
*/
func (a *Client) UpdateSecret(params *UpdateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSecret",
		Method:             "PUT",
		PathPattern:        "/secrets/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
