// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// UpdateSecretReader is a Reader for the UpdateSecret structure.
type UpdateSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSecretOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSecretInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSecretOK creates a UpdateSecretOK with default headers values
func NewUpdateSecretOK() *UpdateSecretOK {
	return &UpdateSecretOK{}
}

/* UpdateSecretOK describes a response with status code 200, with default header values.

no error
*/
type UpdateSecretOK struct {
	Payload *models.ResponseModelFull
}

// IsSuccess returns true when this update secret o k response has a 2xx status code
func (o *UpdateSecretOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update secret o k response has a 3xx status code
func (o *UpdateSecretOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret o k response has a 4xx status code
func (o *UpdateSecretOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update secret o k response has a 5xx status code
func (o *UpdateSecretOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret o k response a status code equal to that given
func (o *UpdateSecretOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateSecretOK) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretOK  %+v", 200, o.Payload)
}

func (o *UpdateSecretOK) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretOK  %+v", 200, o.Payload)
}

func (o *UpdateSecretOK) GetPayload() *models.ResponseModelFull {
	return o.Payload
}

func (o *UpdateSecretOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseModelFull)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretBadRequest creates a UpdateSecretBadRequest with default headers values
func NewUpdateSecretBadRequest() *UpdateSecretBadRequest {
	return &UpdateSecretBadRequest{}
}

/* UpdateSecretBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UpdateSecretBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update secret bad request response has a 2xx status code
func (o *UpdateSecretBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret bad request response has a 3xx status code
func (o *UpdateSecretBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret bad request response has a 4xx status code
func (o *UpdateSecretBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret bad request response has a 5xx status code
func (o *UpdateSecretBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret bad request response a status code equal to that given
func (o *UpdateSecretBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateSecretBadRequest) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSecretBadRequest) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSecretBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretForbidden creates a UpdateSecretForbidden with default headers values
func NewUpdateSecretForbidden() *UpdateSecretForbidden {
	return &UpdateSecretForbidden{}
}

/* UpdateSecretForbidden describes a response with status code 403, with default header values.

forbidden
*/
type UpdateSecretForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update secret forbidden response has a 2xx status code
func (o *UpdateSecretForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret forbidden response has a 3xx status code
func (o *UpdateSecretForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret forbidden response has a 4xx status code
func (o *UpdateSecretForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret forbidden response has a 5xx status code
func (o *UpdateSecretForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret forbidden response a status code equal to that given
func (o *UpdateSecretForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateSecretForbidden) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSecretForbidden) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSecretForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretNotFound creates a UpdateSecretNotFound with default headers values
func NewUpdateSecretNotFound() *UpdateSecretNotFound {
	return &UpdateSecretNotFound{}
}

/* UpdateSecretNotFound describes a response with status code 404, with default header values.

not found
*/
type UpdateSecretNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update secret not found response has a 2xx status code
func (o *UpdateSecretNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret not found response has a 3xx status code
func (o *UpdateSecretNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret not found response has a 4xx status code
func (o *UpdateSecretNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret not found response has a 5xx status code
func (o *UpdateSecretNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret not found response a status code equal to that given
func (o *UpdateSecretNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateSecretNotFound) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSecretNotFound) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSecretNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretInternalServerError creates a UpdateSecretInternalServerError with default headers values
func NewUpdateSecretInternalServerError() *UpdateSecretInternalServerError {
	return &UpdateSecretInternalServerError{}
}

/* UpdateSecretInternalServerError describes a response with status code 500, with default header values.

server error
*/
type UpdateSecretInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update secret internal server error response has a 2xx status code
func (o *UpdateSecretInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret internal server error response has a 3xx status code
func (o *UpdateSecretInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret internal server error response has a 4xx status code
func (o *UpdateSecretInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update secret internal server error response has a 5xx status code
func (o *UpdateSecretInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update secret internal server error response a status code equal to that given
func (o *UpdateSecretInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateSecretInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSecretInternalServerError) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}][%d] updateSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSecretInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateSecretInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
