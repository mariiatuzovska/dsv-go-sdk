// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// ListSecretPathsReader is a Reader for the ListSecretPaths structure.
type ListSecretPathsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSecretPathsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListSecretPathsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListSecretPathsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListSecretPathsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListSecretPathsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListSecretPathsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListSecretPathsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListSecretPathsOK creates a ListSecretPathsOK with default headers values
func NewListSecretPathsOK() *ListSecretPathsOK {
	return &ListSecretPathsOK{}
}

/* ListSecretPathsOK describes a response with status code 200, with default header values.

no error
*/
type ListSecretPathsOK struct {
	Payload *models.SecretListPathsResponse
}

// IsSuccess returns true when this list secret paths o k response has a 2xx status code
func (o *ListSecretPathsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list secret paths o k response has a 3xx status code
func (o *ListSecretPathsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list secret paths o k response has a 4xx status code
func (o *ListSecretPathsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list secret paths o k response has a 5xx status code
func (o *ListSecretPathsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list secret paths o k response a status code equal to that given
func (o *ListSecretPathsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListSecretPathsOK) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsOK  %+v", 200, o.Payload)
}

func (o *ListSecretPathsOK) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsOK  %+v", 200, o.Payload)
}

func (o *ListSecretPathsOK) GetPayload() *models.SecretListPathsResponse {
	return o.Payload
}

func (o *ListSecretPathsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SecretListPathsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSecretPathsBadRequest creates a ListSecretPathsBadRequest with default headers values
func NewListSecretPathsBadRequest() *ListSecretPathsBadRequest {
	return &ListSecretPathsBadRequest{}
}

/* ListSecretPathsBadRequest describes a response with status code 400, with default header values.

bad request
*/
type ListSecretPathsBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list secret paths bad request response has a 2xx status code
func (o *ListSecretPathsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list secret paths bad request response has a 3xx status code
func (o *ListSecretPathsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list secret paths bad request response has a 4xx status code
func (o *ListSecretPathsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list secret paths bad request response has a 5xx status code
func (o *ListSecretPathsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list secret paths bad request response a status code equal to that given
func (o *ListSecretPathsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListSecretPathsBadRequest) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsBadRequest  %+v", 400, o.Payload)
}

func (o *ListSecretPathsBadRequest) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsBadRequest  %+v", 400, o.Payload)
}

func (o *ListSecretPathsBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListSecretPathsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSecretPathsUnauthorized creates a ListSecretPathsUnauthorized with default headers values
func NewListSecretPathsUnauthorized() *ListSecretPathsUnauthorized {
	return &ListSecretPathsUnauthorized{}
}

/* ListSecretPathsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type ListSecretPathsUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list secret paths unauthorized response has a 2xx status code
func (o *ListSecretPathsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list secret paths unauthorized response has a 3xx status code
func (o *ListSecretPathsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list secret paths unauthorized response has a 4xx status code
func (o *ListSecretPathsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list secret paths unauthorized response has a 5xx status code
func (o *ListSecretPathsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list secret paths unauthorized response a status code equal to that given
func (o *ListSecretPathsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListSecretPathsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListSecretPathsUnauthorized) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListSecretPathsUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListSecretPathsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSecretPathsForbidden creates a ListSecretPathsForbidden with default headers values
func NewListSecretPathsForbidden() *ListSecretPathsForbidden {
	return &ListSecretPathsForbidden{}
}

/* ListSecretPathsForbidden describes a response with status code 403, with default header values.

forbidden
*/
type ListSecretPathsForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list secret paths forbidden response has a 2xx status code
func (o *ListSecretPathsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list secret paths forbidden response has a 3xx status code
func (o *ListSecretPathsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list secret paths forbidden response has a 4xx status code
func (o *ListSecretPathsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list secret paths forbidden response has a 5xx status code
func (o *ListSecretPathsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list secret paths forbidden response a status code equal to that given
func (o *ListSecretPathsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListSecretPathsForbidden) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsForbidden  %+v", 403, o.Payload)
}

func (o *ListSecretPathsForbidden) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsForbidden  %+v", 403, o.Payload)
}

func (o *ListSecretPathsForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListSecretPathsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSecretPathsNotFound creates a ListSecretPathsNotFound with default headers values
func NewListSecretPathsNotFound() *ListSecretPathsNotFound {
	return &ListSecretPathsNotFound{}
}

/* ListSecretPathsNotFound describes a response with status code 404, with default header values.

not found
*/
type ListSecretPathsNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list secret paths not found response has a 2xx status code
func (o *ListSecretPathsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list secret paths not found response has a 3xx status code
func (o *ListSecretPathsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list secret paths not found response has a 4xx status code
func (o *ListSecretPathsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list secret paths not found response has a 5xx status code
func (o *ListSecretPathsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list secret paths not found response a status code equal to that given
func (o *ListSecretPathsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListSecretPathsNotFound) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsNotFound  %+v", 404, o.Payload)
}

func (o *ListSecretPathsNotFound) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsNotFound  %+v", 404, o.Payload)
}

func (o *ListSecretPathsNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListSecretPathsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSecretPathsInternalServerError creates a ListSecretPathsInternalServerError with default headers values
func NewListSecretPathsInternalServerError() *ListSecretPathsInternalServerError {
	return &ListSecretPathsInternalServerError{}
}

/* ListSecretPathsInternalServerError describes a response with status code 500, with default header values.

server error
*/
type ListSecretPathsInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this list secret paths internal server error response has a 2xx status code
func (o *ListSecretPathsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list secret paths internal server error response has a 3xx status code
func (o *ListSecretPathsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list secret paths internal server error response has a 4xx status code
func (o *ListSecretPathsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list secret paths internal server error response has a 5xx status code
func (o *ListSecretPathsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list secret paths internal server error response a status code equal to that given
func (o *ListSecretPathsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListSecretPathsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListSecretPathsInternalServerError) String() string {
	return fmt.Sprintf("[GET /secrets/{path}::listpaths][%d] listSecretPathsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListSecretPathsInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *ListSecretPathsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
