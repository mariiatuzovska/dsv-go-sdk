// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// RollbackSecretReader is a Reader for the RollbackSecret structure.
type RollbackSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RollbackSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRollbackSecretOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRollbackSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRollbackSecretUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRollbackSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRollbackSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRollbackSecretInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRollbackSecretOK creates a RollbackSecretOK with default headers values
func NewRollbackSecretOK() *RollbackSecretOK {
	return &RollbackSecretOK{}
}

/* RollbackSecretOK describes a response with status code 200, with default header values.

no error
*/
type RollbackSecretOK struct {
	Payload *models.SecretVersionResponse
}

// IsSuccess returns true when this rollback secret o k response has a 2xx status code
func (o *RollbackSecretOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rollback secret o k response has a 3xx status code
func (o *RollbackSecretOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback secret o k response has a 4xx status code
func (o *RollbackSecretOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rollback secret o k response has a 5xx status code
func (o *RollbackSecretOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback secret o k response a status code equal to that given
func (o *RollbackSecretOK) IsCode(code int) bool {
	return code == 200
}

func (o *RollbackSecretOK) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretOK  %+v", 200, o.Payload)
}

func (o *RollbackSecretOK) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretOK  %+v", 200, o.Payload)
}

func (o *RollbackSecretOK) GetPayload() *models.SecretVersionResponse {
	return o.Payload
}

func (o *RollbackSecretOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SecretVersionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackSecretBadRequest creates a RollbackSecretBadRequest with default headers values
func NewRollbackSecretBadRequest() *RollbackSecretBadRequest {
	return &RollbackSecretBadRequest{}
}

/* RollbackSecretBadRequest describes a response with status code 400, with default header values.

bad request
*/
type RollbackSecretBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback secret bad request response has a 2xx status code
func (o *RollbackSecretBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback secret bad request response has a 3xx status code
func (o *RollbackSecretBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback secret bad request response has a 4xx status code
func (o *RollbackSecretBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback secret bad request response has a 5xx status code
func (o *RollbackSecretBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback secret bad request response a status code equal to that given
func (o *RollbackSecretBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RollbackSecretBadRequest) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretBadRequest  %+v", 400, o.Payload)
}

func (o *RollbackSecretBadRequest) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretBadRequest  %+v", 400, o.Payload)
}

func (o *RollbackSecretBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackSecretUnauthorized creates a RollbackSecretUnauthorized with default headers values
func NewRollbackSecretUnauthorized() *RollbackSecretUnauthorized {
	return &RollbackSecretUnauthorized{}
}

/* RollbackSecretUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RollbackSecretUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback secret unauthorized response has a 2xx status code
func (o *RollbackSecretUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback secret unauthorized response has a 3xx status code
func (o *RollbackSecretUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback secret unauthorized response has a 4xx status code
func (o *RollbackSecretUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback secret unauthorized response has a 5xx status code
func (o *RollbackSecretUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback secret unauthorized response a status code equal to that given
func (o *RollbackSecretUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RollbackSecretUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretUnauthorized  %+v", 401, o.Payload)
}

func (o *RollbackSecretUnauthorized) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretUnauthorized  %+v", 401, o.Payload)
}

func (o *RollbackSecretUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackSecretUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackSecretForbidden creates a RollbackSecretForbidden with default headers values
func NewRollbackSecretForbidden() *RollbackSecretForbidden {
	return &RollbackSecretForbidden{}
}

/* RollbackSecretForbidden describes a response with status code 403, with default header values.

forbidden
*/
type RollbackSecretForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback secret forbidden response has a 2xx status code
func (o *RollbackSecretForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback secret forbidden response has a 3xx status code
func (o *RollbackSecretForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback secret forbidden response has a 4xx status code
func (o *RollbackSecretForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback secret forbidden response has a 5xx status code
func (o *RollbackSecretForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback secret forbidden response a status code equal to that given
func (o *RollbackSecretForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RollbackSecretForbidden) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretForbidden  %+v", 403, o.Payload)
}

func (o *RollbackSecretForbidden) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretForbidden  %+v", 403, o.Payload)
}

func (o *RollbackSecretForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackSecretNotFound creates a RollbackSecretNotFound with default headers values
func NewRollbackSecretNotFound() *RollbackSecretNotFound {
	return &RollbackSecretNotFound{}
}

/* RollbackSecretNotFound describes a response with status code 404, with default header values.

not found
*/
type RollbackSecretNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback secret not found response has a 2xx status code
func (o *RollbackSecretNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback secret not found response has a 3xx status code
func (o *RollbackSecretNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback secret not found response has a 4xx status code
func (o *RollbackSecretNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback secret not found response has a 5xx status code
func (o *RollbackSecretNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback secret not found response a status code equal to that given
func (o *RollbackSecretNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RollbackSecretNotFound) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretNotFound  %+v", 404, o.Payload)
}

func (o *RollbackSecretNotFound) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretNotFound  %+v", 404, o.Payload)
}

func (o *RollbackSecretNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackSecretInternalServerError creates a RollbackSecretInternalServerError with default headers values
func NewRollbackSecretInternalServerError() *RollbackSecretInternalServerError {
	return &RollbackSecretInternalServerError{}
}

/* RollbackSecretInternalServerError describes a response with status code 500, with default header values.

server error
*/
type RollbackSecretInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this rollback secret internal server error response has a 2xx status code
func (o *RollbackSecretInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback secret internal server error response has a 3xx status code
func (o *RollbackSecretInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback secret internal server error response has a 4xx status code
func (o *RollbackSecretInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this rollback secret internal server error response has a 5xx status code
func (o *RollbackSecretInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this rollback secret internal server error response a status code equal to that given
func (o *RollbackSecretInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RollbackSecretInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *RollbackSecretInternalServerError) String() string {
	return fmt.Sprintf("[PUT /secrets/{path}/rollback/{version}][%d] rollbackSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *RollbackSecretInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RollbackSecretInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
