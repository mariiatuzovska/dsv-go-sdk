// Code generated by go-swagger; DO NOT EDIT.

package s_i_e_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// SiemGetReader is a Reader for the SiemGet structure.
type SiemGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SiemGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSiemGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSiemGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSiemGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSiemGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSiemGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSiemGetOK creates a SiemGetOK with default headers values
func NewSiemGetOK() *SiemGetOK {
	return &SiemGetOK{}
}

/* SiemGetOK describes a response with status code 200, with default header values.

no error
*/
type SiemGetOK struct {
	Payload *models.SiemResponseModel
}

// IsSuccess returns true when this siem get o k response has a 2xx status code
func (o *SiemGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this siem get o k response has a 3xx status code
func (o *SiemGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem get o k response has a 4xx status code
func (o *SiemGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this siem get o k response has a 5xx status code
func (o *SiemGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this siem get o k response a status code equal to that given
func (o *SiemGetOK) IsCode(code int) bool {
	return code == 200
}

func (o *SiemGetOK) Error() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetOK  %+v", 200, o.Payload)
}

func (o *SiemGetOK) String() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetOK  %+v", 200, o.Payload)
}

func (o *SiemGetOK) GetPayload() *models.SiemResponseModel {
	return o.Payload
}

func (o *SiemGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SiemResponseModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSiemGetBadRequest creates a SiemGetBadRequest with default headers values
func NewSiemGetBadRequest() *SiemGetBadRequest {
	return &SiemGetBadRequest{}
}

/* SiemGetBadRequest describes a response with status code 400, with default header values.

bad request
*/
type SiemGetBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this siem get bad request response has a 2xx status code
func (o *SiemGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this siem get bad request response has a 3xx status code
func (o *SiemGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem get bad request response has a 4xx status code
func (o *SiemGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this siem get bad request response has a 5xx status code
func (o *SiemGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this siem get bad request response a status code equal to that given
func (o *SiemGetBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SiemGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetBadRequest  %+v", 400, o.Payload)
}

func (o *SiemGetBadRequest) String() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetBadRequest  %+v", 400, o.Payload)
}

func (o *SiemGetBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SiemGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSiemGetUnauthorized creates a SiemGetUnauthorized with default headers values
func NewSiemGetUnauthorized() *SiemGetUnauthorized {
	return &SiemGetUnauthorized{}
}

/* SiemGetUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type SiemGetUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this siem get unauthorized response has a 2xx status code
func (o *SiemGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this siem get unauthorized response has a 3xx status code
func (o *SiemGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem get unauthorized response has a 4xx status code
func (o *SiemGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this siem get unauthorized response has a 5xx status code
func (o *SiemGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this siem get unauthorized response a status code equal to that given
func (o *SiemGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SiemGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SiemGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SiemGetUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SiemGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSiemGetForbidden creates a SiemGetForbidden with default headers values
func NewSiemGetForbidden() *SiemGetForbidden {
	return &SiemGetForbidden{}
}

/* SiemGetForbidden describes a response with status code 403, with default header values.

forbidden
*/
type SiemGetForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this siem get forbidden response has a 2xx status code
func (o *SiemGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this siem get forbidden response has a 3xx status code
func (o *SiemGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem get forbidden response has a 4xx status code
func (o *SiemGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this siem get forbidden response has a 5xx status code
func (o *SiemGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this siem get forbidden response a status code equal to that given
func (o *SiemGetForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SiemGetForbidden) Error() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetForbidden  %+v", 403, o.Payload)
}

func (o *SiemGetForbidden) String() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetForbidden  %+v", 403, o.Payload)
}

func (o *SiemGetForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SiemGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSiemGetInternalServerError creates a SiemGetInternalServerError with default headers values
func NewSiemGetInternalServerError() *SiemGetInternalServerError {
	return &SiemGetInternalServerError{}
}

/* SiemGetInternalServerError describes a response with status code 500, with default header values.

server error
*/
type SiemGetInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this siem get internal server error response has a 2xx status code
func (o *SiemGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this siem get internal server error response has a 3xx status code
func (o *SiemGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem get internal server error response has a 4xx status code
func (o *SiemGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this siem get internal server error response has a 5xx status code
func (o *SiemGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this siem get internal server error response a status code equal to that given
func (o *SiemGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SiemGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetInternalServerError  %+v", 500, o.Payload)
}

func (o *SiemGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /config/siem/{name}][%d] siemGetInternalServerError  %+v", 500, o.Payload)
}

func (o *SiemGetInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SiemGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
