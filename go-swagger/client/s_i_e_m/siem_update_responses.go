// Code generated by go-swagger; DO NOT EDIT.

package s_i_e_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// SiemUpdateReader is a Reader for the SiemUpdate structure.
type SiemUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SiemUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSiemUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSiemUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSiemUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSiemUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSiemUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSiemUpdateOK creates a SiemUpdateOK with default headers values
func NewSiemUpdateOK() *SiemUpdateOK {
	return &SiemUpdateOK{}
}

/* SiemUpdateOK describes a response with status code 200, with default header values.

no error
*/
type SiemUpdateOK struct {
	Payload *models.SiemResponseModel
}

// IsSuccess returns true when this siem update o k response has a 2xx status code
func (o *SiemUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this siem update o k response has a 3xx status code
func (o *SiemUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem update o k response has a 4xx status code
func (o *SiemUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this siem update o k response has a 5xx status code
func (o *SiemUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this siem update o k response a status code equal to that given
func (o *SiemUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *SiemUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateOK  %+v", 200, o.Payload)
}

func (o *SiemUpdateOK) String() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateOK  %+v", 200, o.Payload)
}

func (o *SiemUpdateOK) GetPayload() *models.SiemResponseModel {
	return o.Payload
}

func (o *SiemUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SiemResponseModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSiemUpdateBadRequest creates a SiemUpdateBadRequest with default headers values
func NewSiemUpdateBadRequest() *SiemUpdateBadRequest {
	return &SiemUpdateBadRequest{}
}

/* SiemUpdateBadRequest describes a response with status code 400, with default header values.

bad request
*/
type SiemUpdateBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this siem update bad request response has a 2xx status code
func (o *SiemUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this siem update bad request response has a 3xx status code
func (o *SiemUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem update bad request response has a 4xx status code
func (o *SiemUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this siem update bad request response has a 5xx status code
func (o *SiemUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this siem update bad request response a status code equal to that given
func (o *SiemUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SiemUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SiemUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SiemUpdateBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SiemUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSiemUpdateUnauthorized creates a SiemUpdateUnauthorized with default headers values
func NewSiemUpdateUnauthorized() *SiemUpdateUnauthorized {
	return &SiemUpdateUnauthorized{}
}

/* SiemUpdateUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type SiemUpdateUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this siem update unauthorized response has a 2xx status code
func (o *SiemUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this siem update unauthorized response has a 3xx status code
func (o *SiemUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem update unauthorized response has a 4xx status code
func (o *SiemUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this siem update unauthorized response has a 5xx status code
func (o *SiemUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this siem update unauthorized response a status code equal to that given
func (o *SiemUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SiemUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *SiemUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *SiemUpdateUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SiemUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSiemUpdateForbidden creates a SiemUpdateForbidden with default headers values
func NewSiemUpdateForbidden() *SiemUpdateForbidden {
	return &SiemUpdateForbidden{}
}

/* SiemUpdateForbidden describes a response with status code 403, with default header values.

forbidden
*/
type SiemUpdateForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this siem update forbidden response has a 2xx status code
func (o *SiemUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this siem update forbidden response has a 3xx status code
func (o *SiemUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem update forbidden response has a 4xx status code
func (o *SiemUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this siem update forbidden response has a 5xx status code
func (o *SiemUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this siem update forbidden response a status code equal to that given
func (o *SiemUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SiemUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SiemUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SiemUpdateForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SiemUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSiemUpdateInternalServerError creates a SiemUpdateInternalServerError with default headers values
func NewSiemUpdateInternalServerError() *SiemUpdateInternalServerError {
	return &SiemUpdateInternalServerError{}
}

/* SiemUpdateInternalServerError describes a response with status code 500, with default header values.

server error
*/
type SiemUpdateInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this siem update internal server error response has a 2xx status code
func (o *SiemUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this siem update internal server error response has a 3xx status code
func (o *SiemUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this siem update internal server error response has a 4xx status code
func (o *SiemUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this siem update internal server error response has a 5xx status code
func (o *SiemUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this siem update internal server error response a status code equal to that given
func (o *SiemUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SiemUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *SiemUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /config/siem/{name}][%d] siemUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *SiemUpdateInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *SiemUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
