// Code generated by go-swagger; DO NOT EDIT.

package s_i_e_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s i e m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s i e m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SearchSiems(params *SearchSiemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSiemsOK, error)

	SiemCreate(params *SiemCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SiemCreateCreated, error)

	SiemDelete(params *SiemDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SiemDeleteOK, error)

	SiemGet(params *SiemGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SiemGetOK, error)

	SiemUpdate(params *SiemUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SiemUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SearchSiems searches s i e m endpoints

  Search SIEM Endpoints by name.
*/
func (a *Client) SearchSiems(params *SearchSiemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSiemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSiemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSiems",
		Method:             "GET",
		PathPattern:        "/config/siem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchSiemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSiemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSiems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SiemCreate creates s i e m endpoint

  Creates a new SIEM endpoint.
*/
func (a *Client) SiemCreate(params *SiemCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SiemCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSiemCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "siemCreate",
		Method:             "POST",
		PathPattern:        "/config/siem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SiemCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SiemCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for siemCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SiemDelete deletes s i e m endpoint

  Delete an existing SIEM endpoint.
*/
func (a *Client) SiemDelete(params *SiemDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SiemDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSiemDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "siemDelete",
		Method:             "DELETE",
		PathPattern:        "/config/siem/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SiemDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SiemDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for siemDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SiemGet gets s i e m endpoint

  Retrieve an existing SIEM endpoint.
*/
func (a *Client) SiemGet(params *SiemGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SiemGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSiemGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "siemGet",
		Method:             "GET",
		PathPattern:        "/config/siem/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SiemGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SiemGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for siemGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SiemUpdate updates s i e m endpoint

  Update an existing SIEM endpoint. Update sets "failed" to "false" and "failedEvents" to "0" automatically.
*/
func (a *Client) SiemUpdate(params *SiemUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SiemUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSiemUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "siemUpdate",
		Method:             "PUT",
		PathPattern:        "/config/siem/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SiemUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SiemUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for siemUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
