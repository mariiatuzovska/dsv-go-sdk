// Code generated by go-swagger; DO NOT EDIT.

package p_k_i

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// RegisterRootReader is a Reader for the RegisterRoot structure.
type RegisterRootReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterRootReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRegisterRootCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterRootBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRegisterRootUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRegisterRootForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterRootInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRegisterRootCreated creates a RegisterRootCreated with default headers values
func NewRegisterRootCreated() *RegisterRootCreated {
	return &RegisterRootCreated{}
}

/* RegisterRootCreated describes a response with status code 201, with default header values.

no error
*/
type RegisterRootCreated struct {
	Payload *models.ResponseRootCertificate
}

// IsSuccess returns true when this register root created response has a 2xx status code
func (o *RegisterRootCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register root created response has a 3xx status code
func (o *RegisterRootCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register root created response has a 4xx status code
func (o *RegisterRootCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this register root created response has a 5xx status code
func (o *RegisterRootCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this register root created response a status code equal to that given
func (o *RegisterRootCreated) IsCode(code int) bool {
	return code == 201
}

func (o *RegisterRootCreated) Error() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootCreated  %+v", 201, o.Payload)
}

func (o *RegisterRootCreated) String() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootCreated  %+v", 201, o.Payload)
}

func (o *RegisterRootCreated) GetPayload() *models.ResponseRootCertificate {
	return o.Payload
}

func (o *RegisterRootCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseRootCertificate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterRootBadRequest creates a RegisterRootBadRequest with default headers values
func NewRegisterRootBadRequest() *RegisterRootBadRequest {
	return &RegisterRootBadRequest{}
}

/* RegisterRootBadRequest describes a response with status code 400, with default header values.

bad request
*/
type RegisterRootBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this register root bad request response has a 2xx status code
func (o *RegisterRootBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register root bad request response has a 3xx status code
func (o *RegisterRootBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register root bad request response has a 4xx status code
func (o *RegisterRootBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this register root bad request response has a 5xx status code
func (o *RegisterRootBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this register root bad request response a status code equal to that given
func (o *RegisterRootBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RegisterRootBadRequest) Error() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterRootBadRequest) String() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterRootBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RegisterRootBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterRootUnauthorized creates a RegisterRootUnauthorized with default headers values
func NewRegisterRootUnauthorized() *RegisterRootUnauthorized {
	return &RegisterRootUnauthorized{}
}

/* RegisterRootUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RegisterRootUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this register root unauthorized response has a 2xx status code
func (o *RegisterRootUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register root unauthorized response has a 3xx status code
func (o *RegisterRootUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register root unauthorized response has a 4xx status code
func (o *RegisterRootUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this register root unauthorized response has a 5xx status code
func (o *RegisterRootUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this register root unauthorized response a status code equal to that given
func (o *RegisterRootUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RegisterRootUnauthorized) Error() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootUnauthorized  %+v", 401, o.Payload)
}

func (o *RegisterRootUnauthorized) String() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootUnauthorized  %+v", 401, o.Payload)
}

func (o *RegisterRootUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RegisterRootUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterRootForbidden creates a RegisterRootForbidden with default headers values
func NewRegisterRootForbidden() *RegisterRootForbidden {
	return &RegisterRootForbidden{}
}

/* RegisterRootForbidden describes a response with status code 403, with default header values.

forbidden
*/
type RegisterRootForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this register root forbidden response has a 2xx status code
func (o *RegisterRootForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register root forbidden response has a 3xx status code
func (o *RegisterRootForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register root forbidden response has a 4xx status code
func (o *RegisterRootForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this register root forbidden response has a 5xx status code
func (o *RegisterRootForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this register root forbidden response a status code equal to that given
func (o *RegisterRootForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RegisterRootForbidden) Error() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootForbidden  %+v", 403, o.Payload)
}

func (o *RegisterRootForbidden) String() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootForbidden  %+v", 403, o.Payload)
}

func (o *RegisterRootForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RegisterRootForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterRootInternalServerError creates a RegisterRootInternalServerError with default headers values
func NewRegisterRootInternalServerError() *RegisterRootInternalServerError {
	return &RegisterRootInternalServerError{}
}

/* RegisterRootInternalServerError describes a response with status code 500, with default header values.

server error
*/
type RegisterRootInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this register root internal server error response has a 2xx status code
func (o *RegisterRootInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register root internal server error response has a 3xx status code
func (o *RegisterRootInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register root internal server error response has a 4xx status code
func (o *RegisterRootInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this register root internal server error response has a 5xx status code
func (o *RegisterRootInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this register root internal server error response a status code equal to that given
func (o *RegisterRootInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RegisterRootInternalServerError) Error() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterRootInternalServerError) String() string {
	return fmt.Sprintf("[POST /pki/register][%d] registerRootInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterRootInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RegisterRootInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
