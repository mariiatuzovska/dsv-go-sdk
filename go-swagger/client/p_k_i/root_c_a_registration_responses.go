// Code generated by go-swagger; DO NOT EDIT.

package p_k_i

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// RootCARegistrationReader is a Reader for the RootCARegistration structure.
type RootCARegistrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RootCARegistrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRootCARegistrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRootCARegistrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRootCARegistrationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRootCARegistrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRootCARegistrationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRootCARegistrationOK creates a RootCARegistrationOK with default headers values
func NewRootCARegistrationOK() *RootCARegistrationOK {
	return &RootCARegistrationOK{}
}

/* RootCARegistrationOK describes a response with status code 200, with default header values.

no error
*/
type RootCARegistrationOK struct {
	Payload *models.ResponseCertificate
}

// IsSuccess returns true when this root c a registration o k response has a 2xx status code
func (o *RootCARegistrationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this root c a registration o k response has a 3xx status code
func (o *RootCARegistrationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this root c a registration o k response has a 4xx status code
func (o *RootCARegistrationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this root c a registration o k response has a 5xx status code
func (o *RootCARegistrationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this root c a registration o k response a status code equal to that given
func (o *RootCARegistrationOK) IsCode(code int) bool {
	return code == 200
}

func (o *RootCARegistrationOK) Error() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationOK  %+v", 200, o.Payload)
}

func (o *RootCARegistrationOK) String() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationOK  %+v", 200, o.Payload)
}

func (o *RootCARegistrationOK) GetPayload() *models.ResponseCertificate {
	return o.Payload
}

func (o *RootCARegistrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseCertificate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRootCARegistrationBadRequest creates a RootCARegistrationBadRequest with default headers values
func NewRootCARegistrationBadRequest() *RootCARegistrationBadRequest {
	return &RootCARegistrationBadRequest{}
}

/* RootCARegistrationBadRequest describes a response with status code 400, with default header values.

bad request
*/
type RootCARegistrationBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this root c a registration bad request response has a 2xx status code
func (o *RootCARegistrationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this root c a registration bad request response has a 3xx status code
func (o *RootCARegistrationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this root c a registration bad request response has a 4xx status code
func (o *RootCARegistrationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this root c a registration bad request response has a 5xx status code
func (o *RootCARegistrationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this root c a registration bad request response a status code equal to that given
func (o *RootCARegistrationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RootCARegistrationBadRequest) Error() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationBadRequest  %+v", 400, o.Payload)
}

func (o *RootCARegistrationBadRequest) String() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationBadRequest  %+v", 400, o.Payload)
}

func (o *RootCARegistrationBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RootCARegistrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRootCARegistrationUnauthorized creates a RootCARegistrationUnauthorized with default headers values
func NewRootCARegistrationUnauthorized() *RootCARegistrationUnauthorized {
	return &RootCARegistrationUnauthorized{}
}

/* RootCARegistrationUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RootCARegistrationUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this root c a registration unauthorized response has a 2xx status code
func (o *RootCARegistrationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this root c a registration unauthorized response has a 3xx status code
func (o *RootCARegistrationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this root c a registration unauthorized response has a 4xx status code
func (o *RootCARegistrationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this root c a registration unauthorized response has a 5xx status code
func (o *RootCARegistrationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this root c a registration unauthorized response a status code equal to that given
func (o *RootCARegistrationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RootCARegistrationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationUnauthorized  %+v", 401, o.Payload)
}

func (o *RootCARegistrationUnauthorized) String() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationUnauthorized  %+v", 401, o.Payload)
}

func (o *RootCARegistrationUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RootCARegistrationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRootCARegistrationForbidden creates a RootCARegistrationForbidden with default headers values
func NewRootCARegistrationForbidden() *RootCARegistrationForbidden {
	return &RootCARegistrationForbidden{}
}

/* RootCARegistrationForbidden describes a response with status code 403, with default header values.

forbidden
*/
type RootCARegistrationForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this root c a registration forbidden response has a 2xx status code
func (o *RootCARegistrationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this root c a registration forbidden response has a 3xx status code
func (o *RootCARegistrationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this root c a registration forbidden response has a 4xx status code
func (o *RootCARegistrationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this root c a registration forbidden response has a 5xx status code
func (o *RootCARegistrationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this root c a registration forbidden response a status code equal to that given
func (o *RootCARegistrationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RootCARegistrationForbidden) Error() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationForbidden  %+v", 403, o.Payload)
}

func (o *RootCARegistrationForbidden) String() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationForbidden  %+v", 403, o.Payload)
}

func (o *RootCARegistrationForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RootCARegistrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRootCARegistrationInternalServerError creates a RootCARegistrationInternalServerError with default headers values
func NewRootCARegistrationInternalServerError() *RootCARegistrationInternalServerError {
	return &RootCARegistrationInternalServerError{}
}

/* RootCARegistrationInternalServerError describes a response with status code 500, with default header values.

server error
*/
type RootCARegistrationInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this root c a registration internal server error response has a 2xx status code
func (o *RootCARegistrationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this root c a registration internal server error response has a 3xx status code
func (o *RootCARegistrationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this root c a registration internal server error response has a 4xx status code
func (o *RootCARegistrationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this root c a registration internal server error response has a 5xx status code
func (o *RootCARegistrationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this root c a registration internal server error response a status code equal to that given
func (o *RootCARegistrationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RootCARegistrationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationInternalServerError  %+v", 500, o.Payload)
}

func (o *RootCARegistrationInternalServerError) String() string {
	return fmt.Sprintf("[POST /pki/root][%d] rootCARegistrationInternalServerError  %+v", 500, o.Payload)
}

func (o *RootCARegistrationInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *RootCARegistrationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
