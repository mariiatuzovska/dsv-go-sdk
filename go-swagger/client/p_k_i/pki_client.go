// Code generated by go-swagger; DO NOT EDIT.

package p_k_i

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new p k i API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p k i API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LeafParams(params *LeafParamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LeafParamsOK, error)

	SSHCertParams(params *SSHCertParamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHCertParamsOK, error)

	RegisterRoot(params *RegisterRootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterRootCreated, error)

	RootCARegistration(params *RootCARegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RootCARegistrationOK, error)

	SignCertificate(params *SignCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignCertificateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LeafParams creates leaf certificate and private key

  Create and return a signed certificate with a private key based on a registered root CA.
*/
func (a *Client) LeafParams(params *LeafParamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LeafParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLeafParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LeafParams",
		Method:             "POST",
		PathPattern:        "/pki/leaf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LeafParamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LeafParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LeafParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SSHCertParams creates SSH certificate

  Create, store and return a signed SSH certificate using a root private key and SHH-compatible
leaf public key.
*/
func (a *Client) SSHCertParams(params *SSHCertParamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHCertParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSSHCertParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SSHCertParams",
		Method:             "POST",
		PathPattern:        "/pki/ssh-cert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SSHCertParamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SSHCertParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SSHCertParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterRoot registers root c a

  Register a root CA as a secret.
*/
func (a *Client) RegisterRoot(params *RegisterRootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterRootCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterRootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerRoot",
		Method:             "POST",
		PathPattern:        "/pki/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterRootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterRootCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerRoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RootCARegistration generates root certificate

  Create and return a new root certificate.
*/
func (a *Client) RootCARegistration(params *RootCARegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RootCARegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRootCARegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rootCARegistration",
		Method:             "POST",
		PathPattern:        "/pki/root",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RootCARegistrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RootCARegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rootCARegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SignCertificate creates signed certificate

  Create and return a signed certificate based on a registered root CA with a given CSR.
*/
func (a *Client) SignCertificate(params *SignCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signCertificate",
		Method:             "POST",
		PathPattern:        "/pki/sign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SignCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for signCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
