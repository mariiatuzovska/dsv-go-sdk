// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// GetRoleByVersionReader is a Reader for the GetRoleByVersion structure.
type GetRoleByVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoleByVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoleByVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoleByVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoleByVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoleByVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoleByVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoleByVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoleByVersionOK creates a GetRoleByVersionOK with default headers values
func NewGetRoleByVersionOK() *GetRoleByVersionOK {
	return &GetRoleByVersionOK{}
}

/* GetRoleByVersionOK describes a response with status code 200, with default header values.

no error
*/
type GetRoleByVersionOK struct {
	Payload *models.RoleVersionResponse
}

// IsSuccess returns true when this get role by version o k response has a 2xx status code
func (o *GetRoleByVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get role by version o k response has a 3xx status code
func (o *GetRoleByVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role by version o k response has a 4xx status code
func (o *GetRoleByVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get role by version o k response has a 5xx status code
func (o *GetRoleByVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get role by version o k response a status code equal to that given
func (o *GetRoleByVersionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRoleByVersionOK) Error() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionOK  %+v", 200, o.Payload)
}

func (o *GetRoleByVersionOK) String() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionOK  %+v", 200, o.Payload)
}

func (o *GetRoleByVersionOK) GetPayload() *models.RoleVersionResponse {
	return o.Payload
}

func (o *GetRoleByVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleVersionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleByVersionBadRequest creates a GetRoleByVersionBadRequest with default headers values
func NewGetRoleByVersionBadRequest() *GetRoleByVersionBadRequest {
	return &GetRoleByVersionBadRequest{}
}

/* GetRoleByVersionBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetRoleByVersionBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get role by version bad request response has a 2xx status code
func (o *GetRoleByVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role by version bad request response has a 3xx status code
func (o *GetRoleByVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role by version bad request response has a 4xx status code
func (o *GetRoleByVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role by version bad request response has a 5xx status code
func (o *GetRoleByVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get role by version bad request response a status code equal to that given
func (o *GetRoleByVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRoleByVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoleByVersionBadRequest) String() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoleByVersionBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetRoleByVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleByVersionUnauthorized creates a GetRoleByVersionUnauthorized with default headers values
func NewGetRoleByVersionUnauthorized() *GetRoleByVersionUnauthorized {
	return &GetRoleByVersionUnauthorized{}
}

/* GetRoleByVersionUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetRoleByVersionUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get role by version unauthorized response has a 2xx status code
func (o *GetRoleByVersionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role by version unauthorized response has a 3xx status code
func (o *GetRoleByVersionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role by version unauthorized response has a 4xx status code
func (o *GetRoleByVersionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role by version unauthorized response has a 5xx status code
func (o *GetRoleByVersionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get role by version unauthorized response a status code equal to that given
func (o *GetRoleByVersionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRoleByVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoleByVersionUnauthorized) String() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoleByVersionUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetRoleByVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleByVersionForbidden creates a GetRoleByVersionForbidden with default headers values
func NewGetRoleByVersionForbidden() *GetRoleByVersionForbidden {
	return &GetRoleByVersionForbidden{}
}

/* GetRoleByVersionForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetRoleByVersionForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get role by version forbidden response has a 2xx status code
func (o *GetRoleByVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role by version forbidden response has a 3xx status code
func (o *GetRoleByVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role by version forbidden response has a 4xx status code
func (o *GetRoleByVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role by version forbidden response has a 5xx status code
func (o *GetRoleByVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get role by version forbidden response a status code equal to that given
func (o *GetRoleByVersionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRoleByVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetRoleByVersionForbidden) String() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetRoleByVersionForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetRoleByVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleByVersionNotFound creates a GetRoleByVersionNotFound with default headers values
func NewGetRoleByVersionNotFound() *GetRoleByVersionNotFound {
	return &GetRoleByVersionNotFound{}
}

/* GetRoleByVersionNotFound describes a response with status code 404, with default header values.

not found
*/
type GetRoleByVersionNotFound struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get role by version not found response has a 2xx status code
func (o *GetRoleByVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role by version not found response has a 3xx status code
func (o *GetRoleByVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role by version not found response has a 4xx status code
func (o *GetRoleByVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role by version not found response has a 5xx status code
func (o *GetRoleByVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get role by version not found response a status code equal to that given
func (o *GetRoleByVersionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRoleByVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetRoleByVersionNotFound) String() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetRoleByVersionNotFound) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetRoleByVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleByVersionInternalServerError creates a GetRoleByVersionInternalServerError with default headers values
func NewGetRoleByVersionInternalServerError() *GetRoleByVersionInternalServerError {
	return &GetRoleByVersionInternalServerError{}
}

/* GetRoleByVersionInternalServerError describes a response with status code 500, with default header values.

server error
*/
type GetRoleByVersionInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this get role by version internal server error response has a 2xx status code
func (o *GetRoleByVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role by version internal server error response has a 3xx status code
func (o *GetRoleByVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role by version internal server error response has a 4xx status code
func (o *GetRoleByVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get role by version internal server error response has a 5xx status code
func (o *GetRoleByVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get role by version internal server error response a status code equal to that given
func (o *GetRoleByVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRoleByVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoleByVersionInternalServerError) String() string {
	return fmt.Sprintf("[GET /roles/{name}/version/{version}][%d] getRoleByVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoleByVersionInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *GetRoleByVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
