// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariiatuzovska/dsv-go-sdk/go-swagger/models"
)

// UpdateRoleReader is a Reader for the UpdateRole structure.
type UpdateRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRoleOK creates a UpdateRoleOK with default headers values
func NewUpdateRoleOK() *UpdateRoleOK {
	return &UpdateRoleOK{}
}

/* UpdateRoleOK describes a response with status code 200, with default header values.

no error
*/
type UpdateRoleOK struct {
	Payload *models.Role
}

// IsSuccess returns true when this update role o k response has a 2xx status code
func (o *UpdateRoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update role o k response has a 3xx status code
func (o *UpdateRoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role o k response has a 4xx status code
func (o *UpdateRoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update role o k response has a 5xx status code
func (o *UpdateRoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update role o k response a status code equal to that given
func (o *UpdateRoleOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateRoleOK) Error() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleOK  %+v", 200, o.Payload)
}

func (o *UpdateRoleOK) String() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleOK  %+v", 200, o.Payload)
}

func (o *UpdateRoleOK) GetPayload() *models.Role {
	return o.Payload
}

func (o *UpdateRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Role)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleBadRequest creates a UpdateRoleBadRequest with default headers values
func NewUpdateRoleBadRequest() *UpdateRoleBadRequest {
	return &UpdateRoleBadRequest{}
}

/* UpdateRoleBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UpdateRoleBadRequest struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update role bad request response has a 2xx status code
func (o *UpdateRoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update role bad request response has a 3xx status code
func (o *UpdateRoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role bad request response has a 4xx status code
func (o *UpdateRoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update role bad request response has a 5xx status code
func (o *UpdateRoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update role bad request response a status code equal to that given
func (o *UpdateRoleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateRoleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRoleBadRequest) String() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRoleBadRequest) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleUnauthorized creates a UpdateRoleUnauthorized with default headers values
func NewUpdateRoleUnauthorized() *UpdateRoleUnauthorized {
	return &UpdateRoleUnauthorized{}
}

/* UpdateRoleUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UpdateRoleUnauthorized struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update role unauthorized response has a 2xx status code
func (o *UpdateRoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update role unauthorized response has a 3xx status code
func (o *UpdateRoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role unauthorized response has a 4xx status code
func (o *UpdateRoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update role unauthorized response has a 5xx status code
func (o *UpdateRoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update role unauthorized response a status code equal to that given
func (o *UpdateRoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateRoleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRoleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRoleUnauthorized) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleForbidden creates a UpdateRoleForbidden with default headers values
func NewUpdateRoleForbidden() *UpdateRoleForbidden {
	return &UpdateRoleForbidden{}
}

/* UpdateRoleForbidden describes a response with status code 403, with default header values.

forbidden
*/
type UpdateRoleForbidden struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update role forbidden response has a 2xx status code
func (o *UpdateRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update role forbidden response has a 3xx status code
func (o *UpdateRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role forbidden response has a 4xx status code
func (o *UpdateRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update role forbidden response has a 5xx status code
func (o *UpdateRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update role forbidden response a status code equal to that given
func (o *UpdateRoleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateRoleForbidden) Error() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRoleForbidden) String() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRoleForbidden) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleInternalServerError creates a UpdateRoleInternalServerError with default headers values
func NewUpdateRoleInternalServerError() *UpdateRoleInternalServerError {
	return &UpdateRoleInternalServerError{}
}

/* UpdateRoleInternalServerError describes a response with status code 500, with default header values.

server error
*/
type UpdateRoleInternalServerError struct {
	Payload *models.HTTPError
}

// IsSuccess returns true when this update role internal server error response has a 2xx status code
func (o *UpdateRoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update role internal server error response has a 3xx status code
func (o *UpdateRoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role internal server error response has a 4xx status code
func (o *UpdateRoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update role internal server error response has a 5xx status code
func (o *UpdateRoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update role internal server error response a status code equal to that given
func (o *UpdateRoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateRoleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRoleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /roles/{name}][%d] updateRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRoleInternalServerError) GetPayload() *models.HTTPError {
	return o.Payload
}

func (o *UpdateRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
